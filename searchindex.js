Search.setIndex({"docnames": ["backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_docstrings", "deep_dive/12_docstring_examples", "deep_dive/13_array_api_tests", "deep_dive/14_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_docstrings.rst", "deep_dive/12_docstring_examples.rst", "deep_dive/13_array_api_tests.rst", "deep_dive/14_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "DevMapper", "DevMapperMultiProc", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "FirstLayerSiren", "GlorotUniform", "Ones", "Siren", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 5, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 121, 122, 123, 124, 128, 129, 131, 132, 133, 143, 144, 145, 242, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 562, 569, 606, 612, 631, 636, 637, 639, 641, 671, 838, 840, 850, 873, 876, 942, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 175, 180, 181, 186, 189, 194, 195, 200, 203, 206, 211, 216, 219, 224, 229, 234, 237, 242, 243, 244, 245, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 329, 333, 337, 342, 346, 351, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 493, 494, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 539, 543, 548, 553, 558, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 642, 646, 647, 651, 655, 659, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 695, 698, 701, 704, 707, 710, 714, 717, 718, 721, 724, 727, 730, 733, 734, 737, 740, 743, 746, 749, 752, 755, 758, 759, 764, 769, 774, 775, 780, 784, 788, 792, 796, 800, 804, 808, 813, 814, 818, 822, 826, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 866, 867, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 886, 887, 888, 893, 898, 899, 903, 907, 911, 915, 919, 923, 927, 931, 932, 937, 942, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987], "backend_handl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 942], "contextmanag": 0, "modul": [0, 3, 4, 15, 17, 20, 64, 65, 68, 69, 70, 71, 72, 109, 110, 117, 118, 119, 121, 125, 126, 128, 129, 131, 133, 144, 145, 562, 613, 861, 862, 866, 942, 950, 951, 952, 953, 954, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 976, 983, 984], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987], "base": [0, 18, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 120, 122, 128, 144, 171, 203, 204, 205, 242, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 323, 412, 415, 456, 459, 460, 463, 464, 467, 468, 471, 511, 514, 562, 597, 620, 627, 636, 878, 879, 880, 884, 886, 898, 899, 902, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "object": [0, 68, 69, 70, 71, 72, 117, 130, 133, 171, 189, 192, 242, 259, 276, 318, 636, 838, 841, 843, 845, 846, 847, 852, 853, 854, 855, 861, 872, 955, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 973, 974], "__init__": [0, 3, 4, 68, 69, 70, 71, 72, 112, 119, 123, 128, 130, 131, 132, 133, 242, 276, 283, 284, 285, 286, 287, 288, 636, 861, 862, 866, 942, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "choose_random_backend": 0, "exclud": [0, 1, 115, 128, 171, 172, 173, 861, 867, 869], "none": [0, 1, 4, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 250, 252, 254, 255, 256, 259, 262, 276, 283, 284, 291, 292, 315, 316, 317, 318, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 600, 602, 603, 607, 613, 615, 618, 619, 620, 621, 626, 627, 633, 636, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 953, 954, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "clear_backend_stack": 0, "current_backend": [0, 70, 71, 112, 118], "arg": [0, 3, 20, 23, 24, 25, 68, 69, 128, 130, 132, 276, 283, 297, 301, 305, 317, 562, 619, 953, 954, 973, 974], "kwarg": [0, 3, 23, 24, 25, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 128, 130, 132, 276, 283, 297, 301, 305, 562, 612, 953, 954, 973, 974], "return": [0, 3, 4, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 275, 276, 283, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 945, 947, 953, 954, 961, 970, 971, 977, 981], "current": [0, 3, 4, 11, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 118, 124, 128, 133, 144, 145, 242, 260, 261, 263, 275, 276, 283, 306, 307, 311, 313, 562, 596, 603, 607, 614, 616, 636, 672, 838, 839, 848, 849, 942], "prioriti": [0, 3, 18, 68, 69, 125], "global_backend": [0, 3], "argument": [0, 3, 4, 13, 19, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 111, 112, 114, 115, 117, 118, 119, 121, 122, 126, 128, 130, 131, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 267, 276, 283, 284, 297, 301, 305, 323, 324, 327, 337, 340, 342, 345, 346, 349, 387, 390, 420, 423, 492, 503, 506, 535, 538, 539, 542, 548, 552, 562, 568, 569, 573, 583, 590, 612, 619, 673, 676, 685, 686, 687, 690, 698, 700, 774, 808, 811, 838, 844, 856, 857, 860, 878, 880, 884, 898, 903, 906, 923, 926, 931, 932, 935, 945, 947, 953, 954, 973, 974], "": [0, 3, 4, 5, 11, 14, 15, 16, 17, 18, 20, 23, 26, 27, 68, 69, 111, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 170, 171, 206, 209, 224, 228, 229, 233, 242, 260, 261, 276, 292, 316, 323, 515, 518, 562, 571, 636, 642, 644, 647, 649, 655, 657, 663, 665, 686, 737, 739, 740, 742, 838, 844, 850, 898, 919, 922, 927, 930, 942, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "paramet": [0, 3, 4, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 112, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 640, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 945, 947, 953, 954, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "from": [0, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 171, 172, 173, 175, 178, 181, 184, 189, 192, 194, 195, 198, 206, 209, 211, 214, 219, 222, 237, 241, 242, 248, 251, 267, 276, 283, 284, 292, 307, 311, 316, 317, 323, 428, 431, 535, 538, 562, 583, 590, 591, 594, 630, 636, 642, 644, 655, 657, 673, 681, 684, 686, 698, 700, 737, 739, 749, 751, 774, 792, 795, 804, 807, 814, 817, 834, 835, 836, 837, 838, 840, 850, 851, 861, 862, 863, 864, 866, 867, 869, 873, 877, 878, 879, 885, 898, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 948, 953, 954, 961, 969, 972, 977, 981], "which": [0, 3, 4, 13, 14, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 168, 169, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 253, 257, 259, 262, 263, 275, 276, 283, 284, 293, 298, 299, 300, 301, 302, 303, 304, 305, 307, 311, 313, 315, 316, 317, 323, 515, 518, 562, 568, 580, 581, 583, 590, 591, 594, 596, 602, 606, 614, 615, 616, 618, 619, 634, 636, 642, 644, 646, 647, 649, 655, 657, 659, 661, 663, 665, 668, 670, 671, 673, 684, 686, 692, 694, 698, 700, 714, 716, 734, 736, 737, 739, 749, 751, 752, 754, 758, 764, 767, 769, 772, 774, 780, 783, 792, 795, 800, 803, 808, 811, 813, 818, 821, 838, 843, 844, 845, 846, 851, 852, 853, 854, 855, 861, 862, 863, 864, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 945, 947, 953, 954, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "try": [0, 3, 12, 14, 15, 17, 18, 19, 20, 68, 69, 121, 122, 126, 130, 145, 562, 633, 942], "infer": [0, 3, 111, 119, 123, 124, 128, 133, 168, 169, 171, 172, 173, 175, 178, 181, 184, 194, 195, 198, 211, 214, 219, 222, 237, 241, 323, 428, 431, 562, 599, 624, 774, 804, 807], "when": [0, 3, 13, 14, 17, 18, 19, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 242, 245, 276, 323, 337, 340, 416, 419, 511, 514, 562, 573, 606, 627, 758, 759, 762, 764, 767, 769, 772, 838, 849, 873, 874, 875, 877, 898, 903, 906, 911, 914, 919, 922, 927, 930, 942, 973, 974], "i": [0, 3, 4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 156, 157, 161, 168, 169, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 248, 251, 257, 263, 264, 265, 275, 276, 283, 284, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 316, 317, 319, 320, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 363, 366, 371, 374, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 424, 427, 436, 439, 440, 443, 444, 447, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 492, 493, 494, 497, 499, 502, 503, 506, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 548, 552, 553, 557, 558, 561, 562, 563, 566, 570, 571, 573, 574, 575, 577, 580, 581, 583, 587, 589, 590, 601, 602, 606, 608, 609, 610, 611, 612, 613, 617, 618, 619, 622, 634, 635, 636, 642, 644, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 668, 672, 673, 676, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 710, 713, 714, 716, 718, 720, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 743, 745, 746, 748, 749, 751, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 818, 821, 830, 833, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 851, 856, 857, 860, 861, 862, 866, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 953, 954, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "global": [0, 3, 4, 5, 11, 68, 69, 70, 71, 72, 118, 119, 123, 124, 128, 242, 254, 255, 256, 276, 283, 284, 315, 316, 317, 562, 597, 598, 617, 620, 621, 622, 626, 627, 636, 672, 856, 857, 860, 975, 976], "set": [0, 3, 4, 5, 11, 13, 16, 18, 23, 26, 27, 57, 68, 69, 102, 111, 112, 117, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 276, 292, 302, 303, 314, 315, 316, 317, 323, 355, 358, 562, 563, 566, 620, 621, 622, 623, 636, 642, 644, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 686, 692, 694, 714, 716, 718, 720, 727, 729, 734, 736, 838, 839, 848, 849, 850, 854, 855, 861, 871, 873, 874, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 919, 922, 927, 930, 961, 970, 977, 978, 979, 980, 981, 982], "ret": [0, 3, 4, 11, 23, 24, 25, 26, 27, 68, 69, 112, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 251, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 275, 276, 283, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 566, 568, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 618, 619, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 637, 640, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 945, 947, 953, 954, 977, 981], "exampl": [0, 3, 4, 5, 11, 15, 17, 18, 19, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 234, 236, 237, 241, 242, 245, 248, 249, 250, 251, 252, 260, 261, 276, 292, 293, 295, 307, 308, 309, 310, 311, 314, 316, 318, 320, 321, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 359, 362, 363, 366, 367, 370, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 412, 415, 420, 421, 422, 423, 428, 431, 432, 435, 448, 451, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 570, 571, 579, 580, 587, 590, 591, 592, 593, 594, 595, 598, 609, 624, 625, 630, 631, 632, 636, 637, 638, 639, 640, 641, 672, 673, 674, 676, 678, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 707, 709, 718, 720, 724, 726, 737, 739, 743, 745, 746, 748, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 821, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 919, 922, 923, 926, 931, 932, 935, 942], "If": [0, 3, 4, 5, 13, 16, 17, 18, 19, 20, 23, 26, 27, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 171, 172, 173, 180, 181, 184, 186, 187, 194, 195, 198, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 267, 276, 292, 316, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 456, 459, 460, 463, 468, 471, 472, 475, 480, 483, 484, 487, 494, 497, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 562, 606, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 672, 686, 687, 690, 692, 694, 714, 716, 718, 720, 727, 729, 730, 732, 734, 736, 737, 739, 749, 751, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 788, 791, 792, 795, 808, 811, 813, 814, 817, 818, 821, 834, 835, 836, 838, 850, 851, 861, 866, 867, 869, 873, 874, 875, 876, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942], "import": [0, 3, 14, 19, 64, 65, 109, 110, 112, 114, 115, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 276, 314, 942, 948], "numpi": [0, 3, 4, 5, 13, 14, 18, 19, 68, 69, 113, 117, 119, 123, 124, 125, 128, 130, 133, 562, 631, 898, 899, 902, 942], "np": [0, 3, 113, 117, 121, 123, 124, 125, 130, 131, 133, 942], "x": [0, 3, 11, 20, 23, 26, 27, 30, 31, 34, 35, 36, 37, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 103, 104, 107, 108, 112, 113, 114, 115, 117, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 171, 175, 178, 179, 181, 184, 185, 189, 192, 193, 195, 198, 199, 206, 209, 211, 214, 215, 219, 222, 223, 224, 225, 228, 229, 230, 233, 234, 236, 237, 238, 241, 242, 245, 247, 248, 249, 250, 251, 252, 257, 276, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 307, 311, 316, 318, 323, 324, 325, 326, 327, 328, 329, 332, 333, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 408, 411, 412, 415, 416, 419, 420, 421, 422, 423, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 480, 483, 492, 493, 499, 502, 507, 510, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 566, 570, 571, 572, 574, 575, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 601, 602, 604, 605, 606, 608, 609, 610, 611, 615, 624, 625, 628, 630, 631, 632, 634, 635, 636, 646, 651, 653, 654, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 714, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 737, 739, 740, 742, 743, 745, 746, 748, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 833, 838, 839, 844, 848, 849, 850, 856, 857, 860, 861, 863, 864, 865, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 896, 897, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 936, 937, 940, 941, 942, 961, 972], "arrai": [0, 3, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 165, 167, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 208, 209, 210, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 246, 247, 248, 250, 251, 252, 257, 259, 262, 264, 265, 267, 271, 276, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 307, 311, 313, 317, 318, 323, 324, 326, 327, 328, 329, 332, 333, 336, 337, 339, 340, 341, 342, 345, 346, 348, 349, 350, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 389, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 422, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 561, 562, 563, 565, 566, 567, 570, 571, 572, 574, 575, 577, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 599, 601, 602, 603, 604, 605, 606, 608, 609, 611, 614, 615, 616, 618, 619, 624, 625, 628, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 644, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 777, 778, 779, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 810, 811, 812, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 840, 850, 851, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 945, 947, 961, 969, 972], "2": [0, 3, 17, 18, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 115, 117, 119, 122, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 167, 170, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 237, 241, 242, 245, 248, 249, 250, 251, 252, 276, 292, 293, 295, 307, 309, 311, 318, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 350, 351, 354, 355, 358, 363, 366, 367, 370, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 412, 415, 420, 421, 422, 423, 428, 431, 432, 435, 448, 451, 452, 455, 468, 471, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 570, 571, 574, 575, 577, 580, 587, 590, 591, 592, 593, 594, 595, 609, 624, 625, 630, 636, 637, 638, 639, 640, 641, 673, 676, 677, 678, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 707, 709, 710, 713, 714, 716, 718, 720, 724, 726, 727, 729, 730, 732, 737, 739, 743, 744, 745, 746, 748, 752, 753, 754, 758, 759, 762, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 817, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935, 942], "0": [0, 3, 18, 28, 29, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 50, 51, 56, 57, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 115, 117, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 186, 187, 188, 200, 201, 203, 204, 205, 219, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 241, 242, 245, 248, 250, 251, 252, 259, 276, 277, 280, 283, 285, 289, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 307, 311, 314, 316, 317, 321, 323, 324, 325, 327, 328, 329, 332, 333, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354, 355, 358, 359, 362, 363, 366, 371, 374, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 421, 422, 423, 432, 435, 452, 455, 456, 459, 460, 463, 468, 471, 492, 493, 494, 497, 499, 502, 503, 506, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 570, 571, 574, 575, 577, 579, 580, 581, 587, 590, 591, 594, 595, 600, 609, 615, 618, 619, 624, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 659, 660, 661, 662, 673, 674, 676, 678, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 707, 709, 737, 739, 743, 745, 746, 747, 748, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 799, 800, 803, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 825, 830, 832, 838, 850, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 891, 898, 899, 902, 903, 906, 907, 910, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 935, 942, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984], "print": [0, 3, 4, 5, 11, 17, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 115, 117, 122, 128, 130, 131, 132, 156, 158, 159, 160, 161, 162, 165, 167, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 234, 236, 237, 241, 242, 245, 248, 249, 250, 251, 252, 260, 261, 276, 293, 307, 308, 309, 310, 311, 313, 316, 320, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 359, 362, 363, 366, 367, 370, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 412, 415, 420, 421, 422, 423, 428, 431, 432, 435, 448, 451, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 570, 571, 579, 580, 587, 590, 591, 592, 593, 594, 595, 598, 616, 624, 625, 630, 631, 632, 636, 637, 638, 640, 641, 672, 673, 674, 676, 678, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 707, 709, 724, 726, 737, 739, 743, 745, 746, 748, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 778, 779, 788, 791, 792, 795, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 817, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 919, 922, 923, 926, 931, 932, 935, 942], "function": [0, 3, 4, 5, 13, 18, 20, 21, 22, 23, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 111, 112, 114, 115, 116, 119, 121, 125, 126, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 214, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 945, 947, 950, 951, 952, 977, 980, 982], "py": [0, 3, 4, 18, 112, 113, 114, 117, 118, 119, 123, 124, 126, 128, 130, 132, 133, 861, 862, 866], "noqa": [0, 3, 4, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 452, 455, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 686, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 898, 903, 906], "The": [0, 3, 4, 12, 13, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 167, 168, 169, 171, 172, 173, 189, 192, 203, 204, 224, 228, 229, 233, 242, 243, 244, 245, 253, 258, 260, 261, 263, 266, 271, 275, 276, 283, 284, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 319, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 562, 568, 570, 573, 574, 582, 583, 589, 591, 594, 604, 605, 606, 608, 609, 610, 611, 613, 618, 619, 620, 621, 622, 625, 626, 627, 635, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 668, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 813, 826, 829, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 866, 873, 874, 875, 876, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 953, 954, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981], "set_backend": [0, 3, 4, 11, 118, 119, 120, 123, 242, 260, 261, 276, 314, 562, 624, 942], "ha": [0, 3, 4, 13, 14, 15, 18, 68, 69, 114, 115, 117, 118, 119, 120, 123, 124, 126, 128, 130, 132, 133, 144, 145, 171, 206, 209, 276, 292, 323, 324, 327, 494, 497, 511, 514, 636, 672, 686, 710, 713, 733, 734, 736, 737, 739, 746, 748, 774, 788, 791, 814, 817, 878, 879, 880, 884, 886, 898, 907, 910, 915, 918, 919, 922, 923, 926, 927, 930], "over": [0, 3, 13, 15, 17, 64, 65, 68, 69, 109, 110, 114, 115, 117, 119, 125, 130, 145, 686, 714, 716, 743, 745, 749, 751, 752, 754, 856, 857, 860, 861, 867, 869, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 975, 976], "ani": [0, 3, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 62, 63, 64, 65, 68, 69, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 276, 318, 323, 324, 327, 337, 340, 342, 345, 346, 349, 387, 390, 404, 407, 420, 423, 432, 435, 452, 455, 492, 503, 506, 535, 538, 539, 542, 548, 552, 562, 563, 566, 583, 584, 585, 586, 587, 590, 601, 608, 609, 610, 611, 626, 627, 636, 646, 673, 676, 683, 685, 686, 687, 690, 698, 700, 774, 808, 811, 834, 835, 836, 837, 838, 844, 848, 856, 857, 860, 861, 867, 869, 878, 880, 884, 898, 903, 906, 931, 932, 935, 942], "pass": [0, 3, 19, 64, 65, 68, 69, 70, 71, 72, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 242, 253, 276, 283, 317, 323, 355, 358, 562, 573, 606, 636, 671, 834, 835, 836, 953, 954, 973, 974, 977, 981, 983, 984], "jax": [0, 3, 4, 5, 14, 15, 18, 19, 113, 117, 119, 123, 124, 125, 128, 130, 133, 145, 636, 651, 653, 878, 879, 880, 884, 886, 942], "get_backend": [0, 118, 119], "specifi": [0, 4, 68, 69, 111, 113, 117, 118, 123, 124, 125, 128, 131, 132, 133, 171, 172, 173, 180, 194, 200, 201, 203, 204, 216, 217, 224, 228, 229, 233, 234, 236, 242, 245, 247, 276, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 311, 313, 316, 317, 318, 323, 515, 518, 562, 568, 580, 590, 591, 594, 601, 634, 686, 698, 700, 714, 716, 743, 745, 746, 748, 749, 751, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 792, 795, 808, 811, 814, 817, 818, 821, 830, 833, 838, 843, 845, 846, 852, 853, 854, 855, 873, 874, 875, 878, 879, 880, 884, 886, 887, 888, 891, 898, 899, 902, 915, 918, 923, 926, 931, 932, 935, 937, 940], "isn": [0, 4, 18, 131, 145], "t": [0, 4, 14, 15, 17, 18, 19, 20, 64, 65, 109, 110, 115, 117, 123, 128, 130, 131, 132, 133, 145, 562, 571, 673, 682, 683], "associ": [0, 4, 18, 117, 118, 120, 145, 323, 337, 340, 494, 497, 686, 718, 720, 727, 729, 755, 757], "option": [0, 4, 17, 18, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 109, 110, 112, 113, 114, 115, 117, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 253, 254, 255, 256, 263, 275, 276, 292, 316, 317, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 568, 574, 575, 577, 580, 581, 582, 584, 585, 586, 588, 590, 591, 594, 602, 613, 615, 618, 619, 626, 627, 636, 668, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 844, 849, 850, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 875, 877, 878, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "str": [0, 4, 23, 24, 25, 68, 69, 123, 124, 126, 168, 169, 171, 206, 209, 242, 243, 253, 254, 255, 258, 259, 262, 263, 264, 265, 268, 269, 270, 275, 276, 289, 292, 293, 295, 298, 299, 300, 301, 317, 562, 568, 582, 584, 585, 586, 613, 618, 619, 673, 674, 676, 678, 679, 680, 686, 730, 732, 834, 835, 836, 837, 838, 844, 898, 899, 902], "we": [0, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 64, 65, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 636, 646, 942, 948], "want": [0, 4, 14, 16, 17, 18, 64, 65, 109, 110, 117, 131, 132, 133, 145], "retriev": [0, 4, 18, 562, 568], "e": [0, 4, 14, 15, 16, 18, 20, 111, 117, 122, 131, 145, 170, 171, 206, 209, 242, 244, 267, 276, 289, 323, 324, 327, 355, 358, 371, 374, 379, 382, 387, 390, 412, 415, 420, 423, 424, 427, 436, 439, 456, 459, 464, 467, 492, 493, 499, 502, 511, 514, 515, 518, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 686, 692, 694, 710, 713, 718, 720, 727, 729, 734, 736, 737, 739, 752, 754, 774, 818, 821, 861, 866, 867, 869, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930], "one": [0, 4, 14, 15, 17, 18, 68, 69, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 113, 115, 117, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 171, 172, 173, 206, 209, 242, 246, 248, 251, 276, 302, 303, 304, 305, 317, 323, 324, 328, 337, 341, 346, 350, 492, 562, 563, 565, 566, 567, 591, 595, 612, 615, 618, 619, 686, 687, 691, 710, 713, 714, 716, 724, 726, 730, 732, 749, 751, 752, 754, 774, 775, 779, 788, 791, 792, 795, 808, 811, 812, 814, 817, 863, 865, 873, 874, 876, 878, 879, 880, 884, 885, 886, 898, 899, 902, 942], "default": [0, 4, 18, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 113, 114, 115, 117, 118, 119, 122, 123, 124, 132, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 254, 255, 256, 257, 276, 283, 284, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 312, 314, 315, 316, 317, 318, 321, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 566, 568, 574, 575, 577, 580, 581, 584, 585, 586, 588, 589, 590, 591, 594, 599, 600, 601, 602, 603, 606, 607, 608, 609, 611, 612, 613, 615, 617, 618, 619, 622, 624, 626, 627, 634, 635, 636, 637, 640, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 668, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 851, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 953, 954, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "torch": [0, 4, 11, 18, 112, 113, 117, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 145, 168, 169, 242, 260, 261, 276, 314, 562, 624, 774, 788, 791, 942], "tensorflow": [0, 4, 11, 14, 15, 18, 19, 113, 117, 123, 124, 125, 128, 133, 145, 942], "mxnet": [0, 4, 14, 19, 123, 124, 125, 128, 133, 942], "either": [0, 4, 11, 17, 18, 20, 68, 69, 114, 115, 117, 118, 119, 122, 123, 124, 128, 130, 131, 145, 171, 189, 192, 323, 337, 340, 355, 358, 440, 443, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 515, 518, 523, 526, 527, 530, 548, 552, 562, 583, 608, 612, 613, 686, 710, 713, 834, 835, 836, 837, 898, 915, 918, 923, 926, 961, 972, 973, 974], "doesn": [0, 4, 17, 20, 115, 117, 123, 128, 145], "matter": [0, 4, 13, 115], "been": [0, 4, 18, 113, 114, 117, 118, 119, 122, 123, 124, 126, 128, 144, 145, 276, 292, 562, 584, 585, 586, 861, 862], "ivy_np": [0, 4, 117], "us": [0, 4, 11, 15, 18, 19, 34, 35, 64, 65, 68, 69, 70, 71, 72, 79, 80, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 165, 167, 170, 242, 258, 276, 283, 284, 308, 312, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 342, 345, 346, 347, 348, 363, 366, 383, 386, 395, 398, 432, 435, 452, 455, 493, 499, 502, 503, 506, 519, 522, 535, 538, 562, 590, 597, 598, 612, 618, 619, 620, 621, 626, 627, 636, 637, 640, 642, 644, 655, 657, 659, 661, 673, 679, 681, 682, 684, 685, 686, 695, 697, 698, 700, 714, 716, 758, 759, 762, 774, 788, 791, 792, 795, 800, 803, 808, 811, 822, 825, 834, 835, 836, 837, 838, 839, 841, 847, 848, 849, 851, 856, 857, 860, 873, 874, 875, 876, 878, 879, 898, 899, 902, 931, 932, 935, 942, 961, 969, 972, 973, 974, 975, 976, 977, 979, 980], "ivy_jax": [0, 4], "subsequ": [0, 5, 17, 113, 115, 117, 118, 121, 125, 132], "call": [0, 5, 11, 14, 20, 70, 71, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 145, 276, 317, 562, 617, 622, 633, 636, 646, 838, 839, 844, 848, 849, 961, 972, 973, 974, 977, 981], "nativ": [0, 5, 23, 25, 26, 27, 68, 69, 117, 123, 125, 130, 131, 171, 211, 214, 242, 243, 244, 253, 276, 289, 290, 291, 292, 293, 312, 319, 322, 562, 606, 608, 611, 953, 954], "native_arrai": [0, 5, 11, 28, 29, 36, 37, 73, 74, 81, 82, 117, 156, 158, 159, 160, 161, 162, 165, 167, 171, 206, 209, 242, 248, 251, 276, 295, 311, 323, 324, 327, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 420, 423, 432, 435, 452, 455, 493, 499, 502, 503, 506, 535, 538, 539, 542, 553, 557, 562, 563, 564, 565, 566, 567, 571, 579, 580, 587, 590, 591, 594, 625, 630, 631, 632, 636, 637, 640, 673, 676, 679, 680, 685, 686, 692, 694, 695, 697, 698, 700, 743, 745, 758, 759, 762, 769, 772, 774, 775, 778, 788, 791, 792, 795, 800, 803, 813, 822, 825, 856, 857, 860, 861, 862, 873, 874, 875, 876, 877, 878, 879, 880, 884, 898, 899, 902, 903, 906, 931, 932, 935], "1": [0, 5, 11, 14, 15, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 113, 115, 117, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 167, 171, 172, 173, 174, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 237, 241, 242, 245, 248, 249, 250, 251, 252, 259, 276, 279, 282, 283, 287, 292, 293, 295, 297, 301, 305, 307, 310, 311, 318, 323, 324, 325, 326, 327, 329, 332, 333, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 355, 358, 363, 366, 367, 370, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 421, 422, 423, 428, 431, 432, 435, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 492, 493, 499, 502, 503, 506, 511, 514, 519, 522, 523, 526, 527, 530, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 570, 571, 579, 580, 587, 590, 591, 592, 593, 594, 595, 609, 615, 618, 619, 624, 625, 627, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 707, 709, 718, 720, 724, 726, 734, 736, 737, 739, 743, 745, 746, 748, 749, 750, 751, 752, 754, 758, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 821, 822, 825, 838, 850, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 903, 906, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "type": [0, 5, 11, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 275, 276, 289, 290, 291, 292, 293, 295, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 571, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 604, 605, 606, 608, 609, 610, 611, 615, 618, 619, 620, 621, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972], "ndarrai": [0, 5, 113, 121, 123, 124, 125, 130, 171, 175, 178, 211, 214, 562, 631], "Or": [0, 5, 131], "jaxlib": [0, 5, 17, 113, 123, 124, 130], "xla_extens": [0, 5, 113, 123, 124, 130], "devicearrai": [0, 5, 130], "try_import_ivy_jax": 0, "warn": [0, 6, 7, 8, 9, 10], "fals": [0, 6, 7, 8, 9, 10, 23, 24, 25, 26, 27, 36, 37, 44, 45, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 122, 125, 126, 131, 132, 133, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 242, 245, 248, 250, 251, 252, 257, 276, 292, 293, 304, 308, 309, 312, 317, 320, 322, 323, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 355, 357, 359, 361, 363, 365, 366, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 483, 484, 486, 487, 488, 490, 494, 496, 498, 499, 501, 503, 505, 506, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 562, 563, 564, 565, 566, 567, 570, 571, 575, 576, 580, 583, 587, 589, 591, 593, 595, 599, 606, 608, 609, 611, 612, 624, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 672, 686, 687, 688, 689, 690, 691, 710, 712, 714, 715, 716, 737, 739, 752, 753, 754, 759, 761, 763, 764, 766, 768, 769, 771, 773, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 813, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 851, 857, 859, 861, 862, 867, 868, 870, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 953, 954, 973, 974, 977, 978, 979, 980, 981, 982], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 119], "unset": [0, 11, 119, 128, 130], "adjust": [0, 11, 898, 919, 922, 927, 930], "dict": [0, 11, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 122, 126, 131, 132, 276, 283, 284, 292, 295, 298, 299, 300, 301, 562, 568, 584, 585, 586, 838, 840, 841, 844, 847, 850, 851], "previous": [0, 11, 17, 20, 117, 118, 128, 562, 573], "otherwis": [0, 11, 23, 24, 25, 26, 27, 68, 69, 113, 117, 121, 123, 124, 128, 130, 171, 172, 173, 242, 245, 248, 251, 254, 255, 256, 276, 292, 323, 436, 439, 440, 443, 444, 447, 562, 572, 633, 636, 651, 653, 668, 686, 687, 690, 695, 697, 749, 751, 752, 754, 834, 835, 836, 838, 851, 873, 874, 875, 877, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "implement": [0, 11, 19, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 242, 245, 267, 276, 318, 323, 324, 327, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 355, 358, 391, 394, 395, 398, 412, 415, 416, 419, 456, 459, 460, 463, 464, 467, 468, 471, 494, 497, 511, 514, 515, 518, 527, 530, 531, 534, 548, 552, 553, 557, 686, 701, 703, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 942], "wa": [0, 11, 14, 68, 69, 115, 128, 130, 562, 633, 838, 851, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "last": [0, 11, 15, 18, 68, 69, 115, 117, 119, 126, 145, 156, 161, 276, 292, 636, 672, 673, 683, 686, 692, 694, 698, 700, 714, 716, 746, 748, 749, 751, 758, 764, 767, 769, 772, 774, 792, 795, 808, 811, 813, 818, 821, 887, 888, 891, 893, 896, 931, 932, 935, 937, 940, 961, 971], "henc": [0, 11, 117, 878, 879, 880, 884, 886], "here": [0, 11, 17, 18, 19, 112, 113, 115, 117, 122, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [0, 11, 13, 68, 69, 112, 113, 118, 119, 121, 123, 124, 125, 128, 130, 131, 132, 133, 145, 171, 200, 201, 203, 204, 242, 257, 323, 363, 366, 492, 493, 562, 615, 618, 619, 673, 681, 683, 686, 743, 745, 774, 788, 791, 804, 807, 813, 861, 862, 873, 876, 942, 961, 969, 971], "howev": [0, 11, 14, 17, 19, 113, 114, 117, 118, 119, 121, 122, 123, 124, 125, 130, 131, 132, 133, 145], "befor": [0, 11, 17, 18, 19, 68, 69, 114, 117, 121, 123, 124, 125, 128, 131, 145, 276, 317, 323, 558, 561, 673, 684, 685, 834, 835, 836, 838, 850, 878, 879, 880, 884, 886, 898, 915, 918, 923, 926], "becom": [0, 11, 13, 15, 18, 115, 122, 128, 133, 145, 774, 775, 778], "swap": [0, 11, 774, 822, 825], "python": [0, 11, 12, 13, 14, 17, 18, 20, 117, 126, 128, 130, 131, 145, 171, 172, 173, 276, 312, 322, 323, 515, 518, 942, 948], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 23, 24, 25, 26, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 68, 69, 71, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 111, 113, 116, 118, 119, 120, 121, 124, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 946, 947, 948, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987], "op": [0, 11, 112, 128, 145], "eagertensor": [0, 11], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 24, 25, 26, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 68, 69, 71, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 946, 947, 948, 951, 952, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987], "backend": [3, 4, 5, 11, 13, 18, 19, 23, 25, 27, 68, 69, 111, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 129, 130, 133, 242, 260, 261, 263, 275, 276, 308, 310, 320, 562, 603, 606, 607, 613, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 671, 942, 948, 953, 954, 977, 978, 979, 980, 981, 982], "ml": [12, 14, 15, 16, 127, 128, 129, 131, 132, 133, 144, 942, 948], "explos": [12, 14, 942], "A": [12, 13, 14, 15, 20, 68, 69, 70, 71, 72, 111, 117, 118, 122, 123, 124, 128, 131, 145, 171, 186, 187, 211, 214, 276, 283, 284, 317, 323, 507, 510, 562, 598, 630, 686, 724, 726, 733, 734, 736, 737, 739, 774, 813, 818, 821, 838, 839, 841, 843, 845, 846, 847, 848, 849, 852, 853, 854, 855, 898, 899, 902, 931, 932, 935, 937, 940, 942, 983, 984], "huge": [12, 14, 131, 942], "number": [12, 13, 17, 68, 69, 70, 71, 72, 115, 117, 122, 124, 125, 128, 131, 133, 168, 169, 170, 171, 172, 173, 175, 178, 186, 187, 200, 201, 203, 204, 206, 209, 211, 214, 242, 246, 258, 259, 262, 264, 265, 267, 276, 309, 310, 311, 323, 337, 340, 355, 358, 387, 390, 420, 423, 424, 427, 492, 493, 494, 497, 511, 514, 515, 518, 519, 522, 523, 526, 558, 561, 562, 563, 566, 589, 598, 599, 614, 632, 635, 673, 684, 686, 698, 700, 701, 703, 718, 720, 733, 737, 739, 749, 751, 774, 775, 778, 784, 787, 796, 799, 800, 803, 808, 811, 813, 818, 821, 826, 829, 830, 833, 834, 835, 836, 837, 861, 862, 871, 873, 876, 878, 879, 880, 884, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972], "tool": [12, 15, 18, 129, 133, 144, 145, 942], "have": [12, 13, 14, 15, 17, 18, 19, 20, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 246, 247, 259, 276, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 584, 585, 586, 588, 591, 594, 602, 615, 618, 619, 636, 651, 653, 668, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942], "explod": [12, 13, 942], "onto": [12, 13, 276, 302, 303, 838, 844, 850, 942], "scene": [12, 13, 111, 127, 129, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 942], "b": [12, 15, 16, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 242, 248, 250, 251, 252, 276, 295, 323, 324, 326, 327, 328, 337, 339, 340, 341, 342, 345, 346, 348, 349, 350, 363, 366, 383, 386, 387, 389, 390, 395, 398, 420, 422, 423, 432, 435, 452, 455, 492, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 551, 552, 553, 554, 556, 557, 562, 563, 565, 566, 567, 570, 571, 579, 580, 587, 590, 591, 593, 594, 595, 632, 636, 637, 639, 640, 641, 673, 676, 679, 680, 685, 686, 687, 689, 690, 691, 692, 694, 695, 697, 698, 700, 724, 726, 734, 736, 743, 745, 755, 757, 758, 759, 762, 774, 775, 777, 778, 779, 788, 791, 792, 795, 800, 803, 808, 810, 811, 812, 818, 821, 822, 825, 856, 857, 860, 861, 863, 865, 866, 867, 869, 873, 875, 876, 877, 878, 880, 881, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935, 942, 948], "why": [12, 14, 18, 113, 122, 125, 130, 942], "unifi": [12, 14, 68, 69, 121, 128, 145, 276, 302, 303, 304, 305, 317, 942], "should": [12, 14, 17, 18, 19, 20, 68, 69, 70, 71, 72, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 168, 169, 171, 206, 209, 224, 228, 229, 233, 242, 247, 276, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 412, 415, 416, 419, 420, 423, 436, 439, 440, 443, 444, 447, 448, 451, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 515, 518, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 573, 606, 615, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 707, 709, 710, 713, 718, 720, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 743, 745, 746, 748, 749, 751, 752, 754, 774, 804, 807, 861, 872, 873, 874, 875, 878, 879, 880, 884, 886, 898, 899, 902, 903, 906, 907, 910, 915, 918, 919, 922, 923, 926, 927, 930, 942], "them": [12, 13, 14, 15, 117, 119, 121, 122, 128, 130, 131, 132, 145, 942], "c": [12, 14, 15, 16, 17, 97, 98, 111, 115, 118, 122, 127, 128, 129, 131, 145, 323, 503, 506, 562, 570, 571, 579, 632, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 679, 774, 818, 821, 863, 865, 873, 876, 898, 899, 902, 919, 922, 927, 930, 942, 948], "standard": [12, 111, 112, 113, 114, 116, 117, 121, 125, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 259, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 452, 455, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 686, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 861, 866, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 919, 922, 927, 930, 931, 932, 935, 942, 948, 975, 976], "re": [12, 13, 14, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 133, 145, 276, 317, 562, 584, 686, 743, 745, 774, 808, 811, 873, 877, 942], "collabor": [12, 13, 14, 942], "consortium": [12, 14, 942, 948], "data": [12, 14, 68, 69, 70, 71, 72, 111, 112, 113, 114, 118, 120, 122, 124, 125, 130, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 243, 244, 245, 247, 248, 251, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 289, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 494, 497, 503, 506, 511, 514, 515, 518, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 570, 571, 608, 609, 611, 628, 636, 651, 653, 671, 673, 682, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 743, 745, 746, 748, 749, 751, 752, 754, 774, 788, 791, 792, 795, 796, 799, 804, 807, 808, 811, 814, 817, 818, 821, 861, 872, 873, 874, 875, 876, 887, 888, 891, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 948, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972], "api": [12, 13, 17, 18, 111, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 127, 129, 131, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 452, 455, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 686, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935, 942, 948], "open": [13, 14, 15, 16, 17, 20, 114, 144, 171, 172, 173, 861, 863, 864, 867, 869, 942], "project": [13, 14, 15, 17, 18, 20, 112, 117, 119, 130, 132, 144, 145, 861, 862, 866], "grown": 13, "consider": [13, 113, 115], "recent": [13, 14, 17, 18, 117], "year": [13, 15, 145, 942], "especi": [13, 17], "deep": [13, 16, 18, 19, 68, 69, 127, 131, 942], "learn": [13, 14, 17, 19, 111, 118, 127, 133, 144, 323, 428, 431, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 834, 835, 836, 837, 942, 977, 978, 979, 980, 981, 982], "can": [13, 14, 15, 16, 17, 18, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 171, 175, 178, 211, 214, 242, 248, 251, 276, 315, 316, 317, 686, 707, 709, 774, 804, 807, 861, 863, 864, 942, 948], "seen": [13, 14, 115, 117, 130, 131], "rapidli": 13, "increas": [13, 276, 297, 301, 305, 774, 784, 787, 830, 833, 838, 850], "github": [13, 18, 19, 114, 117], "repo": [13, 14, 15, 17, 18, 116, 128, 130, 131, 132, 133, 144, 942, 948], "contain": [13, 17, 18, 19, 20, 23, 26, 27, 36, 37, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 123, 125, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 165, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 276, 294, 295, 298, 307, 311, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 564, 566, 568, 571, 574, 575, 577, 579, 580, 587, 590, 591, 594, 601, 610, 630, 631, 632, 636, 637, 640, 642, 647, 651, 655, 659, 663, 673, 676, 679, 680, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 784, 788, 791, 792, 795, 796, 799, 800, 803, 804, 808, 811, 813, 814, 818, 822, 825, 826, 830, 834, 835, 836, 837, 838, 851, 856, 857, 860, 861, 862, 863, 866, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 888, 891, 893, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 977, 981, 983, 984], "term": [13, 18, 122, 673, 683, 961, 971], "time": [13, 14, 15, 17, 18, 19, 113, 117, 118, 122, 123, 128, 131, 133, 145, 636, 642, 644, 655, 657, 673, 683, 774, 826, 829, 834, 835, 836, 837, 873, 874, 875, 878, 879, 880, 884, 961, 972, 973, 974], "These": [13, 14, 15, 18, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 131, 132, 133, 145, 686, 701, 703, 942, 948], "ar": [13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 171, 172, 173, 276, 283, 284, 307, 311, 313, 317, 323, 391, 394, 480, 483, 484, 487, 519, 522, 527, 530, 548, 552, 562, 563, 566, 570, 571, 572, 596, 602, 603, 607, 614, 616, 628, 636, 672, 673, 682, 686, 692, 694, 710, 713, 714, 716, 718, 720, 727, 729, 737, 739, 740, 742, 749, 751, 774, 775, 778, 792, 795, 808, 811, 838, 840, 844, 850, 861, 866, 867, 869, 873, 874, 875, 876, 878, 879, 942, 983, 984], "written": [13, 17, 112, 113, 114, 117, 121, 125, 128, 130, 133, 145], "mani": [13, 14, 15, 17, 18, 19, 68, 69, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 774, 813], "differ": [13, 14, 15, 17, 18, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 242, 259, 276, 294, 295, 298, 299, 323, 337, 340, 494, 497, 543, 547, 673, 682, 774, 818, 821, 898, 915, 918, 923, 926, 942], "while": [13, 14, 17, 18, 68, 69, 70, 71, 72, 115, 117, 119, 125, 126, 132, 133, 145, 323, 480, 483, 484, 487, 878, 879, 898, 907, 910], "thi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 162, 163, 164, 166, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 214, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 248, 249, 250, 251, 252, 276, 297, 301, 305, 312, 317, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 363, 366, 379, 382, 383, 386, 387, 388, 389, 390, 395, 398, 416, 419, 420, 421, 422, 423, 452, 455, 480, 483, 484, 487, 492, 503, 506, 515, 518, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 567, 589, 590, 591, 592, 593, 595, 606, 617, 622, 636, 637, 638, 639, 641, 642, 644, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 671, 672, 673, 676, 682, 685, 686, 687, 688, 689, 690, 691, 695, 697, 698, 700, 714, 716, 733, 774, 775, 776, 777, 779, 788, 791, 792, 795, 804, 807, 808, 809, 810, 811, 812, 818, 821, 838, 844, 850, 851, 856, 857, 860, 863, 865, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 891, 898, 903, 906, 907, 910, 919, 922, 927, 930, 931, 932, 935, 942, 948, 973, 974, 977, 978, 979, 980, 981, 982], "wonder": [13, 15, 130], "thing": [13, 14, 15, 17, 18, 19, 117, 119, 130, 131], "research": [13, 144], "develop": [13, 14, 15, 16, 17, 18, 19, 144, 145, 942], "also": [13, 14, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 162, 163, 164, 166, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 248, 249, 250, 251, 252, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 363, 366, 383, 386, 387, 388, 389, 390, 395, 398, 420, 421, 422, 423, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 567, 590, 591, 592, 593, 595, 606, 636, 637, 638, 639, 641, 642, 644, 673, 676, 682, 685, 686, 687, 688, 689, 690, 691, 695, 697, 698, 700, 774, 775, 776, 777, 779, 788, 791, 792, 795, 808, 809, 810, 811, 812, 834, 835, 836, 837, 838, 839, 840, 848, 849, 850, 856, 857, 860, 863, 865, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935, 961, 971], "consid": [13, 14, 68, 69, 112, 118, 129, 130, 131, 323, 480, 483, 484, 487, 878, 879, 880, 884, 886], "speed": [13, 117], "evolv": 13, "sharabl": 13, "code": [13, 14, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 83, 84, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 165, 167, 276, 295, 318, 323, 383, 386, 539, 542, 636, 637, 639, 640, 641, 672, 673, 679, 680, 878, 879, 880, 884, 887, 888, 891, 898, 899, 902, 942, 948], "significantli": 13, "hinder": [13, 113], "librari": [13, 14, 15, 128, 133, 143, 145, 276, 318, 323, 416, 419, 480, 483, 484, 487, 686, 701, 703, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 942], "outdat": 13, "month": 13, "rigor": [13, 117], "maintain": [13, 18, 887, 888, 891, 893, 896], "against": [13, 68, 69, 117, 145, 242, 246, 686, 710, 713, 714, 716, 718, 720, 727, 729, 873, 874], "newest": 13, "version": [13, 14, 15, 17, 114, 128, 130, 686, 701, 703, 942], "For": [13, 14, 15, 17, 18, 19, 20, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 171, 172, 173, 206, 209, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 636, 651, 653, 671, 686, 737, 739, 746, 748, 774, 775, 778, 818, 821, 878, 879, 880, 884, 886, 898, 903, 906, 911, 914, 923, 926, 953, 954], "softwar": [13, 14, 17, 18], "pipelin": [13, 121, 133], "where": [13, 14, 15, 16, 17, 18, 19, 20, 68, 69, 70, 71, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 145, 171, 194, 195, 198, 206, 209, 323, 355, 358, 412, 415, 464, 467, 494, 497, 511, 514, 562, 602, 606, 615, 636, 672, 686, 701, 703, 718, 720, 727, 729, 730, 732, 737, 739, 740, 742, 746, 748, 749, 751, 774, 775, 778, 784, 787, 788, 791, 796, 799, 818, 821, 830, 833, 838, 839, 849, 861, 862, 873, 876, 898, 919, 922, 927, 930, 931, 932, 935, 937, 940, 942], "rapid": [13, 14, 17], "prototyp": 13, "vital": [13, 133], "signific": [13, 14, 145], "bottleneck": 13, "As": [13, 18, 64, 65, 109, 110, 113, 117, 118, 121, 122, 123, 124, 125, 128, 130, 131, 132, 145, 878, 879, 880, 884, 886], "new": [13, 14, 15, 16, 17, 18, 19, 20, 68, 69, 111, 112, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 171, 180, 189, 192, 194, 195, 198, 216, 217, 219, 222, 234, 236, 237, 241, 242, 271, 323, 359, 362, 464, 467, 507, 510, 562, 584, 585, 586, 589, 590, 591, 594, 618, 619, 620, 621, 626, 627, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 774, 788, 791, 804, 807, 818, 821, 838, 843, 854, 855, 856, 857, 860, 942, 953, 954, 961, 971, 975, 976, 977, 978, 979, 980, 981, 982], "futur": [13, 15, 17, 18, 130, 145, 686, 701, 703], "avail": [13, 17, 18, 68, 69, 114, 124, 145, 276, 292, 308, 309, 310, 320, 562, 585], "specif": [13, 19, 68, 69, 113, 117, 118, 121, 122, 123, 124, 125, 128, 129, 130, 132, 133, 144, 145, 242, 267, 276, 315, 318, 323, 480, 483, 484, 487, 562, 584, 585, 586, 613, 686, 701, 703, 743, 745, 774, 818, 821, 834, 835, 836, 837, 861, 862, 898, 903, 906, 907, 910, 911, 914, 942, 945, 947, 948, 973, 974], "quickli": [13, 15, 17, 18, 131, 132], "obsolet": [13, 15], "user": [13, 14, 17, 18, 20, 111, 117, 119, 122, 125, 127, 145, 961, 972, 973, 974], "constantli": 13, "invent": 13, "wheel": 13, "our": [13, 14, 16, 17, 18, 64, 65, 109, 110, 115, 117, 122, 126, 127, 130, 131, 132, 133, 145, 942], "desir": [13, 68, 69, 242, 245, 248, 251, 276, 318, 562, 602, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972], "provid": [13, 17, 18, 68, 69, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 132, 144, 145, 168, 169, 171, 206, 209, 242, 254, 255, 256, 263, 267, 275, 276, 292, 562, 583, 615, 619, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 686, 749, 751, 774, 792, 795, 818, 821, 873, 874, 898, 919, 922, 927, 930, 931, 932, 935, 937, 940, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 977, 978, 979, 980, 981, 982], "simultan": [13, 15], "all": [13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 62, 63, 64, 65, 68, 69, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 168, 169, 171, 172, 173, 224, 228, 229, 233, 276, 283, 307, 313, 562, 563, 566, 570, 571, 596, 616, 631, 673, 683, 686, 734, 736, 743, 745, 752, 754, 774, 792, 795, 808, 811, 834, 835, 836, 837, 838, 839, 840, 849, 850, 851, 861, 862, 867, 869, 931, 942, 945, 947], "modern": [13, 14], "simpl": [13, 17, 18, 112, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 562, 587], "scalabl": [13, 128], "manner": [13, 23, 26, 27, 68, 69, 112, 114, 117, 124, 131, 144, 145, 838, 850], "must": [13, 15, 17, 18, 19, 68, 69, 70, 71, 72, 112, 113, 114, 115, 118, 121, 122, 123, 124, 128, 132, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 246, 247, 276, 302, 303, 304, 305, 317, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 584, 585, 586, 588, 591, 594, 602, 615, 618, 619, 636, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 977, 981], "determin": [13, 68, 69, 114, 118, 122, 123, 124, 242, 248, 251, 253, 258, 263, 264, 265, 275, 276, 308, 309, 310, 320, 323, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 391, 394, 395, 398, 399, 402, 412, 415, 416, 419, 436, 439, 440, 443, 444, 447, 456, 459, 460, 463, 468, 471, 472, 475, 488, 491, 494, 497, 511, 514, 515, 518, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 562, 563, 566, 570, 571, 601, 603, 607, 608, 609, 610, 611, 628, 635, 636, 651, 653, 673, 684, 686, 687, 690, 692, 694, 695, 697, 698, 700, 707, 709, 710, 713, 718, 720, 724, 726, 727, 729, 733, 734, 736, 746, 748, 749, 751, 752, 754, 834, 835, 836, 837, 878, 879, 880, 884, 886, 931, 932, 935, 937, 940], "exactli": [13, 15, 115, 122, 124, 942, 948], "common": [13, 19, 68, 69, 115, 118, 120, 122, 124, 126, 145], "ground": [13, 117], "li": 13, "between": [13, 68, 69, 70, 71, 72, 113, 115, 117, 118, 121, 122, 127, 129, 130, 131, 133, 144, 171, 172, 173, 242, 259, 323, 355, 358, 511, 514, 758, 759, 762, 764, 767, 769, 772, 774, 788, 791, 818, 821, 838, 844, 861, 863, 864, 878, 879, 880, 884, 886, 942, 977, 979], "find": [13, 17, 18, 68, 69, 117, 128, 131, 878, 879, 880, 884, 886, 942], "exist": [13, 14, 17, 19, 20, 68, 69, 70, 71, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 562, 583, 977, 981], "essenti": [13, 14, 19, 115, 118, 124], "order": [13, 17, 18, 20, 68, 69, 70, 71, 72, 113, 114, 115, 119, 121, 122, 123, 124, 130, 131, 133, 145, 323, 355, 358, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 686, 701, 703, 714, 716, 737, 739, 740, 742, 752, 754, 774, 792, 795, 834, 835, 836, 873, 876, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 983, 984], "design": [13, 14, 111, 125, 128, 130, 145], "univers": 13, "abstract": [13, 122, 132, 145, 276, 288, 977, 981], "In": [13, 15, 17, 18, 112, 113, 114, 115, 117, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 276, 312, 318, 319, 322, 323, 337, 340, 494, 497, 515, 518, 562, 568, 606, 774, 804, 807, 861, 867, 869, 942], "search": [13, 17, 23, 26, 27, 55, 68, 69, 100, 112, 115, 117, 874, 875, 876, 877], "languag": [13, 15, 128], "first": [13, 14, 17, 18, 20, 113, 115, 117, 118, 121, 122, 128, 130, 131, 133, 168, 169, 171, 200, 201, 203, 204, 242, 266, 271, 276, 292, 304, 323, 337, 340, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 404, 407, 424, 427, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 543, 547, 562, 570, 636, 646, 686, 692, 694, 698, 700, 701, 703, 710, 713, 724, 726, 730, 732, 737, 739, 743, 745, 749, 751, 774, 780, 783, 808, 811, 818, 821, 822, 825, 834, 835, 836, 837, 838, 839, 848, 849, 861, 872, 873, 874, 875, 878, 879, 880, 884, 961, 972, 973, 974, 977, 981], "see": [13, 16, 17, 18, 19, 113, 116, 118, 122, 124, 130, 131, 144, 145, 171, 172, 173, 189, 192, 200, 201, 203, 204, 242, 247, 267, 323, 337, 340, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 416, 419, 448, 451, 472, 475, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 515, 518, 543, 547, 686, 718, 720, 727, 729, 734, 736, 749, 751, 752, 754, 873, 875, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942], "clear": [13, 14, 15, 18, 19, 115, 123, 124, 128, 130, 276, 291], "front": [13, 127, 128, 131, 942, 948], "runner": 13, "look": [13, 17, 18, 20, 112, 113, 115, 117, 118, 119, 122, 123, 124, 128, 130, 132, 133, 942], "littl": [13, 130], "deeper": [13, 18, 111, 127, 276, 297, 301, 305, 838, 849, 850], "follow": [13, 14, 17, 18, 19, 20, 68, 69, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 242, 262, 276, 317, 323, 515, 518, 562, 604, 605, 606, 626, 627, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 684, 685, 686, 730, 732, 752, 754, 838, 844, 850, 878, 879, 880, 884, 886, 942, 961, 971, 977, 981], "same": [13, 15, 17, 18, 20, 23, 24, 25, 68, 69, 112, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 171, 172, 173, 181, 184, 195, 198, 206, 209, 219, 222, 224, 228, 229, 233, 237, 241, 242, 245, 246, 247, 276, 283, 284, 317, 323, 324, 327, 337, 340, 367, 370, 387, 390, 420, 423, 494, 497, 515, 518, 519, 522, 523, 526, 558, 561, 562, 588, 590, 591, 594, 615, 618, 619, 636, 651, 653, 668, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 721, 723, 727, 729, 730, 732, 734, 736, 737, 739, 746, 748, 749, 751, 774, 780, 783, 792, 795, 796, 799, 808, 811, 814, 817, 818, 821, 834, 835, 836, 838, 851, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 923, 926, 927, 930, 942, 961, 962, 963, 964, 965, 966, 967, 968], "core": [13, 17, 19, 124, 128, 133, 276, 309, 942], "principl": 13, "oper": [13, 17, 19, 68, 69, 70, 71, 114, 115, 117, 118, 121, 122, 124, 125, 131, 132, 171, 200, 201, 203, 204, 242, 267, 323, 337, 340, 379, 382, 383, 386, 432, 435, 499, 502, 503, 506, 515, 518, 539, 542, 562, 572, 584, 585, 586, 628, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 674, 675, 676, 677, 678, 679, 680, 682], "expos": [13, 128, 132, 562, 578], "almost": [13, 18, 122, 129, 131], "ident": [13, 15, 68, 69, 118, 120, 122, 130, 131, 145, 276, 307, 838, 851, 942], "uniqu": [13, 117, 118, 122, 145, 276, 283, 284, 834, 835, 836, 837, 838, 844, 878, 879, 880, 884, 885, 886], "syntax": [13, 14, 126], "There": [13, 17, 18, 115, 118, 121, 122, 123, 126, 128, 131, 145], "onli": [13, 16, 17, 18, 68, 69, 112, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 143, 145, 276, 313, 323, 480, 483, 484, 487, 686, 710, 713, 730, 732, 774, 792, 795, 838, 839, 840, 848, 849, 873, 874, 875, 898, 907, 910, 942, 977, 978, 979, 980, 981, 982], "so": [13, 14, 17, 18, 21, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 112, 113, 114, 115, 117, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 567, 591, 592, 593, 595, 637, 638, 639, 641, 687, 688, 689, 691, 775, 776, 777, 779, 808, 809, 810, 812, 838, 839, 849, 863, 865, 880, 881, 882, 883, 942], "wai": [13, 14, 17, 117, 119, 125, 130, 131, 132, 133, 145], "manipul": [13, 49, 94, 112, 133, 144, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833], "unsurprisingli": [13, 115], "fundament": [13, 122, 128], "consist": [13, 68, 69, 121, 125, 276, 305, 686, 701, 703, 898, 899, 902, 973, 974], "each": [13, 14, 15, 18, 19, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 165, 171, 206, 209, 242, 246, 276, 283, 284, 294, 295, 296, 297, 298, 299, 300, 304, 317, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 566, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 690, 692, 694, 695, 697, 701, 703, 710, 713, 718, 720, 721, 723, 727, 729, 734, 736, 737, 739, 774, 784, 787, 800, 803, 808, 811, 813, 818, 821, 826, 829, 830, 833, 838, 844, 851, 861, 862, 873, 876, 878, 879, 880, 884, 898, 899, 902, 942, 948, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "veri": [13, 14, 17, 18, 112, 113, 115, 117, 118, 122, 124, 125, 129, 131, 132, 133, 145, 942], "similar": [13, 112, 117, 122, 123, 124, 131, 145, 323, 515, 518, 673, 684, 961, 972], "convent": [13, 144, 686, 710, 713, 898, 899, 902], "those": [13, 17, 18, 19, 68, 69, 117, 122, 128, 133, 171, 172, 173, 636, 671, 686, 730, 732, 737, 739, 774, 775, 778], "introduc": [13, 122, 131, 774, 808, 811, 878, 879], "2006": 13, "layer": [13, 43, 88, 112, 114, 128, 129, 132, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 856, 857, 860, 942, 955, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "therefor": [13, 18, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 387, 390, 420, 423, 492, 503, 506, 535, 538, 539, 542, 548, 552, 562, 590, 673, 676, 685, 686, 687, 690, 698, 700, 774, 808, 811, 856, 857, 860, 878, 880, 884, 898, 903, 906, 931, 932, 935], "present": [13, 18, 68, 69, 113, 116, 122, 123, 124, 125, 128], "itself": [13, 17, 18, 113, 122, 125, 132, 144, 145, 562, 568, 838, 850], "cut": 13, "cloth": 13, "adher": [13, 14, 114, 116, 128, 133], "semant": [13, 128, 133, 323, 515, 518], "round": [13, 14, 15, 17, 18, 19, 20, 34, 35, 79, 80, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 323, 337, 340, 387, 390, 420, 423, 424, 427, 494, 497, 535, 538, 558, 561, 942], "up": [13, 14, 15, 16, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [13, 14, 15, 17, 18, 19, 20, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144], "paint": [13, 128], "pictur": [13, 128], "how": [13, 15, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 144, 145, 942, 948, 961, 972, 973, 974], "pleas": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 942], "check": [13, 14, 15, 17, 18, 23, 24, 25, 26, 27, 68, 69, 117, 122, 127, 128, 130, 131, 132, 133, 144, 242, 253, 260, 261, 263, 275, 276, 312, 322, 562, 572, 587, 601, 608, 609, 610, 611, 628, 635, 636, 651, 653, 686, 701, 703, 838, 839, 848, 849, 850, 942], "out": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 79, 80, 81, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 247, 276, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 574, 575, 576, 577, 579, 580, 581, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 602, 615, 618, 619, 636, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 961, 969], "discuss": [13, 14, 15, 16, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 942], "faq": [13, 14, 15, 128, 130, 131, 132, 133, 144], "reach": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 276, 297, 301, 305, 838, 850], "discord": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 942], "you": [13, 14, 15, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 144, 145, 942, 948], "question": [13, 14, 15, 17, 18, 115, 117, 128, 130, 131, 132, 133, 144, 145, 942], "With": [14, 15, 17, 36, 37, 38, 39, 56, 57, 68, 69, 70, 71, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 101, 102, 115, 117, 128, 156, 158, 159, 160, 161, 162, 165, 167, 171, 206, 209, 242, 248, 251, 276, 295, 311, 323, 324, 327, 328, 337, 340, 341, 342, 345, 346, 349, 350, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 432, 435, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 552, 553, 554, 557, 562, 563, 564, 565, 566, 567, 571, 579, 580, 587, 590, 591, 594, 595, 625, 630, 631, 632, 636, 637, 638, 640, 673, 676, 679, 680, 685, 686, 687, 690, 691, 692, 694, 695, 697, 698, 700, 714, 716, 743, 745, 758, 759, 762, 769, 772, 774, 775, 778, 779, 788, 791, 792, 795, 800, 803, 808, 811, 812, 813, 822, 825, 856, 857, 860, 861, 862, 863, 865, 866, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935], "central": 14, "goal": [14, 19], "being": [14, 15, 17, 18, 68, 69, 113, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 171, 172, 173, 562, 617, 622, 878, 885, 942], "would": [14, 17, 18, 20, 111, 113, 114, 115, 117, 119, 120, 121, 122, 125, 127, 128, 130, 132, 133, 145, 156, 161, 276, 318, 942], "entir": [14, 15, 18, 68, 69, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 276, 317, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 961, 970], "forgiven": 14, "rais": [14, 18, 68, 69, 125, 126, 128, 130, 242, 247, 323, 412, 415, 511, 514, 562, 572, 597, 606, 620, 627, 633, 636, 672, 686, 710, 713, 717, 749, 751, 774, 814, 817, 818, 821, 873, 876, 898, 903, 906, 911, 914, 931, 932, 935, 937, 940, 973, 974, 977, 981], "an": [14, 15, 17, 18, 19, 20, 23, 26, 27, 64, 65, 68, 69, 109, 110, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 165, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 246, 247, 248, 251, 259, 264, 265, 267, 276, 295, 299, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 573, 574, 575, 577, 579, 588, 589, 590, 602, 606, 608, 609, 610, 611, 631, 632, 633, 636, 651, 653, 668, 670, 671, 672, 673, 676, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 717, 718, 720, 721, 723, 727, 729, 730, 732, 733, 734, 736, 737, 739, 746, 748, 749, 751, 752, 754, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 838, 844, 856, 857, 860, 861, 863, 864, 872, 873, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 953, 954, 973, 974, 977, 978, 979, 981], "eyebrow": 14, "somehow": 14, "pytorch": [14, 15, 19, 113, 118, 123, 124, 125, 128, 130, 133, 145, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 942, 977, 978, 979, 980, 981, 982], "other": [14, 17, 18, 68, 69, 70, 71, 112, 114, 115, 117, 118, 121, 122, 125, 126, 128, 130, 132, 133, 143, 144, 145, 168, 169, 171, 172, 173, 323, 416, 419, 562, 563, 566, 568, 636, 646, 861, 867, 869, 878, 885, 898, 919, 922, 927, 930, 942], "strong": [14, 145], "industri": 14, "back": [14, 121, 127, 128, 130, 145, 942, 948, 973, 974, 977, 981], "momentum": 14, "won": [14, 15, 18, 133], "ad": [14, 17, 18, 19, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 128, 132, 145, 562, 626, 627, 686, 701, 703, 774, 788, 791, 983, 984], "just": [14, 15, 17, 18, 114, 115, 117, 118, 125, 128, 130, 131, 145, 898, 899, 902, 961, 970], "make": [14, 15, 17, 18, 19, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 276], "problem": [14, 18, 121, 130], "even": [14, 15, 17, 18, 113, 114, 118, 123, 124, 130, 131, 132, 133, 145, 323, 511, 514, 519, 522], "wors": 14, "rather": [14, 68, 69, 112, 114, 117, 122, 133, 145, 171, 172, 173, 276, 317, 562, 608, 609, 611, 636, 651, 653], "funni": 14, "comic": 14, "strip": 14, "easi": [14, 17, 18, 118, 122], "feasibl": 14, "space": [14, 171, 172, 173, 200, 201, 203, 204, 562, 589, 636, 672], "case": [14, 17, 18, 19, 23, 26, 27, 68, 69, 70, 71, 72, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 171, 206, 209, 276, 312, 319, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 383, 386, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 562, 606, 618, 619, 686, 714, 716, 774, 804, 807, 838, 841, 847, 898, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930, 961, 972, 973, 974, 977, 981], "unlik": [14, 115, 122, 276], "charger": 14, "charact": [14, 126], "encod": [14, 131, 562, 589], "instant": [14, 942], "messag": [14, 18, 126, 128, 130, 986, 987], "much": [14, 18, 112, 121, 122, 125, 128, 130, 131], "doe": [14, 18, 20, 68, 69, 111, 112, 113, 114, 115, 117, 118, 119, 123, 125, 128, 130, 131, 145, 323, 383, 386, 562, 606, 774, 813], "mandat": [14, 117, 125], "adopt": [14, 18, 121], "continu": [14, 15, 116, 117, 126, 145], "own": [14, 15, 17, 114, 117, 126, 128, 145], "signatur": [14, 112, 113, 114, 115, 117, 122, 123, 124, 125, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 686, 698, 700, 774, 788, 791, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906], "replac": [14, 18, 20, 68, 69, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 562, 618, 619, 774, 775, 778, 861, 862], "your": [14, 15, 16, 17, 19, 20, 112, 114, 131, 132, 145, 942], "10": [14, 17, 20, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 117, 122, 128, 130, 131, 171, 194, 203, 204, 205, 276, 323, 363, 366, 367, 370, 395, 398, 432, 435, 452, 455, 460, 463, 535, 538, 562, 580, 590, 617, 622, 636, 655, 656, 657, 658, 673, 679, 686, 695, 697, 698, 700, 724, 726, 743, 745, 774, 792, 795, 800, 803, 813, 856, 857, 860, 861, 862, 863, 864, 865, 873, 876, 878, 879, 898, 899, 902, 903, 906, 977, 979], "100": [14, 15, 97, 98, 117, 131, 132, 133, 145, 323, 535, 538, 863, 865, 942], "despit": [14, 122, 124], "distinct": [14, 114, 122, 125, 127, 878, 879, 880, 884, 886, 942], "still": [14, 68, 69, 114, 117, 123, 130, 132, 145, 942], "believ": [14, 18], "share": [14, 68, 69, 115, 117, 118, 119, 122, 128, 242, 271], "bring": [14, 117, 128, 129], "benefit": [14, 15, 17, 18, 121, 122, 125, 130, 131, 145], "unrel": [14, 18], "what": [14, 15, 18, 111, 113, 114, 115, 117, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 942], "again": [14, 15, 18, 112, 115, 117, 122, 125, 131, 133, 145], "contrari": 14, "bumpi": 14, "road": 14, "allud": [14, 131], "most": [14, 17, 18, 68, 69, 112, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 686, 701, 703], "technologi": 14, "sector": [14, 323, 333, 336, 346, 349, 359, 362], "full": [14, 15, 18, 70, 71, 113, 114, 117, 123, 128, 145, 171, 242, 259, 323, 432, 435, 452, 455, 673, 679, 686, 730, 732, 734, 736, 737, 739, 856, 857, 860], "success": 14, "reason": [14, 18, 112, 115, 118, 121, 122, 123, 125, 128, 130, 323, 515, 518], "build": [14, 16, 17, 118, 127, 129, 132, 133, 145, 878, 879, 880, 884, 886, 942, 961, 972, 973, 974], "custom": [14, 117, 132], "comput": [14, 15, 17, 68, 69, 117, 118, 122, 128, 131, 145, 276, 317, 323, 337, 340, 363, 366, 375, 378, 383, 386, 404, 407, 408, 411, 428, 431, 432, 435, 448, 451, 452, 455, 476, 479, 480, 483, 484, 487, 488, 491, 494, 497, 499, 502, 503, 506, 562, 574, 575, 577, 580, 581, 636, 637, 640, 642, 644, 646, 647, 649, 655, 657, 659, 661, 663, 665, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 686, 687, 690, 692, 694, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 730, 732, 733, 734, 736, 737, 739, 749, 751, 752, 754, 758, 759, 762, 764, 767, 769, 772, 838, 844, 878, 879, 880, 884, 886, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930], "thank": [14, 131], "interoper": 14, "compon": [14, 128, 636, 672], "bio": [14, 17], "hardwar": [14, 17], "initi": [14, 18, 68, 69, 70, 71, 72, 117, 119, 123, 124, 276, 673, 683, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 977, 981], "pcie": 14, "interfac": [14, 133, 145], "motherboard": 14, "raid": 14, "storag": [14, 131], "virtual": [14, 18, 20], "bluetooth": 14, "wireless": 14, "exchang": 14, "btx": 14, "form": [14, 16, 23, 24, 25, 26, 27, 68, 69, 117, 118, 132, 133, 171, 175, 178, 211, 214, 224, 228, 229, 233, 562, 568, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 718, 720, 721, 723, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748, 838, 840, 850], "factor": [14, 276, 283, 315, 316, 317, 636, 637, 640, 642, 644, 655, 657, 659, 661, 673, 674, 675, 676, 677, 678, 679, 680, 686, 687, 690, 961, 962, 963, 964, 965, 966, 967, 968, 977, 978, 979, 980], "sata": 14, "connect": [14, 17, 132, 133, 961, 971, 972], "host": [14, 145], "bu": 14, "adapt": [14, 636, 659, 661, 977, 980], "devic": [14, 18, 28, 29, 33, 68, 69, 73, 74, 78, 97, 98, 111, 112, 118, 120, 123, 130, 131, 145, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 562, 590, 591, 594, 615, 618, 619, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 953, 954, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "html": [14, 20, 114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 686, 698, 700, 774, 788, 791, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906], "enabl": [14, 17, 18, 68, 69, 70, 71, 72, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145, 636, 672], "anyon": [14, 16, 145], "websit": 14, "tcp": 14, "ip": 14, "node": [14, 68, 69, 122, 838, 839, 848, 849], "commun": [14, 16, 18, 19, 145, 942, 948], "network": [14, 118, 122, 128, 132, 144, 673, 682, 942, 950, 961, 973, 974], "smtp": 14, "possibl": [14, 16, 17, 18, 19, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 562, 612, 898, 903, 906, 911, 914], "send": 14, "gmail": 14, "outlook": 14, "pop": 14, "u": [14, 16, 17, 18, 117, 122, 125, 132, 145, 686, 687, 690, 737, 739, 942], "email": 14, "ieee": [14, 170, 242, 259, 323, 337, 340, 416, 419, 494, 497, 515, 518, 535, 538], "754": [14, 170, 242, 259, 323, 337, 340, 416, 419, 494, 497, 515, 518, 535, 538], "allow": [14, 117, 128, 145, 171, 200, 201, 203, 204, 562, 612, 973, 974], "calcul": [14, 68, 69, 70, 71, 72, 114, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 391, 394, 395, 398, 399, 402, 412, 415, 416, 419, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 494, 497, 511, 514, 527, 530, 531, 534, 535, 538, 543, 547, 548, 552, 553, 557, 758, 759, 762, 764, 767, 769, 772, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930], "live": [14, 15], "depend": [14, 17, 18, 114, 117, 120, 122, 123, 128, 145, 242, 245, 323, 324, 327, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 355, 358, 391, 394, 395, 398, 412, 415, 416, 419, 456, 459, 460, 463, 464, 467, 468, 471, 511, 514, 527, 530, 531, 534, 548, 552, 553, 557, 686, 701, 703, 730, 732, 734, 736, 737, 739, 873, 877, 887, 888, 891, 893, 896], "did": [14, 19, 133], "aris": [14, 145], "until": [14, 18, 126, 145, 942], "substanti": [14, 18, 117, 121], "innov": 14, "growth": 14, "usag": [14, 128, 276, 317], "relev": [14, 17, 19, 115, 122, 123, 131, 977, 978, 979, 980, 981, 982], "area": [14, 125, 143, 323, 333, 336, 346, 349, 359, 362, 942], "necess": 14, "parti": [14, 145], "could": [14, 15, 17, 18, 115, 117, 122, 123, 125, 128, 130, 131, 132, 878, 879, 880, 884, 886], "easili": [14, 18, 131, 132, 133, 145, 942], "engag": [14, 16, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "regard": [14, 122, 276], "effect": [14, 113, 114, 121, 122, 145, 171, 206, 209, 636, 663, 665, 898, 919, 922, 927, 930], "2015": 14, "sinc": [14, 17, 18, 117, 145], "alongsid": 14, "machin": [14, 17, 118, 144, 242, 259, 262, 323, 428, 431, 686, 718, 720, 727, 729], "given": [14, 15, 17, 18, 19, 20, 68, 69, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 171, 172, 173, 180, 200, 201, 203, 204, 276, 306, 312, 314, 315, 316, 317, 319, 322, 562, 580, 581, 591, 594, 618, 619, 634, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 674, 675, 676, 677, 678, 679, 680, 686, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 788, 791, 792, 795, 800, 803, 808, 811, 813, 826, 829, 838, 845, 846, 861, 863, 864, 866, 867, 869, 872, 887, 893, 896, 953, 954], "frame": [14, 144], "less": [14, 18, 34, 35, 68, 69, 79, 80, 113, 115, 122, 127, 128, 323, 329, 332, 333, 336, 342, 345, 355, 358, 387, 390, 456, 459, 460, 463, 468, 471, 511, 514, 515, 518, 523, 526, 535, 538, 686, 718, 720, 727, 729, 752, 754, 861, 867, 869, 898, 927, 930], "matur": [14, 145], "state": [14, 113, 114, 117, 127, 128, 129, 131, 144, 323, 494, 497, 673, 683, 942, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "than": [14, 18, 68, 69, 112, 115, 117, 122, 125, 128, 131, 132, 133, 145, 171, 172, 173, 242, 259, 276, 317, 323, 329, 332, 333, 336, 342, 345, 355, 358, 371, 374, 379, 382, 387, 390, 420, 423, 424, 427, 456, 459, 460, 463, 468, 471, 492, 511, 514, 515, 518, 523, 526, 535, 538, 558, 561, 562, 608, 609, 611, 636, 651, 653, 686, 692, 694, 710, 713, 718, 720, 727, 729, 752, 754, 774, 775, 778, 792, 795, 814, 817, 861, 867, 869, 878, 879, 880, 884, 886, 898, 915, 918, 919, 922, 923, 926, 927, 930], "preced": [14, 132], "mention": [14, 17, 18, 113, 115, 118, 125], "aros": 14, "70": [14, 686, 724, 726, 898, 899, 902], "80": [14, 686, 724, 726, 898, 899, 902], "90": [14, 97, 98, 323, 383, 386, 519, 522, 686, 724, 726, 863, 865, 898, 899, 902], "effort": [14, 16, 145], "stage": [14, 16, 18, 20, 111, 126, 942], "complet": [14, 18, 19, 68, 69, 121, 122, 130, 131, 686, 730, 732], "natur": [14, 115, 121, 122, 144, 323, 412, 415, 456, 459, 464, 467, 686, 733], "like": [14, 17, 18, 20, 111, 112, 113, 114, 115, 117, 124, 125, 127, 128, 130, 131, 132, 133, 144, 145, 636, 651, 653, 861, 867, 869, 942], "certainli": 14, "mission": [14, 942], "creat": [14, 16, 17, 18, 20, 68, 69, 117, 123, 124, 125, 128, 129, 132, 143, 144, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 211, 214, 216, 217, 219, 222, 234, 236, 237, 241, 276, 283, 284, 562, 590, 591, 594, 615, 618, 619, 630, 636, 670, 861, 862, 863, 864, 867, 869, 942, 948, 953, 954, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "At": [14, 19], "process": [14, 15, 16, 17, 18, 20, 117, 118, 122, 128, 133, 276, 283, 284, 312, 322], "ourselv": 14, "lead": [14, 15, 68, 69, 70, 71, 72, 145, 686, 730, 732, 737, 739], "quansight": 14, "compani": 14, "made": [14, 18, 19, 122, 125, 128, 130], "organ": [14, 112, 118, 121, 122], "panda": 14, "scipi": 14, "conda": [14, 17, 20], "dask": [14, 878, 879, 880, 884, 886], "apach": 14, "onnx": 14, "scikit": 14, "jupyt": 14, "aw": 14, "cupi": 14, "net": [14, 15, 128, 133], "sympi": 14, "rai": [14, 323, 355, 358], "modin": 14, "spyder": 14, "includ": [14, 18, 19, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 171, 172, 173, 175, 178, 211, 214, 562, 601, 635, 686, 752, 754, 838, 839, 861, 867, 869, 873, 875, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 945, 947, 961, 971, 972, 975, 976], "member": [14, 18], "googl": [14, 942], "octoml": 14, "einop": [14, 68, 69, 562, 584, 585, 586], "further": [14, 15, 18, 20, 115, 121, 127, 131, 132, 942], "sponsor": 14, "lg": 14, "electron": 14, "microsoft": 14, "d": [14, 15, 16, 17, 97, 98, 111, 122, 131, 562, 571, 579, 673, 674, 675, 676, 677, 678, 679, 680, 686, 698, 700, 724, 726, 863, 865, 942, 948], "shaw": 14, "co": [14, 34, 35, 79, 80, 128, 144, 323, 562, 589, 942], "intel": 14, "togeth": [14, 68, 69, 121, 122, 126, 132, 133, 145, 983, 984], "major": [14, 117, 123, 124, 145, 873, 876], "involv": [14, 16, 20, 111, 123, 133, 242, 267, 323, 337, 340, 494, 497, 942, 948], "anoth": [14, 17, 18, 68, 69, 117, 118, 122, 123, 130, 133, 171, 189, 192, 242, 246, 248, 251], "promis": 14, "sign": [14, 17, 34, 35, 79, 80, 129, 133, 171, 172, 173, 323, 324, 327, 337, 340, 355, 358, 379, 382, 494, 497, 515, 518, 686, 733, 878, 879, 880, 884, 886, 898, 915, 918, 923, 926], "pursuit": 14, "unif": [14, 16, 130, 942, 948], "clearli": [14, 19, 115, 117], "lot": [14, 15, 120, 130, 145], "thought": [14, 17, 18, 113], "care": [14, 18, 133], "attent": [14, 18, 121, 122, 673, 684, 685, 961, 972], "gone": [14, 127], "simplifi": [14, 128, 129, 130, 132], "compat": [14, 113, 145, 242, 247, 323, 337, 340, 355, 358, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 404, 407, 424, 427, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 515, 518, 543, 547, 686, 718, 720, 727, 729, 734, 736, 743, 745, 749, 751, 752, 754, 774, 804, 807, 873, 875, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942], "excit": [14, 16, 111, 942], "complianc": 14, "hope": [14, 145], "due": [14, 17, 122, 125, 323, 494, 497], "suit": [14, 17, 111, 116, 117, 131, 144], "some": [14, 15, 17, 18, 19, 68, 69, 112, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 323, 416, 419, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 671, 673, 681, 942, 961, 969], "motiv": [14, 130], "great": [14, 15, 117, 128, 130], "convinc": 14, "celebr": 14, "encourag": [14, 144, 145, 942, 948], "foundat": 14, "point": [15, 18, 113, 114, 115, 117, 121, 125, 128, 130, 131, 144, 170, 171, 172, 173, 180, 186, 187, 194, 216, 217, 234, 236, 242, 245, 259, 264, 267, 323, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 412, 415, 416, 419, 420, 423, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 686, 687, 690, 695, 697, 701, 703, 704, 706, 707, 709, 718, 720, 727, 729, 730, 732, 734, 736, 737, 739, 752, 754, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930], "mai": [15, 17, 18, 117, 122, 130, 132, 171, 172, 173, 189, 192, 276, 318, 323, 404, 407, 432, 435, 452, 455, 480, 483, 484, 487, 562, 583, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914], "ask": [15, 128, 130, 145, 942], "perfectli": 15, "happi": [15, 17, 145], "abund": 15, "better": [15, 111, 126, 127, 130, 131, 132], "ll": [15, 16, 18, 115, 122, 125, 131], "give": [15, 17, 18, 111, 113, 114, 115, 119, 130, 774, 804, 807], "two": [15, 70, 71, 114, 115, 117, 121, 122, 127, 131, 133, 171, 172, 173, 186, 187, 206, 209, 224, 228, 229, 233, 242, 266, 271, 323, 379, 382, 519, 522, 562, 570, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 746, 748, 749, 751, 774, 822, 825, 878, 879, 880, 884, 885, 886, 942], "streamlin": 15, "workflow": [15, 18, 131, 143, 942], "save": [15, 68, 69, 117, 126, 145, 562, 623, 973, 974], "week": [15, 18, 19, 942], "let": [15, 114, 115, 117, 122, 123, 124, 128, 130, 131, 132, 133, 898, 907, 910, 919, 922, 923, 926, 927, 930, 942], "sai": [15, 17, 120, 130], "deepmind": 15, "releas": [15, 17, 19, 942], "awesom": 15, "paper": 15, "love": 15, "choic": [15, 17, 125, 131, 898, 919, 922, 927, 930], "perceiverio": 15, "happen": [15, 17, 18, 117, 131], "slew": 15, "rush": 15, "f": [15, 20, 111, 117, 122, 126, 128, 131, 133, 323, 428, 431, 562, 603, 607], "g": [15, 111, 122, 145, 242, 244, 267, 276, 289, 861, 866, 867, 869, 878, 879, 880, 884, 886, 898, 903, 906, 911, 914, 915, 918, 923, 926], "inevit": 15, "deviat": [15, 117, 856, 857, 860, 861, 866, 898, 919, 922, 975, 976], "origin": [15, 68, 69, 70, 71, 72, 119, 120, 123, 128, 130, 323, 355, 358, 686, 714, 716, 774, 804, 807, 808, 811], "often": [15, 117, 118, 126, 145], "erron": 15, "train": [15, 118, 122, 124, 131, 132, 133, 143, 144, 145, 636, 637, 640, 642, 644, 655, 657, 942], "poor": 15, "converg": 15, "perform": [15, 68, 69, 112, 113, 115, 117, 118, 119, 121, 122, 124, 125, 128, 131, 145, 156, 161, 171, 200, 201, 203, 204, 276, 562, 580, 584, 585, 586, 604, 605, 606, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 681, 683, 686, 737, 739, 834, 835, 836, 837, 838, 845, 846, 931, 932, 935, 937, 940], "issu": [15, 16, 19, 117, 128, 130, 132, 145], "etc": [15, 17, 18, 19, 64, 65, 68, 69, 109, 110, 112, 113, 115, 117, 121, 122, 123, 128, 130, 131, 145, 171, 200, 201, 203, 204, 562, 590, 591, 594, 615, 618, 619, 861, 862, 863, 864, 867, 869, 878, 879, 880, 884, 886, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "publish": [15, 145], "manag": [15, 16, 125, 145, 276], "get": [15, 16, 17, 19, 68, 69, 111, 117, 118, 123, 124, 125, 128, 129, 130, 131, 132, 242, 257, 258, 259, 262, 276, 283, 284, 292, 293, 306, 307, 312, 316, 319, 322, 562, 569, 596, 597, 598, 617, 942, 948, 961, 970], "work": [15, 17, 18, 19, 111, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 942, 948], "repositori": [15, 17, 18, 20, 116, 126], "pull": [15, 16, 17, 20, 112, 145], "request": [15, 16, 112, 276, 309], "confus": [15, 125], "do": [15, 17, 18, 19, 68, 69, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 145, 323, 515, 518, 562, 606, 636, 651, 653, 671, 838, 839, 848, 849, 850], "don": [15, 17, 18, 19, 64, 65, 109, 110, 117, 123, 132, 145], "expect": [15, 117, 145, 562, 569, 942], "codebas": [15, 16, 111, 112, 125, 127, 276, 315, 316, 942], "total": [15, 16, 18, 68, 69, 70, 71, 72, 115, 117, 124, 131, 132, 145, 276, 319, 873, 876, 898, 919, 922, 927, 930], "hour": 15, "spent": 15, "spin": 15, "off": [15, 127, 686, 698, 700, 746, 748], "test": [15, 17, 19, 111, 115, 126, 145, 242, 264, 265, 323, 436, 439, 440, 443, 444, 447, 931, 932, 935, 937, 940], "error": [15, 17, 68, 69, 113, 117, 121, 124, 126, 130, 145, 156, 157, 276, 323, 408, 411, 898, 903, 906, 911, 914, 973, 974, 977, 981], "iter": [15, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 122, 128, 131, 168, 169, 276, 295, 296, 298, 299, 300, 301, 304, 317, 562, 563, 566, 619, 624, 774, 784, 787, 800, 803, 813, 826, 829, 830, 833, 838, 839, 840, 844, 848, 849, 850], "address": [15, 18, 19, 121, 128], "sake": 15, "singl": [15, 18, 68, 69, 112, 113, 115, 117, 118, 120, 122, 125, 128, 131, 132, 133, 145, 276, 283, 284, 302, 303, 304, 305, 562, 632, 635, 861, 866, 867, 869, 878, 879], "multipl": [15, 18, 68, 69, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 115, 118, 122, 145, 323, 337, 341, 492, 494, 497, 562, 563, 565, 566, 567, 591, 595, 612, 686, 687, 690, 691, 707, 709, 774, 775, 778, 779, 808, 811, 812, 813, 856, 857, 860, 863, 865, 873, 874, 875, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 961, 971], "line": [15, 17, 115, 117, 121, 126, 129, 130, 131, 132, 143, 942, 948], "convert": [15, 23, 24, 25, 26, 27, 68, 69, 117, 121, 128, 145, 146, 154, 171, 175, 178, 211, 214, 242, 243, 244, 276, 289, 290, 291, 292, 312, 319, 322, 562, 625, 631, 632, 686, 755, 757, 838, 840, 850, 851, 954], "directli": [15, 18, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 145, 838, 850], "graph": [15, 118, 122, 129, 145, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 878, 879, 880, 884, 886, 973, 974], "guarante": [15, 121, 145, 878, 879], "turn": [15, 115, 117, 122], "4": [15, 20, 34, 35, 44, 45, 48, 49, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 117, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 171, 195, 198, 206, 209, 219, 222, 237, 241, 242, 248, 250, 251, 252, 276, 295, 311, 323, 324, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 350, 355, 358, 363, 366, 383, 386, 387, 389, 390, 395, 398, 420, 422, 423, 432, 435, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 551, 552, 553, 554, 556, 557, 562, 571, 580, 589, 590, 591, 593, 594, 595, 625, 630, 636, 637, 639, 640, 641, 673, 676, 677, 678, 680, 683, 685, 686, 687, 688, 690, 692, 694, 695, 697, 698, 700, 707, 709, 718, 720, 724, 726, 743, 745, 746, 748, 758, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 810, 811, 812, 813, 822, 825, 856, 857, 860, 861, 862, 863, 865, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935, 942, 977, 978, 979, 980, 982], "step": [15, 17, 18, 20, 38, 39, 68, 69, 73, 74, 83, 84, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 171, 172, 173, 174, 200, 201, 203, 204, 276, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 649, 655, 656, 657, 658, 659, 661, 663, 665, 834, 835, 836, 837, 942, 977, 978, 979, 980, 981, 982], "take": [15, 16, 17, 18, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 323, 383, 386, 942, 948], "few": [15, 18, 19, 117, 118, 122, 123, 124, 125, 126, 129, 130, 131, 132, 143, 942, 948], "second": [15, 17, 115, 117, 125, 130, 242, 266, 271, 276, 304, 323, 337, 340, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 404, 407, 424, 427, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 543, 547, 562, 570, 617, 622, 636, 637, 640, 642, 644, 655, 657, 686, 692, 694, 698, 700, 701, 703, 710, 713, 724, 726, 730, 732, 737, 739, 743, 745, 749, 751, 774, 818, 821, 822, 825, 834, 836, 878, 879, 880, 884, 977, 978, 979], "automat": [15, 17, 18, 111, 113, 118, 122, 127, 128, 129, 132, 133, 942], "convers": [15, 24, 25, 26, 27, 68, 69, 127, 129, 133, 144, 145, 942, 948], "everyon": [15, 16, 18, 145], "regardless": [15, 16, 68, 69, 130, 133, 168, 169], "wouldn": 15, "nice": [15, 117], "write": [15, 18, 19, 20, 68, 69, 111, 112, 114, 115, 118, 119, 125, 128, 130, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 276, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 581, 584, 585, 586, 588, 590, 591, 594, 602, 615, 618, 619, 636, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 877, 878, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "onc": [15, 17, 18, 117, 122, 123, 124, 128, 131, 145, 276, 317, 686, 707, 709, 737, 739, 861, 862], "know": [15, 18, 117, 878, 879, 880, 884, 886], "among": [15, 68, 69, 117], "frantic": 15, "port": 15, "lucid": 15, "honk": 15, "improv": [15, 18, 118, 128], "understand": [15, 17, 18, 19, 20, 111, 113, 114, 115, 116, 126, 127], "pattern": [15, 68, 69, 114, 123, 562, 584, 585, 586], "hasn": 15, "chang": [15, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 114, 116, 117, 122, 128, 132, 145, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 276, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 567, 591, 592, 593, 595, 637, 638, 639, 641, 686, 687, 688, 689, 691, 692, 694, 774, 775, 776, 777, 779, 804, 807, 808, 809, 810, 812, 838, 840, 850, 863, 865, 880, 881, 882, 883, 942, 948], "now": [15, 17, 20, 68, 69, 112, 113, 117, 120, 122, 123, 126, 130, 131, 133, 144, 145, 961, 972, 973, 974], "spend": 15, "torchvis": 15, "probabl": [15, 117, 673, 681, 861, 862, 961, 969], "sonnet": 15, "about": [15, 17, 18, 116, 117, 127, 128, 132, 133, 145, 242, 259, 262], "next": [15, 17, 18, 19, 20, 114, 115, 119, 120, 126, 130, 131, 242, 259, 942, 973, 974, 977, 978, 979, 980, 981, 982], "everyth": [15, 18, 19, 117, 129, 145], "zero": [15, 68, 69, 70, 71, 113, 115, 121, 122, 123, 124, 128, 131, 132, 156, 158, 159, 171, 180, 186, 187, 206, 209, 224, 228, 229, 233, 237, 241, 242, 245, 323, 337, 340, 342, 345, 346, 349, 371, 374, 395, 398, 416, 419, 420, 423, 480, 483, 484, 487, 492, 493, 494, 497, 499, 502, 503, 506, 511, 514, 515, 518, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 580, 615, 618, 619, 636, 637, 640, 642, 644, 655, 657, 659, 661, 673, 681, 686, 687, 690, 695, 697, 710, 713, 718, 720, 727, 729, 749, 751, 752, 754, 774, 788, 791, 792, 795, 800, 803, 808, 811, 830, 833, 856, 857, 860, 861, 863, 864, 873, 874, 875, 876, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 977, 978, 979, 980], "need": [15, 17, 18, 19, 20, 112, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 562, 574, 575, 577, 774, 775, 778, 788, 791], "said": 15, "high": [15, 19, 68, 69, 97, 98, 131, 861, 863, 864, 865, 867, 868, 869, 870], "level": [15, 16, 19, 118, 127, 128, 131, 132, 133, 145], "optim": [15, 125, 129, 131, 133, 144, 276, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 834, 835, 836, 837, 942, 978, 979, 980, 982], "trainer": [15, 143, 145, 942], "statu": 15, "quo": 15, "kera": 15, "dopamin": 15, "ignit": 15, "catalyst": 15, "lightn": 15, "fastai": 15, "haiku": [15, 133], "flax": [15, 133, 145], "trax": [15, 133], "objax": [15, 133], "idea": [15, 126, 144], "fulli": [15, 113, 121, 122, 128, 129, 130, 131, 132, 133, 145, 961, 971, 972], "offer": [15, 132], "strongli": [16, 17, 942, 948], "welcom": [16, 17, 18, 942, 948], "absolut": [16, 68, 69, 323, 324, 327, 686, 733], "skill": 16, "whether": [16, 17, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 109, 110, 113, 123, 125, 156, 157, 168, 169, 242, 245, 257, 263, 264, 265, 275, 276, 292, 293, 304, 308, 309, 312, 313, 317, 320, 322, 323, 444, 447, 562, 563, 566, 570, 571, 580, 583, 587, 589, 599, 601, 603, 606, 607, 608, 609, 610, 611, 612, 624, 628, 634, 635, 636, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 668, 672, 673, 681, 686, 701, 703, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 851, 861, 862, 931, 932, 935, 937, 940, 953, 954, 961, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "vetern": 16, "beginn": 16, "start": [16, 17, 18, 19, 20, 68, 69, 73, 74, 111, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 171, 172, 173, 174, 200, 201, 202, 203, 204, 205, 276, 288], "aspect": [16, 131, 942], "guid": [16, 17, 18, 126, 942], "through": [16, 18, 19, 111, 115, 117, 118, 119, 122, 126, 127, 128, 130, 131, 132, 133, 144, 323, 355, 358], "journei": [16, 942, 948], "inclusvi": 16, "big": [16, 145], "team": [16, 17, 18], "board": 16, "contributor": [16, 17, 18, 127, 942], "split": [16, 18, 68, 69, 127, 128, 145, 276, 283, 298, 299, 300, 301, 315, 316, 317, 562, 612, 774, 942], "section": [16, 18, 19, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 878, 879, 880, 884, 886], "below": [16, 17, 19, 20, 111, 112, 115, 117, 118, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 171, 224, 228, 229, 233, 323, 363, 366, 383, 386, 395, 398, 519, 522, 553, 557, 686, 695, 697, 698, 700, 746, 748, 774, 788, 791, 792, 795, 878, 879, 887, 888, 891, 942], "best": [16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 562, 612], "go": [16, 17, 18, 19, 111, 112, 115, 122, 127, 131, 145, 838, 849], "finish": [16, 17, 111, 942], "dive": [16, 18, 19, 127, 130, 131, 145, 942], "right": [16, 17, 18, 68, 69, 111, 115, 131, 323, 371, 374, 379, 382, 686, 737, 739], "environ": [16, 18, 20, 144], "basic": [16, 19, 20], "fork": [16, 17, 562, 613], "doc": [16, 19, 113, 114, 128, 131, 132, 942], "document": [16, 18, 117, 129, 131, 133], "local": [16, 17, 20, 118], "task": [16, 18, 144, 834, 835, 836, 837, 942], "help": [16, 17, 115, 117, 119, 121, 122, 130, 131, 132, 143, 562, 568, 898, 923, 926, 942], "video": [16, 18, 113, 114, 115], "realli": [17, 122, 145], "contribut": [17, 18, 19, 128, 948], "toward": [17, 128, 774, 808, 811, 942, 948], "page": [17, 18, 129, 133, 143, 942, 948], "explain": [17, 18, 19, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 942, 948], "main": [17, 20, 120, 122, 171, 186, 187, 224, 228, 229, 233, 686, 698, 700, 746, 748], "prefer": [17, 122], "mode": [17, 44, 45, 68, 69, 115, 122, 145, 168, 169, 276, 302, 303, 304, 305, 317, 323, 337, 340, 494, 497, 686, 730, 731, 732], "git": [17, 18, 117], "recurs": [17, 20, 23, 24, 25, 26, 27, 68, 69, 118, 122, 132, 145, 838, 839, 840, 848, 849, 850], "submodul": [17, 18, 19, 20, 116, 117, 118, 124, 127, 128, 132, 942, 975, 976, 983, 984], "com": 17, "unifyai": [17, 20], "http": [17, 114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 636, 637, 640, 642, 644, 686, 698, 700, 774, 788, 791, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906], "gh": 17, "your_fold": 17, "id": [17, 121, 122, 126, 276, 292, 973, 974], "cours": [17, 18, 115, 131, 145], "whatev": [17, 145], "integr": [17, 242, 245], "familiar": [17, 19], "decid": [17, 68, 69, 838, 849], "sure": [17, 19, 116, 117], "elig": 17, "free": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 144, 942], "student": 17, "licenc": 17, "peopl": [17, 18, 111], "seem": [17, 132, 145], "miss": [17, 115, 117, 121, 122, 126, 977, 981], "add": [17, 18, 19, 34, 35, 64, 65, 68, 69, 70, 71, 79, 80, 81, 82, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 122, 128, 130, 145, 323, 324, 327, 341, 492, 563, 567, 636, 672, 856, 857, 860, 942, 948, 975, 976], "explicit": [17, 20, 122, 123, 125, 128, 145], "remind": 17, "channel": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 562, 589, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971], "pace": 17, "updat": [17, 18, 19, 20, 68, 69, 111, 113, 115, 116, 120, 121, 122, 123, 128, 130, 131, 133, 145, 276, 283, 562, 606, 618, 619, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 683, 834, 835, 836, 838, 845, 846, 854, 855, 953, 954, 977, 978, 979, 980, 981, 982], "suggest": [17, 18, 112, 117], "latest": [17, 19, 20, 114, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 686, 698, 700, 774, 788, 791, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 961, 970], "packag": [17, 20, 126, 145], "ensur": [17, 18, 113, 117, 121, 123, 126, 562, 606], "align": [17, 68, 69, 128, 130, 942, 948], "accord": [17, 20, 68, 69, 118, 123, 242, 248, 251, 259, 323, 337, 340, 379, 382, 494, 497, 562, 590, 618, 619, 686, 749, 751, 774, 784, 787, 830, 833, 898, 919, 922, 927, 930], "stabl": [17, 58, 59, 103, 104, 128, 145, 562, 597, 598, 620, 621, 626, 627, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897], "pypi": [17, 19, 145], "mayb": [17, 23, 26, 27, 128, 130], "person": [17, 18], "experi": [17, 129, 131, 145], "avoid": [17, 18, 117, 119, 120, 122, 126, 130, 276, 323, 416, 419], "pip": [17, 144, 942], "instal": [17, 20, 126, 144, 942], "abil": [17, 129, 145], "certain": [17, 68, 69, 117, 145, 171, 172, 173, 200, 201, 203, 204], "perhap": [17, 130, 131, 132, 145], "keep": [17, 18, 68, 69, 116, 117, 122, 129, 131, 133, 562, 634], "track": [17, 18, 276, 838, 850, 973, 974], "termin": [17, 18, 20, 68, 69, 70, 71, 72, 122, 128, 131], "run": [17, 20, 113, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 276, 283, 636, 637, 640, 642, 644, 655, 657, 834, 835, 836, 837, 961, 972, 973, 974], "command": [17, 20, 942], "ivy_dev": [17, 18, 20], "name": [17, 18, 20, 114, 117, 126, 128, 130, 131, 133, 168, 169, 562, 568, 686, 701, 703, 730, 732, 737, 739, 878, 879, 880, 884], "3": [17, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 115, 117, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 170, 171, 195, 198, 206, 209, 219, 222, 234, 236, 237, 241, 242, 248, 249, 250, 251, 252, 276, 292, 295, 311, 318, 323, 324, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 363, 366, 379, 382, 383, 386, 387, 389, 390, 395, 398, 412, 415, 420, 421, 422, 423, 428, 431, 432, 435, 448, 451, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 551, 552, 553, 554, 556, 557, 562, 563, 564, 565, 570, 571, 580, 587, 590, 591, 592, 593, 594, 595, 624, 625, 630, 632, 636, 637, 638, 639, 640, 641, 673, 674, 675, 676, 678, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 707, 709, 718, 720, 724, 726, 737, 739, 743, 745, 746, 748, 755, 757, 758, 759, 762, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 810, 811, 812, 813, 814, 817, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 923, 926, 931, 932, 935, 942], "8": [17, 20, 48, 49, 70, 71, 79, 80, 97, 98, 115, 117, 122, 127, 131, 156, 160, 276, 295, 323, 337, 340, 341, 346, 349, 350, 363, 366, 387, 390, 395, 398, 432, 435, 452, 455, 492, 493, 519, 522, 535, 538, 539, 542, 553, 557, 562, 571, 590, 636, 637, 640, 673, 680, 686, 692, 694, 695, 697, 698, 700, 724, 726, 743, 745, 758, 759, 762, 774, 775, 776, 778, 792, 795, 800, 803, 813, 861, 862, 863, 864, 865, 873, 877, 878, 879, 898, 899, 902, 942, 961, 972], "activ": [17, 18, 20, 22, 64, 65, 67, 109, 110, 112, 132, 157, 158, 159, 160, 161, 162, 165, 167, 942, 951, 952], "setup": 17, "click": [17, 18, 114, 942], "icon": [17, 18], "side": [17, 18], "choos": [17, 18, 133, 276, 318, 323, 480, 483, 484, 487, 873, 877, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914], "left": [17, 18, 68, 69, 115, 123, 323, 371, 374, 686, 701, 703, 714, 716, 737, 739, 873, 874, 942], "panel": 17, "select": [17, 18, 117, 128, 130, 133, 145], "drop": [17, 145], "down": [17, 117, 130], "path": [17, 20], "manual": [17, 18, 117, 132, 838, 839, 848, 849], "builtin": [17, 20, 130, 132], "requir": [17, 20, 112, 113, 114, 115, 117, 120, 121, 123, 124, 130, 145, 168, 169, 323, 535, 538, 686, 701, 703, 774, 818, 821, 953, 954], "cmd": [17, 20], "directori": [17, 18, 20, 117, 562, 623], "folder": [17, 18, 20, 112, 116, 117, 118], "file": [17, 18, 20, 68, 69, 112, 114, 117, 118, 119, 121, 122, 126, 128, 131, 562, 623, 973, 974], "abov": [17, 18, 20, 113, 114, 115, 117, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 492, 494, 497, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 701, 703, 746, 748, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 861, 863, 864, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 915, 918, 919, 922, 923, 926, 931, 932, 935], "m": [17, 18, 20, 111, 128, 171, 206, 209, 224, 228, 229, 233, 562, 571, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748, 861, 866, 867, 869], "python3": [17, 20], "script": [17, 18, 20, 115, 128, 145], "bat": [17, 18, 20], "OR": [17, 18, 20, 323, 375, 378, 484, 487, 931, 937, 940], "bin": [17, 18, 20], "mac": [17, 18, 20], "linux": [17, 18, 20], "virtualenv": 17, "found": [17, 18, 68, 69, 70, 71, 72, 114, 121, 122, 126, 276, 307], "o": [17, 111, 128, 562, 571], "note": [17, 18, 112, 114, 115, 117, 122, 323, 515, 518, 686, 701, 703, 737, 739, 774, 818, 821, 878, 880, 884, 898, 907, 910], "tick": [17, 18], "abl": [17, 18, 68, 69, 118, 123, 125, 126, 130, 133], "To": [17, 115, 117, 118, 122, 126, 131, 132, 133, 942], "ivy_test": [17, 18], "test_array_api": [17, 18, 116, 117], "cd": [17, 18, 20], "r": [17, 68, 69, 562, 571, 634, 686, 730, 732, 755, 757], "txt": 17, "visual": [17, 126, 145], "jetbrain": 17, "remot": 17, "mitig": 17, "potenti": [17, 127, 323, 416, 419], "conflict": [17, 18, 131], "addit": [17, 18, 68, 69, 112, 114, 117, 122, 123, 130, 131, 133, 276, 318, 323, 337, 340, 562, 584, 585, 586, 856, 857, 860, 961, 971], "yet": [17, 19, 122], "particular": [17, 18, 112, 117, 125, 323, 324, 327], "system": [17, 145, 686, 734, 736], "instruct": [17, 19], "desktop": 17, "wsl": 17, "powershel": 17, "admin": 17, "visit": 17, "link": 17, "imag": [17, 20, 41, 86, 112, 128, 129, 131, 133, 144, 673, 674, 675, 676, 677, 679, 680, 942], "profession": 17, "execut": [17, 20, 122, 125, 128, 130, 133, 145, 562, 633], "deploy": 17, "top": [17, 18, 117, 131, 132, 942], "press": [17, 131, 942], "ok": 17, "correctli": [17, 68, 69, 113, 117, 122, 123, 126, 132, 145, 686, 714, 716, 873, 874], "caus": [17, 18, 115, 117, 122, 125, 126, 145], "earlier": [17, 18], "might": [17, 18, 112, 117, 120, 128, 130, 131, 562, 583], "necessari": [17, 115, 119, 122, 125], "virtualis": 17, "detail": [17, 18, 19, 112, 113, 116, 117, 118, 119, 120, 122, 131, 132, 171, 189, 192, 878, 879, 880, 884, 886], "sudo": 17, "apt": 17, "ca": 17, "certif": 17, "curl": 17, "gnupg": 17, "lsb": 17, "mkdir": 17, "p": [17, 18, 68, 69, 81, 82, 171, 206, 209, 562, 574, 575, 576, 577, 673, 681, 686, 714, 716, 752, 754, 961, 969], "keyr": 17, "fssl": 17, "download": [17, 117], "gpg": 17, "dearmor": 17, "echo": 17, "deb": 17, "arch": 17, "dpkg": 17, "architectur": [17, 133, 145], "lsb_releas": 17, "tee": 17, "list": [17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 64, 65, 68, 69, 83, 84, 101, 102, 109, 110, 112, 113, 115, 117, 123, 124, 126, 128, 131, 132, 133, 145, 171, 172, 173, 175, 178, 180, 206, 207, 209, 211, 214, 216, 217, 234, 236, 242, 246, 276, 283, 284, 292, 294, 295, 298, 299, 302, 303, 317, 562, 571, 625, 630, 634, 636, 637, 639, 641, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 743, 745, 774, 780, 783, 792, 795, 813, 818, 821, 838, 839, 840, 844, 849, 850, 856, 857, 860, 873, 876, 878, 880, 881, 883, 884, 942, 961, 962, 963, 964, 965, 966, 967, 968], "dev": [17, 68, 69, 70, 72, 118, 124, 128, 130, 132, 276, 283, 307], "null": 17, "ce": 17, "cli": 17, "containerd": 17, "io": 17, "compos": [17, 117, 122, 145], "plugin": 17, "systemctl": 17, "permiss": 17, "relat": [17, 18, 117, 126, 144, 276], "post": [17, 133, 856, 857, 860, 942, 948], "It": [17, 18, 20, 111, 112, 114, 115, 117, 119, 121, 122, 125, 128, 130, 131, 132, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 276, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 584, 585, 586, 588, 591, 594, 602, 615, 618, 619, 636, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 877, 878, 886, 887, 888, 891, 893, 896, 931, 932, 935, 937, 940], "headach": 17, "arm": [17, 18], "m1": 17, "instead": [17, 18, 19, 113, 114, 115, 117, 118, 122, 125, 128, 130, 131, 145], "featur": [17, 112, 113, 131, 942], "vm": 17, "azur": 17, "cloud": [17, 144], "mean": [17, 18, 60, 61, 68, 69, 105, 106, 109, 110, 111, 115, 117, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 276, 302, 303, 304, 305, 317, 562, 585, 834, 835, 836, 837, 838, 844, 861, 866, 878, 879, 898, 942, 955], "configur": [17, 18, 20, 68, 69, 123, 276, 316, 838, 851], "defin": [17, 19, 112, 113, 114, 117, 123, 130, 132, 145, 323, 494, 497, 515, 518, 562, 615, 686, 692, 694, 701, 703, 734, 736, 861, 863, 864, 898, 903, 906, 907, 910, 911, 914], "dockerfil": [17, 20], "longer": [17, 117, 123, 125], "worri": 17, "platform": 17, "agnost": [17, 113, 121, 128, 130, 133, 145, 942], "usual": [17, 117], "studio": 17, "favourit": 17, "extens": [17, 18, 114, 117, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 452, 455, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 686, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935], "theme": 17, "too": [17, 18, 126, 145, 323, 337, 340, 494, 497], "done": [17, 18, 115, 117, 126, 131], "unsupport": [17, 123, 126, 242, 260, 261], "old": [17, 68, 69, 125], "slow": 17, "ipad": 17, "long": [17, 18, 115, 673, 683], "browser": 17, "cool": [17, 112], "requisit": 17, "head": [17, 122, 673, 684, 942, 961, 972], "pane": [17, 18], "readi": [17, 19], "begin": [17, 838, 839, 849], "outlin": [17, 18, 19, 111, 114, 117, 118, 122, 125, 130], "green": [17, 18, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 986, 987], "dropdown": 17, "tab": [17, 131, 942], "master": [17, 18, 122], "v": [17, 18, 117, 128, 131, 132, 133, 673, 685, 942, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 981, 983, 984], "view": [17, 18, 171, 189, 192, 673, 676, 680], "log": [17, 18, 34, 35, 79, 80, 118, 122, 125, 128, 131, 171, 203, 204, 323, 464, 467, 472, 475, 686, 733, 942], "built": [17, 117, 129, 171, 172, 173, 276, 961, 972, 973, 974], "bottom": 17, "box": 17, "patient": 17, "upto": 17, "15": [17, 97, 98, 115, 117, 323, 363, 366, 519, 522, 673, 676, 686, 698, 700, 724, 726, 743, 745, 774, 808, 811, 856, 857, 860, 861, 863, 864, 865, 873, 876, 878, 879, 898, 899, 902], "minut": 17, "launch": 17, "12": [17, 97, 98, 115, 117, 122, 323, 363, 366, 383, 386, 395, 398, 519, 522, 562, 580, 598, 636, 637, 640, 686, 698, 700, 724, 726, 743, 745, 774, 792, 795, 800, 803, 808, 811, 856, 857, 860, 861, 863, 864, 865, 873, 877, 878, 879, 898, 899, 902], "output": [17, 68, 69, 111, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 128, 130, 132, 133, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 276, 283, 284, 317, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 573, 574, 575, 577, 580, 581, 584, 585, 586, 588, 590, 591, 594, 602, 615, 618, 619, 636, 646, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 838, 851, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 877, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972], "That": [17, 18, 117, 130, 131, 132, 323, 515, 518], "alreadi": [17, 18, 68, 69, 113, 119, 122, 130, 145, 276, 323, 387, 390, 420, 423, 494, 497, 519, 522, 558, 561, 686, 724, 726, 942], "refer": [17, 18, 113, 117, 118, 123, 145, 171, 186, 187, 323, 416, 419, 464, 467, 636, 637, 640, 642, 644, 686, 749, 751, 755, 757, 898, 919, 922, 927, 930, 931, 932, 935, 937, 940, 961, 971], "approach": [17, 18, 117, 118, 122, 130, 131, 145], "colour": 17, "applic": [17, 123, 124, 132, 673, 684, 685, 838, 844, 850], "good": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 132], "chanc": 17, "vscode": 17, "show": [17, 18, 68, 69, 115, 117, 125, 144, 145, 942], "explor": [17, 129, 133, 144], "troubleshoot": 17, "sometim": [17, 18, 117], "ever": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "64": [17, 117, 131, 132, 323, 535, 538, 539, 542, 673, 679, 680, 686, 724, 726, 898, 899, 902, 942, 961, 972], "bit": [17, 115, 117, 118, 122, 130, 242, 258, 259, 262, 323, 367, 370, 371, 374, 379, 382, 898, 915, 918, 923, 926], "usr": 17, "more": [17, 18, 19, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 171, 172, 173, 242, 246, 323, 416, 419, 686, 710, 713, 774, 792, 795, 878, 879, 880, 884, 886, 942], "nutshel": [17, 113], "hook": 17, "lint": 17, "accept": [17, 18, 23, 113, 114, 115, 117, 118, 121, 122, 124, 125, 130, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 480, 483, 484, 487, 492, 503, 506, 515, 518, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 907, 910, 931, 932, 935, 942], "fix": [17, 18], "fail": [17, 19, 116, 117, 126, 128, 130], "attempt": [17, 126, 145], "succe": 17, "problemat": 17, "appli": [17, 18, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 114, 115, 117, 118, 120, 122, 123, 124, 125, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 242, 248, 249, 250, 252, 267, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 562, 563, 564, 565, 567, 584, 585, 586, 591, 592, 593, 595, 636, 637, 638, 639, 641, 655, 657, 659, 661, 673, 682, 684, 685, 686, 687, 688, 689, 691, 718, 720, 727, 729, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 779, 808, 809, 810, 812, 818, 821, 834, 835, 836, 838, 844, 847, 850, 851, 856, 857, 860, 863, 865, 880, 881, 882, 883, 942, 950, 951, 952, 975, 976], "proce": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifi": [17, 18, 114, 118, 123, 124, 126, 128], "properli": [17, 111], "enter": [17, 18, 113, 121, 123, 124, 276, 636, 672], "unsur": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "feel": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 942], "server": [18, 942], "appropri": [18, 64, 65, 109, 110, 117, 120, 323, 337, 340, 494, 497, 873, 874], "context": [18, 115, 117, 122, 123, 124, 276, 562, 613, 673, 684, 961, 972], "suitabl": [18, 112, 122], "quick": [18, 111, 132], "alwai": [18, 19, 68, 69, 112, 113, 114, 117, 118, 119, 121, 122, 125, 126, 128, 130, 145, 242, 245, 323, 337, 340, 494, 497, 562, 606, 636, 651, 653, 668], "correct": [18, 19, 60, 61, 105, 106, 111, 113, 118, 122, 123, 124, 126, 242, 271, 774, 775, 778, 898, 919, 920, 921, 922, 927, 928, 929, 930, 942], "tendenc": 18, "gener": [18, 19, 20, 37, 64, 65, 68, 69, 82, 109, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 168, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 515, 518, 535, 538, 539, 542, 563, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 651, 653, 686, 698, 700, 774, 788, 791, 808, 811, 861, 862, 863, 864, 867, 869, 871, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 942, 977, 981], "land": 18, "end": [18, 122, 125, 127, 144, 145, 171, 172, 173, 323, 355, 358, 942, 948], "world": 18, "come": [18, 19, 117, 132, 143, 942, 948], "fly": 18, "hard": [18, 130], "receiv": [18, 117, 123, 124, 276, 283, 284, 562, 569, 612, 961, 971], "respons": [18, 20], "internship": 18, "comment": [18, 126], "trigger": 18, "unansw": 18, "label": [18, 128, 129, 133, 758, 759, 762, 764, 767, 769, 772], "respond": 18, "remov": [18, 19, 20, 68, 69, 114, 117, 118, 123, 125, 133, 686, 698, 700, 710, 713, 746, 748, 774, 814, 817, 834, 835, 836], "someon": [18, 145], "els": [18, 19, 112, 118, 119, 125, 128, 130, 132, 133, 145, 562, 572, 583, 587, 838, 848], "strive": [18, 117, 145], "repli": 18, "newli": [18, 117, 125, 168, 169, 242, 245, 562, 573], "place": [18, 68, 69, 111, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 276, 318, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 604, 605, 606, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935, 977, 978, 979, 980, 981, 982], "bug": [18, 117], "serv": [18, 113, 117, 118, 121, 122, 127, 942], "suspect": 18, "behaviour": [18, 113, 114, 117, 121, 122, 125, 130], "observ": 18, "confid": 18, "noth": [18, 68, 69], "wrong": 18, "someth": [18, 112, 131, 132, 145], "bet": 18, "act": [18, 115, 145], "placehold": [18, 113, 121, 126, 838, 850], "sub": [18, 19, 68, 69, 111, 117, 122, 130, 131, 132, 276, 298, 299, 302, 303, 304, 305, 686, 698, 700, 774, 813, 834, 835, 836, 837, 942], "mark": [18, 117], "ii": [18, 898, 899, 902], "iii": 18, "titl": [18, 942], "issue_numb": 18, "delet": [18, 20], "No": [18, 128], "wait": [18, 68, 69, 70, 71, 72], "progress": [18, 122, 129, 133], "pr": 18, "soon": [18, 122, 143, 145, 942, 948], "partial": [18, 68, 69, 973, 974], "solut": [18, 117, 122, 686, 734, 736], "review": [18, 112], "merg": 18, "everi": [18, 19, 20, 113, 115, 116, 117, 118, 119, 120, 122, 125, 128, 130, 132, 171, 194, 195, 198, 562, 563, 566], "shape": [18, 48, 49, 68, 69, 73, 74, 83, 84, 93, 94, 97, 98, 101, 102, 112, 113, 114, 115, 117, 123, 124, 125, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 218, 219, 222, 224, 228, 229, 233, 234, 235, 236, 237, 241, 242, 245, 246, 247, 276, 285, 313, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 584, 585, 586, 588, 591, 594, 599, 602, 615, 618, 619, 625, 636, 637, 639, 641, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 805, 806, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 876, 877, 881, 883, 887, 888, 891, 893, 896, 898, 899, 902, 931, 932, 935, 937, 940, 942, 961, 963, 964, 965, 966, 967, 968, 975, 976], "move": [18, 68, 69, 112, 276, 318], "within": [18, 23, 26, 27, 117, 132, 145, 171, 172, 173, 861, 867, 869], "7": [18, 20, 34, 35, 48, 49, 70, 71, 79, 80, 97, 98, 115, 117, 118, 122, 125, 156, 158, 159, 276, 295, 323, 324, 327, 337, 338, 339, 340, 341, 346, 348, 363, 366, 367, 370, 383, 386, 387, 390, 395, 398, 412, 415, 420, 423, 432, 435, 452, 455, 492, 493, 519, 522, 535, 538, 548, 552, 553, 557, 562, 571, 580, 590, 636, 637, 640, 642, 644, 655, 657, 673, 679, 680, 685, 686, 692, 694, 695, 697, 698, 700, 724, 726, 743, 745, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 778, 788, 791, 792, 795, 800, 803, 813, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 873, 877, 878, 879, 898, 899, 902], "dai": 18, "close": [18, 114, 323, 416, 419, 519, 522, 686, 737, 739], "likewis": [18, 113, 114, 118, 122, 123, 131], "freed": 18, "flag": [18, 68, 69, 125, 130, 276, 292, 636, 651, 653], "purpos": [18, 20, 113, 115, 117, 118, 120, 121, 122, 127, 130, 323, 416, 419, 942], "remain": [18, 115, 145, 323, 337, 340, 494, 497, 515, 518, 774, 804, 807, 838, 844], "access": [18, 20, 68, 69, 123], "short": [18, 132, 673, 683], "basi": [18, 116, 131], "situat": [18, 133], "alloc": [18, 145, 171, 224, 228, 229, 233, 242, 245, 276], "upon": [18, 115, 117, 125, 145], "period": 18, "prevent": [18, 125, 126, 130, 636, 637, 640, 642, 644, 655, 657, 898, 923, 926, 977, 978, 979], "unabl": 18, "obvious": 18, "never": [18, 117, 122], "reflect": [18, 121], "qualiti": 18, "hypothet": 18, "frustrat": 18, "delai": 18, "busi": 18, "fine": [18, 130, 133], "becaus": [18, 113, 114, 117, 118, 119, 121, 123, 124, 125, 128, 132, 133, 145], "inact": 18, "limit": [18, 68, 69, 70, 71, 72, 115, 117, 126, 128, 131, 133, 145, 242, 259, 262, 562, 574, 575, 577, 774, 775, 778], "me": 18, "unfairli": 18, "definit": [18, 118, 123, 130, 686, 687, 690, 692, 694], "investig": 18, "Then": [18, 20, 130, 145], "practic": 18, "separ": [18, 117, 121, 126, 128, 130, 131], "branch": [18, 122, 145, 168, 169, 323, 355, 358], "simpli": [18, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 114, 115, 117, 118, 121, 122, 124, 125, 128, 132, 133, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 323, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 416, 419, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 567, 591, 592, 593, 595, 637, 638, 639, 641, 687, 688, 689, 691, 775, 776, 777, 779, 808, 809, 810, 812, 863, 865, 880, 881, 882, 883], "role": [18, 129], "kept": [18, 68, 69, 70, 71, 72, 125, 834, 835, 836], "date": 18, "upstream": [18, 116], "complic": [18, 128], "root": [18, 20, 131, 323, 535, 538, 861, 862, 866], "merge_with_upstream": 18, "sh": 18, "name_of_your_branch": 18, "resolv": [18, 898, 915, 918, 923, 926], "clone": [18, 20, 68, 69, 276, 294, 295, 296, 297], "push": [18, 116, 126], "both": [18, 113, 114, 115, 117, 118, 122, 124, 125, 128, 130, 131, 132, 133, 144, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 266, 323, 324, 327, 337, 340, 342, 345, 346, 349, 387, 390, 420, 423, 492, 503, 506, 511, 514, 535, 538, 539, 542, 548, 552, 562, 590, 636, 637, 640, 673, 676, 685, 686, 687, 690, 692, 694, 698, 700, 710, 713, 749, 751, 774, 808, 811, 856, 857, 860, 878, 880, 884, 898, 903, 906, 931, 932, 935], "abort": 18, "tediou": 18, "resolut": 18, "stash": 18, "reinstat": 18, "correspond": [18, 68, 69, 70, 71, 113, 114, 115, 116, 117, 118, 121, 122, 123, 242, 246, 323, 355, 358, 511, 514, 686, 692, 694, 701, 703, 734, 736, 774, 780, 783, 808, 811, 861, 862, 873, 874, 875, 878, 879, 880, 884, 886, 898, 915, 918, 919, 922, 923, 926, 927, 930], "fetch": 18, "uncommit": 18, "unstag": 18, "untrack": 18, "comprehens": 18, "explan": [18, 113, 114, 122, 130], "atlassian": 18, "tutori": 18, "wrote": 18, "piec": [18, 118, 120, 121, 128], "inform": [18, 117, 126, 242, 259, 262, 562, 568, 636, 668], "tag": 18, "usu": 18, "describ": [18, 117, 129, 133, 898, 899, 902, 915, 918, 919, 922, 923, 926], "navig": [18, 111], "blame": 18, "revis": 18, "author": [18, 942], "eg": [18, 117], "16": [18, 44, 45, 79, 80, 97, 98, 115, 117, 131, 323, 548, 549, 551, 552, 673, 679, 686, 687, 688, 690, 698, 700, 724, 726, 863, 865, 873, 877, 898, 899, 902], "5": [18, 20, 34, 35, 36, 37, 44, 45, 48, 49, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 113, 115, 117, 119, 130, 131, 132, 156, 158, 159, 161, 171, 195, 198, 206, 209, 219, 222, 234, 236, 237, 241, 242, 248, 250, 251, 252, 276, 295, 311, 323, 324, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 350, 359, 362, 363, 366, 379, 382, 383, 386, 387, 388, 389, 390, 395, 398, 420, 421, 422, 423, 432, 435, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 551, 552, 553, 554, 556, 557, 562, 563, 564, 571, 580, 590, 591, 594, 595, 625, 630, 636, 637, 639, 640, 641, 673, 676, 678, 679, 685, 686, 687, 688, 690, 692, 694, 695, 697, 698, 700, 707, 709, 724, 726, 743, 745, 746, 748, 758, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 810, 811, 812, 813, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 872, 873, 875, 876, 877, 878, 879, 880, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935, 961, 972], "past": 18, "l": [18, 111, 686, 687, 690, 701, 703, 710, 713, 746, 748], "filepath": [18, 68, 69], "grep": 18, "commit_id": 18, "handi": [18, 117], "histori": 18, "toggl": 18, "vertic": 18, "highlight": [18, 115], "previou": [18, 113, 117, 133, 145, 636, 642, 644, 655, 657], "shown": [18, 64, 65, 68, 69, 109, 110, 113, 115, 117, 126, 128, 130, 145, 323, 363, 366, 383, 386, 395, 398, 519, 522, 553, 557, 686, 695, 697, 774, 788, 791, 792, 795, 878, 879, 887, 888, 891], "whenev": [18, 117, 130, 131], "think": [18, 115], "interact": [18, 117, 942], "gain": [18, 127, 132, 955], "quit": [18, 19, 114, 117, 118, 120, 121], "repeat": [18, 48, 49, 68, 69, 93, 94, 114, 115, 117, 119, 121, 122, 126, 562, 586, 774, 826, 829], "yourself": [18, 19, 117, 144], "simpler": [18, 130], "cannot": [18, 119, 123, 133], "least": [18, 115, 117, 118, 121, 686, 710, 713], "final": [18, 114, 115, 118, 121, 123, 125, 126, 128, 130, 131, 171, 200, 201, 203, 204, 562, 589, 961, 972], "tickbox": 18, "lower": [18, 68, 69, 115, 117, 128, 145, 171, 186, 187, 224, 228, 323, 492, 686, 687, 690, 861, 867, 869], "corner": 18, "without": [18, 68, 69, 112, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 562, 617, 622, 774, 804, 807, 838, 840, 878, 879, 880, 884, 886], "span": 18, "intent": [18, 125], "larg": [18, 131, 323, 337, 340, 494, 497], "discourag": 18, "philosophi": 18, "increment": [18, 562, 605], "frequent": [18, 19], "valuabl": 18, "infrequ": 18, "earli": [18, 942], "wast": 18, "spot": [18, 118], "mistak": [18, 126], "propos": 18, "mountain": 18, "around": [18, 68, 69, 70, 71, 72, 113, 118, 121, 130, 145], "advoc": [18, 145], "individu": [18, 19, 118], "per": [18, 117, 131, 276, 673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "style": [18, 873, 876], "ve": [18, 127, 130, 861, 862, 942], "were": [18, 68, 69, 112, 117, 122, 126], "actual": [18, 111, 118, 125, 127, 130, 132, 145], "aim": [18, 127], "part": [18, 112, 116, 117, 118, 128, 129, 133, 144, 145, 171, 224, 228, 229, 233, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 973, 974], "subsect": 18, "session": [18, 942], "block": [18, 117, 118, 126, 127, 129, 133, 145, 276, 636, 672, 942], "smaller": [18, 128, 133, 774, 775, 778, 808, 811, 898, 915, 918, 923, 926], "edit": 18, "exact": [18, 68, 69, 128, 878, 879], "beauti": 18, "particularli": [18, 131, 145], "concern": [18, 111, 115, 122, 125, 127], "effici": [18, 113, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [18, 117, 145, 878, 879, 880, 884, 886], "undo": 18, "stress": 18, "frequenc": [18, 562, 589], "pycharm": 18, "pytest": [18, 117], "button": 18, "declar": 18, "insid": [18, 20, 112, 117, 123], "exec": 18, "rm": 18, "rf": 18, "cp": 18, "ivy_contain": 18, "bash": [18, 20], "test_ivi": [18, 117], "test_funct": [18, 117], "test_cor": 18, "test_imag": 18, "test_random_crop": 18, "header": 18, "summari": [18, 68, 69, 117, 242, 254, 255, 256, 268, 269, 270, 276, 286, 287, 562, 578, 582, 600, 636, 667], "q": [18, 145, 673, 685, 686, 701, 703, 730, 732], "array_api_test": 18, "test_creation_funct": 18, "test_arang": 18, "window": [18, 20, 673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "variou": [18, 113, 114, 120, 144], "valu": [18, 48, 49, 56, 57, 68, 69, 70, 71, 72, 93, 94, 113, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 171, 172, 173, 186, 187, 194, 195, 198, 200, 201, 203, 204, 242, 245, 254, 255, 256, 276, 285, 316, 317, 323, 324, 327, 329, 332, 337, 340, 342, 345, 351, 354, 387, 390, 404, 407, 408, 411, 420, 423, 424, 427, 428, 431, 432, 435, 448, 451, 452, 455, 492, 493, 494, 497, 503, 506, 507, 510, 511, 514, 519, 522, 553, 557, 558, 561, 562, 574, 575, 577, 578, 583, 589, 590, 591, 594, 600, 603, 607, 617, 618, 619, 620, 621, 622, 635, 636, 637, 640, 642, 644, 646, 655, 657, 668, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 718, 720, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 752, 754, 774, 775, 778, 784, 785, 786, 787, 800, 803, 804, 807, 830, 832, 833, 834, 835, 836, 838, 842, 843, 844, 845, 846, 851, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 871, 873, 874, 875, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 961, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 981], "cpu": [18, 68, 69, 124, 145, 171, 200, 201, 203, 204, 276, 292, 293, 295, 309, 312, 314, 318, 319, 321, 322, 562, 590, 591, 594, 615, 618, 619, 861, 862, 863, 864, 866, 867, 869, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "gpu": [18, 97, 98, 124, 130, 145, 276, 292, 295, 308, 310, 314, 316, 321, 863, 865], "combin": [18, 68, 69, 70, 71, 72, 115, 117, 118, 121, 122, 133, 686, 692, 694], "wherebi": [19, 122, 838, 850], "broad": 19, "distribut": [19, 68, 69, 117, 124, 145, 276, 294, 298, 299, 300, 301, 673, 681, 758, 759, 762, 764, 767, 769, 772, 861, 862, 863, 864, 866, 867, 869, 961, 969, 973, 974], "across": [19, 68, 69, 113, 115, 117, 118, 122, 123, 276, 283, 284, 294, 295, 297, 298, 299, 300, 301, 305, 315, 316, 562, 570, 571, 838, 844, 873, 875], "todo": 19, "commit": [19, 117], "NOT": [19, 323, 480, 483], "static": [19, 66, 67, 68, 69, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 97, 98, 101, 102, 103, 104, 107, 108, 109, 110, 114, 115, 118, 145, 162, 166, 168, 169, 248, 252, 324, 328, 337, 341, 346, 350, 548, 549, 553, 554, 563, 567, 591, 595, 687, 691, 775, 779, 808, 812, 863, 865, 880, 881], "method": [19, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 112, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 175, 176, 181, 182, 189, 190, 192, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 323, 324, 325, 326, 328, 337, 338, 339, 341, 342, 345, 346, 347, 348, 350, 363, 366, 383, 386, 387, 388, 389, 390, 395, 398, 420, 421, 422, 423, 432, 435, 452, 455, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 553, 554, 555, 556, 557, 562, 563, 564, 565, 567, 578, 579, 590, 591, 592, 593, 595, 618, 619, 630, 632, 636, 637, 638, 639, 641, 655, 657, 659, 661, 672, 673, 679, 685, 686, 687, 688, 689, 691, 692, 694, 695, 697, 758, 759, 762, 774, 775, 776, 777, 779, 788, 791, 792, 795, 800, 803, 808, 809, 810, 812, 813, 822, 825, 838, 839, 849, 850, 851, 856, 857, 860, 861, 863, 865, 866, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935, 942, 961, 972, 973, 974], "instanc": [19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 101, 102, 109, 110, 113, 114, 115, 117, 118, 121, 123, 125, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 248, 249, 250, 251, 276, 283, 314, 323, 324, 325, 326, 327, 337, 338, 339, 340, 342, 345, 346, 347, 348, 349, 363, 366, 383, 386, 387, 388, 389, 390, 395, 398, 420, 421, 422, 423, 432, 435, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 550, 551, 552, 553, 555, 556, 557, 562, 563, 564, 565, 579, 590, 591, 592, 593, 606, 630, 632, 637, 638, 639, 641, 673, 676, 679, 685, 686, 687, 688, 689, 690, 692, 694, 695, 697, 698, 700, 758, 759, 762, 774, 775, 776, 777, 788, 791, 792, 795, 800, 803, 808, 809, 810, 811, 813, 822, 825, 856, 857, 860, 861, 866, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 931, 932, 935, 953, 954], "revers": [19, 70, 71, 114, 115, 133, 145, 562, 583, 774, 792, 795], "resourc": 19, "content": [19, 20, 68, 69, 125, 128, 131], "thei": [19, 68, 69, 111, 112, 115, 117, 118, 120, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145, 242, 266, 834, 835, 836, 861, 862, 942, 983, 984], "hypothesi": 19, "cover": [19, 114, 115, 117, 118, 120, 127], "lambda": [19, 128, 131, 977, 980, 982], "direct": [19, 132, 133, 144, 887, 893, 896], "bind": [19, 122], "def": [19, 112, 113, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 942], "special": [19, 70, 71, 112, 113, 114, 115, 121, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 383, 386, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 898, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930], "aforement": 19, "categori": [19, 112, 121, 122, 123, 127, 942], "parent": [19, 130, 636, 672], "arraywithelementwis": [19, 34, 121], "containerwithmanipul": [19, 70, 71, 93], "hint": [19, 112, 113, 114, 118, 121, 125, 126, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935], "its": [19, 20, 114, 117, 126, 242, 246, 276, 317, 686, 710, 713, 774, 788, 791, 804, 807, 808, 811, 822, 825], "docstr": [19, 20, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 113, 118, 122, 126, 162, 163, 164, 166, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 206, 209, 211, 212, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 248, 249, 250, 251, 252, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 363, 366, 383, 386, 387, 388, 389, 390, 395, 398, 420, 421, 422, 423, 452, 455, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 563, 564, 565, 567, 591, 592, 593, 595, 637, 638, 639, 641, 686, 687, 688, 689, 691, 695, 697, 698, 700, 774, 775, 776, 777, 779, 788, 791, 792, 795, 808, 809, 810, 811, 812, 863, 865, 878, 879, 880, 881, 882, 883, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935], "thorough": [19, 113, 114, 117], "transpil": [19, 127, 129, 942, 948], "builder": [20, 143, 145, 942], "maco": 20, "ubuntu": 20, "uid": 20, "make_docs_without_dock": 20, "rel": [20, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 686, 698, 700, 718, 720, 727, 729, 746, 748, 774, 792, 795, 808, 811, 887, 888, 891, 893, 896, 942], "synchron": 20, "rest": [20, 129, 133], "remove_doc": 20, "_": [20, 114, 122, 125, 130, 131, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 636, 637, 640, 642, 644, 686, 698, 700, 755, 757, 774, 788, 791, 808, 811, 878, 879, 887, 888, 891, 898, 903, 906], "indic": [20, 36, 37, 68, 69, 81, 82, 126, 129, 133, 156, 161, 323, 523, 526, 562, 590, 591, 592, 593, 594, 595, 602, 615, 618, 619, 673, 674, 675, 676, 677, 678, 679, 680, 686, 752, 754, 774, 808, 811, 838, 839, 841, 843, 845, 846, 847, 849, 852, 853, 854, 855, 856, 857, 860, 861, 862, 873, 874, 875, 876, 878, 879, 885, 887, 888, 891, 893, 896, 942, 945, 947, 961, 962, 963, 964, 965, 966, 967, 968, 973, 974], "privat": [20, 117, 977, 981], "fulfil": [20, 127, 942], "autogenerated_sourc": 20, "format": [20, 68, 69, 111, 114, 123, 124, 128, 130, 131, 242, 257, 276, 293, 898, 899, 902, 942], "png": [20, 131], "_imag": 20, "lastli": 20, "structur": [20, 68, 69, 70, 71, 72, 112, 118, 121, 122, 131, 132, 562, 578, 838, 851], "rst": 20, "skip": [20, 68, 69, 117, 838, 851], "read": [20, 68, 69, 942], "partial_sourc": 20, "conf": 20, "copi": [20, 28, 29, 68, 69, 73, 74, 114, 119, 123, 128, 130, 131, 144, 145, 171, 175, 176, 177, 178, 179, 189, 192, 242, 245, 276, 318, 562, 579, 631, 632, 774, 804, 807, 838, 840, 887, 893, 896], "create_rst_fil": 20, "filter": [20, 117, 673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "repres": [20, 117, 130, 171, 206, 209, 242, 258, 323, 333, 336, 337, 340, 346, 349, 359, 362, 395, 398, 494, 497, 531, 534, 553, 557, 636, 672, 673, 682, 686, 733, 734, 736], "overal": [20, 114, 122, 123, 124, 133], "markup": 20, "6": [20, 34, 35, 38, 39, 48, 49, 70, 71, 79, 80, 81, 82, 97, 98, 115, 117, 119, 122, 130, 131, 132, 156, 158, 159, 161, 171, 195, 198, 276, 295, 311, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 349, 363, 366, 367, 370, 383, 386, 387, 388, 389, 390, 395, 398, 420, 423, 432, 435, 452, 455, 492, 493, 499, 502, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 571, 580, 590, 591, 594, 595, 625, 630, 636, 637, 638, 640, 673, 676, 679, 680, 685, 686, 692, 694, 695, 697, 698, 700, 724, 726, 737, 739, 743, 745, 758, 759, 762, 769, 772, 774, 775, 776, 778, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 811, 813, 822, 825, 856, 857, 860, 861, 862, 863, 864, 865, 873, 874, 877, 878, 879, 880, 884, 898, 899, 902, 903, 906], "extract": [20, 112], "get_functions_and_class": 20, "doctr": 20, "readm": [20, 145], "module_nam": 20, "copy_readme_to_rst": 20, "tabl": 20, "toc": 20, "tree": 20, "append": [20, 68, 69, 117, 128, 131, 323, 371, 374, 686, 698, 700, 710, 713], "append_toctree_to_rst": 20, "9": [20, 34, 35, 38, 39, 48, 49, 70, 71, 79, 80, 83, 84, 97, 98, 115, 117, 131, 132, 323, 337, 338, 339, 340, 341, 346, 349, 363, 366, 367, 370, 492, 493, 519, 522, 535, 538, 539, 542, 562, 590, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 673, 676, 679, 680, 686, 692, 694, 695, 697, 698, 700, 724, 726, 737, 739, 743, 745, 774, 775, 776, 778, 792, 795, 800, 803, 808, 811, 813, 861, 862, 863, 864, 865, 873, 877, 878, 879, 898, 899, 902, 977, 978, 979], "index": [20, 28, 29, 68, 69, 73, 74, 118, 122, 130, 170, 171, 186, 187, 206, 207, 208, 209, 210, 276, 314, 562, 568, 590, 591, 594, 774, 818, 821, 838, 841, 842, 845, 846, 847, 852, 854, 873, 874, 875, 876, 878, 879, 880, 884, 887, 888, 891, 945, 947], "create_index_rst": 20, "14": [20, 97, 98, 115, 117, 122, 323, 346, 349, 383, 386, 636, 637, 640, 673, 685, 686, 698, 700, 724, 726, 863, 865, 878, 879, 898, 899, 902], "\u03c0": [20, 323, 329, 332, 342, 345, 351, 354, 355, 358], "namespac": [20, 112, 123, 128, 133], "arraywithactiv": 21, "abc": [21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 130, 276, 283, 288, 562, 587, 973, 974, 977, 981], "softplu": [21, 22, 66, 67, 156, 166, 942], "variant": [21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 114, 115, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 567, 591, 592, 593, 595, 637, 638, 639, 641, 687, 688, 689, 691, 775, 776, 777, 779, 808, 809, 810, 812, 863, 865, 880, 881, 882, 883], "wrap": [21, 22, 23, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 110, 111, 113, 114, 117, 118, 119, 121, 122, 123, 124, 125, 128, 130, 133, 145, 146, 154, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 562, 563, 564, 565, 567, 573, 591, 592, 593, 595, 636, 637, 638, 639, 641, 671, 687, 688, 689, 691, 775, 776, 777, 779, 808, 809, 810, 812, 863, 865, 880, 881, 882, 883], "minim": [21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 114, 125, 128, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 250, 252, 324, 325, 326, 328, 337, 338, 339, 341, 346, 347, 348, 350, 387, 388, 389, 420, 421, 422, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 567, 591, 592, 593, 595, 637, 638, 639, 641, 687, 688, 689, 691, 775, 776, 777, 779, 808, 809, 810, 812, 863, 865, 880, 881, 882, 883], "collect": [23, 68, 69, 117, 144, 156, 168, 276, 562, 636, 673, 758, 838, 851, 856, 861, 950, 961, 975, 977], "args_to_ivi": 23, "include_deriv": [23, 24, 25, 26, 27, 838, 840, 850], "keyword": [23, 24, 25, 68, 69, 70, 71, 72, 112, 113, 117, 123, 124, 125, 131, 171, 206, 209, 276, 283, 284, 297, 301, 305, 562, 569, 612, 838, 844, 898, 923, 926, 973, 974], "variabl": [23, 24, 25, 26, 27, 68, 69, 70, 71, 113, 114, 117, 119, 122, 123, 125, 126, 131, 132, 133, 145, 562, 572, 604, 605, 606, 607, 608, 609, 611, 628, 636, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 668, 671, 673, 684, 686, 734, 736, 834, 835, 836, 837, 856, 857, 860, 942, 953, 954, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "nest": [23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 112, 117, 118, 121, 122, 130, 131, 132, 145, 276, 297, 301, 305, 562, 630, 636, 672, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 973, 974, 977, 978, 979, 980, 981, 982], "unchang": [23, 24, 25, 26, 27], "posit": [23, 24, 25, 34, 35, 79, 80, 113, 117, 131, 144, 170, 171, 186, 187, 242, 259, 276, 297, 301, 305, 323, 324, 327, 436, 439, 440, 443, 494, 497, 515, 518, 562, 589, 686, 687, 690, 774, 788, 791, 808, 811, 861, 871, 873, 876, 931, 932, 935, 937, 940, 953, 954], "bool": [23, 24, 25, 26, 27, 30, 31, 68, 69, 109, 110, 115, 122, 123, 125, 126, 133, 168, 169, 171, 194, 242, 245, 248, 249, 251, 254, 255, 256, 257, 260, 263, 264, 265, 275, 276, 292, 293, 308, 317, 320, 323, 363, 366, 367, 370, 375, 378, 383, 386, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 476, 479, 480, 483, 484, 487, 503, 506, 562, 563, 566, 570, 571, 580, 583, 587, 589, 599, 601, 606, 608, 609, 610, 611, 624, 634, 635, 636, 668, 672, 686, 687, 690, 714, 716, 737, 739, 752, 754, 774, 813, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 850, 861, 862, 873, 874, 875, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "deriv": [23, 24, 25, 26, 27, 123, 124, 130, 132, 171, 181, 184, 195, 198, 219, 222, 237, 241, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 838, 840, 850, 973, 977, 981, 983], "tupl": [23, 24, 25, 26, 27, 44, 45, 56, 57, 68, 69, 112, 113, 117, 122, 123, 124, 126, 130, 131, 132, 145, 171, 175, 178, 180, 194, 211, 214, 216, 217, 234, 236, 242, 247, 261, 276, 292, 562, 589, 625, 673, 676, 679, 680, 683, 686, 718, 720, 727, 729, 737, 738, 739, 743, 745, 752, 754, 774, 780, 783, 784, 787, 792, 795, 796, 799, 804, 807, 808, 811, 814, 817, 818, 821, 830, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 849, 850, 852, 853, 854, 855, 861, 866, 867, 869, 873, 876, 878, 879, 880, 882, 884, 885, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "kei": [23, 24, 25, 68, 69, 70, 71, 72, 117, 122, 126, 131, 276, 285, 562, 568, 578, 673, 684, 685, 834, 835, 836, 838, 841, 847, 851, 953, 954, 961, 972, 977, 981], "word": [23, 24, 25, 171, 172, 173, 861, 867, 869, 953, 954], "args_to_n": [23, 125, 130], "to_ivi": [23, 68, 69, 130, 838, 851], "input": [23, 26, 27, 38, 39, 68, 69, 70, 71, 72, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 246, 247, 248, 251, 253, 254, 255, 256, 257, 258, 264, 265, 266, 267, 271, 276, 283, 284, 292, 293, 294, 295, 297, 298, 301, 305, 311, 317, 318, 323, 324, 327, 328, 329, 332, 333, 336, 337, 340, 341, 342, 345, 346, 349, 350, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 549, 552, 553, 554, 557, 558, 561, 562, 563, 566, 567, 568, 570, 571, 572, 574, 575, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 599, 601, 602, 604, 605, 606, 608, 609, 610, 611, 615, 618, 619, 624, 625, 628, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 646, 651, 653, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 779, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 976], "leaf": [23, 26, 27, 68, 69, 118, 122, 131, 838, 839, 848, 849], "union": [23, 26, 27, 36, 37, 44, 45, 68, 69, 112, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 289, 290, 291, 292, 293, 295, 298, 299, 300, 301, 306, 312, 314, 316, 317, 318, 319, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 566, 570, 571, 574, 575, 577, 580, 581, 584, 585, 586, 588, 589, 590, 591, 592, 594, 599, 601, 602, 604, 605, 606, 615, 618, 619, 624, 625, 630, 631, 632, 634, 635, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 849, 850, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "nativearrai": [23, 26, 27, 28, 29, 36, 37, 112, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 181, 184, 195, 198, 200, 201, 203, 204, 206, 209, 211, 212, 214, 219, 222, 224, 228, 229, 233, 237, 241, 242, 245, 246, 247, 248, 251, 257, 259, 262, 264, 265, 267, 271, 276, 292, 293, 295, 311, 317, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 563, 564, 566, 570, 571, 574, 575, 577, 579, 580, 581, 584, 585, 586, 588, 589, 590, 591, 592, 594, 599, 601, 602, 604, 605, 606, 615, 618, 619, 624, 625, 630, 631, 632, 634, 635, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 838, 840, 850, 856, 857, 860, 861, 862, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "travers": [23, 26, 27, 68, 69, 122, 128, 130, 838, 850], "lowest": [23, 26, 27, 68, 69, 118, 145, 838, 850, 861, 863, 864], "leav": [23, 26, 27, 68, 69, 70, 71, 113, 114, 115, 117, 118, 122, 123, 125, 131, 132, 774, 818, 821, 838, 839, 840, 848, 849, 850], "to_n": [23, 68, 69], "item": [23, 27, 64, 65, 68, 69, 123, 128, 130, 131, 133, 242, 254, 276, 283, 284, 285, 292, 294, 296, 298, 300, 304, 562, 578, 600, 626, 627, 838, 843, 844, 845, 846, 850, 854, 855, 942, 973, 974], "arraywithcr": 28, "asarrai": [28, 29, 73, 74, 117, 125, 171, 673, 674, 878, 880, 884], "dtype": [28, 29, 30, 31, 60, 61, 68, 69, 73, 74, 75, 76, 105, 106, 112, 115, 117, 118, 123, 124, 126, 130, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 313, 323, 379, 382, 562, 570, 571, 615, 631, 673, 681, 774, 788, 791, 856, 857, 860, 861, 867, 869, 873, 874, 875, 887, 893, 896, 898, 915, 916, 917, 918, 919, 922, 923, 924, 925, 926, 931, 932, 935, 942, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 983, 984], "empty_lik": [28, 29, 73, 74, 171], "from_dlpack": [28, 29, 73, 74, 171], "full_lik": [28, 29, 73, 74, 171], "fill_valu": [28, 29, 73, 74, 123, 171, 194, 195, 196, 197, 198, 199, 323, 432, 435, 452, 455], "meshgrid": [28, 29, 73, 74, 171], "xy": [28, 29, 73, 74, 171, 206, 207, 208, 209, 210], "ones_lik": [28, 29, 73, 74, 133, 171, 942], "tril": [28, 29, 73, 74, 171], "k": [28, 29, 73, 74, 111, 128, 171, 186, 187, 188, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 562, 570, 673, 685, 686, 710, 713, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748, 861, 866, 867, 869, 873, 876], "triu": [28, 29, 73, 74, 171], "zeros_lik": [28, 29, 73, 74, 171, 774, 775, 778, 942], "creation": [29, 68, 69, 70, 71, 72, 74, 112, 117, 123, 124, 128, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241], "data_typ": [30, 31, 75, 76, 112, 117, 123, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "arraywithdatatyp": 30, "can_cast": [30, 31, 75, 76, 118, 123, 242, 252], "float32": [30, 31, 75, 76, 115, 117, 123, 242, 243, 244, 248, 249, 250, 251, 252, 260, 856, 857, 860], "float64": [30, 31, 117, 123, 242, 245, 248, 249, 251, 260], "true": [30, 31, 36, 37, 44, 45, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 122, 123, 125, 126, 128, 130, 131, 132, 133, 156, 157, 162, 164, 166, 168, 169, 171, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 201, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 242, 245, 248, 249, 250, 251, 252, 276, 292, 309, 313, 314, 323, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 355, 357, 359, 361, 363, 365, 366, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 386, 387, 389, 391, 393, 395, 397, 399, 401, 403, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 483, 484, 486, 487, 488, 490, 494, 496, 498, 499, 501, 503, 505, 506, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 575, 576, 580, 587, 589, 591, 593, 595, 601, 602, 609, 624, 630, 632, 635, 636, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 681, 686, 687, 689, 690, 691, 710, 712, 714, 716, 737, 738, 739, 752, 754, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 813, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 835, 836, 837, 838, 839, 848, 849, 851, 857, 859, 861, 862, 867, 868, 870, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 905, 906, 907, 909, 910, 911, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 939, 940, 941, 961, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "arraywithdevic": [32, 130], "ab": [34, 35, 79, 80, 117, 120, 323, 328, 511, 514, 686, 752, 754, 942], "y": [34, 35, 36, 37, 44, 45, 48, 49, 56, 57, 70, 71, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 101, 102, 112, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 165, 167, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 237, 241, 242, 245, 276, 293, 307, 311, 316, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 355, 358, 363, 366, 367, 370, 379, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 398, 412, 415, 420, 421, 422, 423, 432, 435, 452, 455, 492, 493, 499, 502, 503, 506, 519, 522, 535, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 570, 571, 579, 580, 587, 588, 590, 591, 592, 593, 594, 595, 624, 630, 631, 632, 636, 646, 673, 679, 680, 682, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 707, 709, 724, 726, 743, 745, 746, 748, 758, 759, 762, 764, 767, 769, 772, 774, 775, 776, 777, 778, 779, 780, 783, 788, 791, 792, 795, 800, 803, 804, 807, 808, 809, 810, 811, 812, 813, 822, 825, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 887, 888, 891, 898, 899, 902, 903, 906, 919, 922, 923, 926, 931, 932, 935], "aco": [34, 35, 79, 80, 323, 942], "acosh": [34, 35, 79, 80, 242, 260, 261, 323, 942], "x2": [34, 35, 36, 37, 44, 45, 68, 69, 79, 80, 81, 82, 89, 90, 113, 115, 242, 271, 276, 311, 323, 337, 338, 339, 340, 341, 355, 356, 357, 358, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 399, 400, 401, 402, 403, 404, 405, 406, 407, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 449, 450, 451, 452, 453, 454, 455, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 511, 512, 513, 514, 515, 516, 517, 518, 543, 544, 545, 546, 547, 562, 563, 564, 565, 566, 567, 673, 678, 686, 692, 693, 694, 710, 711, 712, 713, 724, 725, 726, 734, 735, 736, 743, 744, 745, 749, 750, 751, 873, 877], "z": [34, 35, 36, 37, 70, 71, 79, 80, 81, 82, 115, 119, 122, 128, 130, 276, 307, 323, 337, 338, 339, 340, 341, 363, 366, 383, 386, 432, 435, 452, 455, 492, 493, 562, 570, 571, 590, 591, 592, 593, 595, 624, 686, 692, 694, 758, 759, 762, 764, 767, 774, 775, 778, 873, 874, 898, 899, 902, 903, 906], "asin": [34, 35, 79, 80, 323, 942], "asinh": [34, 35, 79, 80, 323, 350, 942], "881": [34, 35, 79, 80, 156, 160, 323, 346, 347, 348, 349], "82": [34, 35, 346, 347], "atan": [34, 35, 79, 80, 323, 942], "atan2": [34, 35, 79, 80, 323, 942], "atanh": [34, 35, 79, 80, 323, 942], "bitwise_and": [34, 35, 79, 80, 323], "bitwise_invert": [34, 35, 79, 80, 323], "bitwise_left_shift": [34, 35, 79, 80, 323], "bitwise_or": [34, 35, 79, 80, 323], "bitwise_right_shift": [34, 35, 79, 80, 323], "bitwise_xor": [34, 35, 79, 80, 323], "ceil": [34, 35, 79, 80, 171, 172, 173, 323, 942], "cosh": [34, 35, 79, 80, 323, 942], "divid": [34, 35, 68, 69, 79, 80, 115, 121, 323, 424, 427, 562, 626, 774, 813], "equal": [34, 35, 68, 69, 79, 80, 115, 122, 123, 171, 186, 187, 194, 195, 198, 242, 245, 323, 371, 374, 379, 382, 436, 439, 440, 443, 511, 514, 519, 522, 562, 563, 566, 570, 571, 686, 698, 700, 718, 720, 727, 729, 774, 775, 778, 784, 787, 813, 830, 833, 861, 867, 869, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896, 898, 907, 910, 919, 922, 923, 926, 927, 930], "erf": [34, 35, 79, 80, 323], "exp": [34, 35, 79, 80, 323, 416, 419, 472, 475, 942], "expm1": [34, 35, 79, 80, 323], "floor": [34, 35, 79, 80, 323, 379, 382, 562, 588, 942], "floor_divid": [34, 35, 79, 80, 323], "greater": [34, 35, 68, 69, 79, 80, 323, 329, 332, 342, 345, 355, 358, 371, 374, 379, 382, 420, 423, 424, 427, 511, 514, 515, 518, 523, 526, 558, 561, 686, 692, 694, 774, 814, 817, 861, 867, 869], "greater_equ": [34, 35, 79, 80, 323], "isfinit": [34, 35, 79, 80, 117, 323], "isinf": [34, 35, 79, 80, 323], "isnan": [34, 35, 79, 80, 323], "less_equ": [34, 35, 79, 80, 323], "log10": [34, 35, 79, 80, 323], "log1p": [34, 35, 79, 80, 323], "log2": [34, 35, 79, 80, 323], "logaddexp": [34, 35, 79, 80, 323], "logical_and": [34, 35, 79, 80, 323, 942], "logical_not": [34, 35, 79, 80, 323, 942], "logical_or": [34, 35, 79, 80, 323, 942], "logical_xor": [34, 35, 79, 80, 323], "multipli": [34, 35, 79, 80, 115, 119, 121, 323, 562, 580], "neg": [34, 35, 79, 80, 118, 122, 125, 156, 158, 171, 172, 173, 186, 187, 323, 436, 439, 440, 443, 494, 497, 511, 514, 515, 518, 686, 737, 739, 749, 751, 752, 754, 774, 792, 795, 808, 811, 931, 932, 935, 937, 940], "not_equ": [34, 35, 79, 80, 323], "pow": [34, 35, 79, 80, 323], "remaind": [34, 35, 68, 69, 79, 80, 323, 562, 588, 774, 813], "sin": [34, 35, 79, 80, 121, 128, 323, 562, 589, 942], "sinh": [34, 35, 79, 80, 323, 942], "sqrt": [34, 35, 79, 80, 323, 686, 752, 754], "squar": [34, 35, 79, 80, 117, 323, 535, 538, 673, 676, 686, 687, 690, 695, 697, 701, 703, 704, 706, 707, 709, 717, 733, 734, 736, 737, 739], "subtract": [34, 35, 79, 80, 115, 121, 323], "tan": [34, 35, 79, 80, 113, 114, 118, 122, 125, 128, 323, 342, 345, 346, 349, 549, 686, 698, 700, 878, 879, 887, 888, 891, 942], "56": [34, 35, 79, 80, 115, 323, 535, 538, 548, 549, 550, 551, 552, 636, 637, 640, 686, 724, 726, 898, 899, 902], "19": [34, 35, 79, 80, 115, 323, 346, 348, 350, 383, 386, 548, 549, 550, 551, 552, 686, 698, 700], "tanh": [34, 35, 79, 80, 128, 156, 323, 554, 942], "762": [34, 35, 79, 80, 156, 167, 323, 553, 555, 556, 557], "964": [34, 35, 79, 80, 156, 167, 323, 553, 555, 556, 557], "trunc": [34, 35, 79, 80, 323], "elementwis": [35, 68, 69, 80, 112, 118, 128, 133, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561], "arraywithgener": [36, 130], "all_equ": [36, 37, 81, 82, 562, 567], "equality_matrix": [36, 37, 81, 82, 562, 563, 564, 565, 566, 567], "x1": [36, 37, 79, 80, 81, 82, 113, 115, 242, 271, 276, 311, 323, 337, 340, 341, 355, 358, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 403, 404, 407, 424, 427, 428, 431, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 492, 493, 494, 497, 498, 503, 506, 511, 514, 515, 518, 543, 544, 547, 562, 563, 564, 565, 566, 567, 570, 673, 678, 686, 692, 694, 710, 713, 724, 726, 734, 736, 743, 745, 749, 751, 873, 877], "mix": [36, 37, 70, 71, 111, 115, 117, 128, 242, 267, 276, 311, 323, 337, 340, 363, 366, 383, 386, 432, 435, 452, 455, 493, 503, 506, 562, 563, 564, 579, 587, 590, 591, 594, 630, 631, 632, 673, 676, 679, 680, 685, 686, 687, 690, 743, 745, 758, 759, 762, 769, 772, 774, 775, 778, 856, 857, 860, 873, 877, 898, 899, 902, 907, 910], "gather_nd": [36, 37, 68, 69, 81, 82, 562, 595, 942], "arraywithgradi": [38, 130], "adam_step": [38, 39, 83, 84, 636, 641], "mw": [38, 39, 83, 84, 132, 636, 637, 638, 639, 640, 641, 642, 644], "vw": [38, 39, 83, 84, 132, 636, 637, 638, 639, 640, 641, 642, 644], "beta1": [38, 39, 83, 84, 132, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 977, 978, 979], "beta2": [38, 39, 83, 84, 132, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 977, 978, 979], "999": [38, 39, 79, 80, 83, 84, 132, 323, 553, 554, 556, 557, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 977, 978, 979], "epsilon": [38, 39, 46, 47, 50, 51, 83, 84, 91, 92, 95, 96, 118, 122, 125, 132, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 686, 718, 720, 727, 729, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 856, 857, 858, 859, 860, 975, 976, 977, 978, 979], "1e": [38, 39, 46, 47, 50, 51, 83, 84, 91, 92, 95, 96, 118, 122, 125, 132, 133, 562, 598, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 686, 737, 739, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 856, 857, 858, 859, 860, 942, 977, 978, 979, 980, 982], "07": [38, 39, 46, 47, 83, 84, 91, 92, 132, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 656, 657, 658, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 977, 978, 979], "dcdw": [38, 39, 83, 84, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662], "adam_step_delta": [38, 39, 83, 84, 636, 637, 638, 639, 640, 641], "639": [38, 39, 636, 637, 638, 640], "11": [38, 39, 70, 71, 79, 80, 97, 98, 115, 117, 122, 323, 337, 339, 340, 341, 363, 366, 519, 522, 562, 580, 590, 637, 638, 686, 698, 700, 724, 726, 758, 769, 772, 774, 792, 795, 800, 803, 861, 863, 864, 865, 873, 877, 878, 879, 898, 899, 902], "32": [38, 39, 117, 131, 156, 158, 323, 383, 386, 637, 638, 673, 676, 679, 686, 724, 726, 873, 877, 898, 899, 902], "63": [38, 39, 89, 90, 323, 535, 538, 637, 638, 686, 687, 689, 690, 691, 724, 726, 898, 899, 902], "00121": [38, 39, 637, 638], "0102": [38, 39, 637, 638], "0397": [38, 39, 637, 638], "gradient": [39, 68, 69, 84, 112, 122, 131, 132, 144, 145, 276, 317, 637, 640, 642, 644, 646, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 668, 669, 670, 671, 672, 834, 835, 836, 837, 942, 977, 978, 979, 980, 981, 982], "arraywithimag": [40, 130], "arraywithlay": 42, "linear_algebra": [44, 45, 89, 90, 112, 130, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757], "arraywithlinearalgebra": 44, "choleski": [44, 45, 89, 90, 686, 691], "upper": [44, 45, 68, 69, 89, 90, 117, 171, 186, 187, 229, 233, 686, 687, 688, 689, 690, 691, 730, 732, 861, 867, 869], "625": [44, 45, 686, 687, 688, 690], "25": [44, 45, 122, 323, 535, 538, 539, 542, 686, 687, 688, 690, 698, 700, 707, 709, 758, 764, 767, 856, 857, 860, 898, 899, 902], "cross": [44, 45, 70, 71, 686, 758, 759, 762, 764, 767, 769, 772, 942], "axi": [44, 45, 46, 47, 48, 49, 58, 59, 60, 61, 62, 63, 68, 69, 73, 74, 91, 92, 93, 94, 103, 104, 105, 106, 107, 108, 113, 115, 117, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 171, 200, 201, 202, 203, 204, 205, 276, 277, 280, 285, 298, 299, 300, 301, 302, 303, 304, 305, 317, 562, 580, 581, 590, 634, 686, 692, 693, 694, 698, 700, 749, 750, 751, 752, 753, 754, 758, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 833, 861, 872, 873, 874, 875, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941], "det": [44, 45, 70, 71, 686], "diagon": [44, 45, 70, 71, 171, 186, 187, 224, 228, 229, 233, 686, 746, 748], "offset": [44, 45, 50, 51, 95, 96, 686, 698, 699, 700, 746, 747, 748, 856, 857, 858, 859, 860], "axis1": [44, 45, 48, 49, 93, 94, 686, 698, 699, 700, 774, 822, 823, 824, 825], "axis2": [44, 45, 686, 698, 699, 700], "eigh": [44, 45, 70, 71, 686], "namedtupl": [44, 45, 686, 701, 702, 703, 730, 731, 732, 737, 739, 878, 879, 880, 884], "eigvalsh": [44, 45, 70, 71, 686], "inv": [44, 45, 70, 71, 130, 686, 942], "matmul": [44, 45, 89, 90, 112, 117, 119, 128, 686, 737, 739, 942], "matrix_norm": [44, 45, 68, 69, 686], "ord": [44, 45, 68, 69, 686, 714, 715, 716, 752, 753, 754], "fro": [44, 45, 686, 714, 715, 716], "keepdim": [44, 45, 60, 61, 62, 63, 68, 69, 105, 106, 107, 108, 126, 562, 634, 686, 714, 715, 716, 752, 753, 754, 873, 874, 875, 898, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941], "matrix_rank": [44, 45, 70, 71, 686], "rtol": [44, 45, 686, 718, 719, 720, 727, 728, 729], "matrix_transpos": [44, 45, 70, 71, 130, 686], "outer": [44, 45, 70, 71, 686, 834, 835, 836, 837], "pinv": [44, 45, 70, 71, 686, 942], "qr": [44, 45, 70, 71, 686], "reduc": [44, 45, 68, 69, 130, 276, 317, 562, 585, 686, 730, 731, 732, 873, 874, 875, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "solv": [44, 45, 70, 71, 129, 144, 686], "svd": [44, 45, 70, 71, 686, 942], "full_matric": [44, 45, 686, 737, 738, 739], "svdval": [44, 45, 70, 71, 686], "tensordot": [44, 45, 70, 71, 686], "ax": [44, 45, 48, 49, 68, 69, 93, 94, 112, 115, 117, 123, 130, 276, 317, 562, 580, 686, 714, 716, 734, 736, 743, 744, 745, 752, 754, 774, 784, 787, 792, 795, 796, 797, 798, 799, 808, 811, 814, 817, 822, 825, 830, 833, 873, 874, 875, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "trace": [44, 45, 68, 69, 70, 71, 128, 145, 562, 608, 609, 611, 686], "vecdot": [44, 45, 70, 71, 686], "vector_norm": [44, 45, 68, 69, 686], "vector_to_skew_symmetric_matrix": [44, 45, 70, 71, 686, 942], "arraywithloss": 46, "binary_cross_entropi": [46, 47, 91, 92, 758], "pred": [46, 47, 91, 92, 118, 122, 125, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773], "cross_entropi": [46, 47, 91, 92, 118, 122, 125, 758, 769, 772], "sparse_cross_entropi": [46, 47, 91, 92, 758], "loss": [47, 92, 112, 118, 131, 132, 133, 759, 762, 764, 767, 769, 772, 942], "arraywithmanipul": 48, "clip": [48, 49, 68, 69, 93, 94, 118, 122, 125, 128, 131, 133, 323, 492, 493, 562, 574, 575, 577, 774, 779, 942], "x_min": [48, 49, 68, 69, 93, 94, 128, 133, 774, 775, 776, 777, 778, 779], "x_max": [48, 49, 68, 69, 93, 94, 128, 133, 774, 775, 776, 777, 778, 779], "roll": [48, 49, 93, 94, 113, 122, 774, 775, 776, 812], "concat": [48, 49, 68, 69, 93, 94, 276, 302, 303, 304, 305, 317, 562, 589, 774, 942], "constant_pad": [48, 49, 93, 94, 774], "pad_width": [48, 49, 93, 94, 774, 784, 785, 786, 787, 830, 831, 832, 833], "expand_dim": [48, 49, 93, 94, 128, 131, 774, 942], "flip": [48, 49, 93, 94, 130, 131, 133, 323, 367, 370, 774, 800, 803, 942], "permute_dim": [48, 49, 93, 94, 774], "reshap": [48, 49, 68, 69, 93, 94, 117, 125, 128, 130, 133, 774, 942], "shift": [48, 49, 93, 94, 113, 115, 323, 371, 374, 379, 382, 774, 808, 809, 810, 811, 812], "squeez": [48, 49, 93, 94, 774, 942], "stack": [48, 49, 68, 69, 93, 94, 128, 171, 224, 228, 229, 233, 686, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 717, 718, 720, 721, 723, 727, 729, 730, 732, 737, 739, 740, 742, 746, 748, 774, 838, 839, 848, 849, 942, 961, 970], "swapax": [48, 49, 93, 94, 774], "axis0": [48, 49, 93, 94, 774, 822, 823, 824, 825], "tile": [48, 49, 93, 94, 774, 942], "rep": [48, 49, 93, 94, 774, 826, 827, 828, 829], "zero_pad": [48, 49, 93, 94, 774, 942], "arraywithnorm": 50, "layer_norm": [50, 51, 95, 96, 856], "normalized_idx": [50, 51, 95, 96, 856, 857, 858, 859, 860], "05": [50, 51, 95, 96, 117, 276, 636, 637, 640, 856, 857, 858, 859, 860], "scale": [50, 51, 95, 96, 122, 276, 315, 316, 636, 659, 661, 673, 681, 684, 685, 856, 857, 858, 859, 860, 961, 969, 972, 977, 980], "new_std": [50, 51, 95, 96, 856, 857, 858, 859, 860, 975, 976], "norm": [51, 68, 69, 96, 112, 562, 574, 575, 577, 686, 714, 716, 752, 754, 857, 860, 942, 976, 977, 979], "arraywithrandom": [52, 130], "random": [53, 68, 69, 98, 112, 124, 133, 144, 862, 863, 864, 866, 867, 869, 871, 872, 942], "arraywithsearch": 54, "arraywithset": 56, "unique_count": [56, 57, 101, 102, 878, 881], "uc": [56, 57, 880, 882], "count": [56, 57, 115, 131, 276, 311, 686, 749, 751, 774, 792, 795, 878, 879, 880, 882, 884, 931, 932, 935, 937, 940], "arraywithsort": 58, "argsort": [58, 59, 103, 104, 887], "descend": [58, 59, 103, 104, 686, 737, 739, 740, 742, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897], "sort": [59, 68, 69, 70, 71, 72, 104, 112, 686, 701, 703, 737, 739, 740, 742, 888, 891], "arraywithstatist": 60, "einsum": [60, 61, 105, 106, 898], "equat": [60, 61, 105, 106, 686, 734, 736, 898, 899, 900, 901, 902], "max": [60, 61, 68, 69, 105, 106, 242, 259, 262, 323, 492, 562, 574, 575, 577, 585, 618, 619, 686, 718, 720, 727, 729, 898, 977, 979], "min": [60, 61, 68, 69, 105, 106, 242, 259, 262, 323, 493, 562, 585, 618, 619, 626, 686, 730, 732, 737, 739, 740, 742, 752, 754, 898], "prod": [60, 61, 68, 69, 105, 106, 115, 123, 562, 585, 898], "std": [60, 61, 105, 106, 115, 861, 866, 878, 879, 898], "sum": [60, 61, 68, 69, 105, 106, 118, 122, 123, 125, 128, 276, 302, 303, 304, 305, 317, 323, 337, 340, 472, 475, 562, 581, 585, 618, 619, 673, 685, 686, 737, 739, 746, 748, 752, 754, 898, 899, 902, 919, 922], "var": [60, 61, 105, 106, 109, 110, 115, 128, 834, 835, 836, 898], "statist": [61, 106, 109, 110, 112, 117, 123, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930], "arraywithutil": 62, "util": [63, 108, 112, 124, 276, 306, 932, 935, 937, 940], "add_ivy_array_instance_method": 64, "cl": [64, 65, 109, 110], "to_ignor": [64, 65, 109, 110, 838, 849], "loop": [64, 65, 109, 110, 119, 126, 145, 834, 835, 836, 837], "_wrap_funct": [64, 65, 109, 110, 118, 120], "toi": [64, 65, 109, 110], "arrayexampl": [64, 65], "hasattr": [64, 65, 109, 110, 130], "relu": [64, 65, 70, 71, 131, 132, 156, 157, 158, 942], "softmax": [64, 65, 70, 71, 156, 673, 684, 685, 942], "containerwithactiv": [66, 70, 71], "dict_in": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "queue": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 131, 276, 283, 284, 562, 617, 622], "queue_load_s": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "container_combine_method": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "list_join": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "queue_timeout": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 562], "print_limit": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "key_length_limit": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "print_ind": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "print_line_spac": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "ivyh": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "default_key_color": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "keyword_color_dict": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "rebuild_child_contain": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "types_to_iteratively_nest": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "alphabetical_kei": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "containerbas": [66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 122], "key_chain": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 248, 250, 252, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 494, 496, 498, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 563, 565, 567, 575, 576, 591, 593, 595, 642, 643, 645, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 687, 689, 691, 710, 712, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 777, 779, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 838, 851, 857, 859, 863, 865, 867, 868, 870, 880, 881, 883, 888, 890, 892, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 932, 934, 936, 937, 939, 941], "to_appli": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 248, 250, 252, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 494, 496, 498, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 563, 565, 567, 575, 576, 591, 593, 595, 642, 643, 645, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 687, 689, 691, 710, 712, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 777, 779, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 838, 851, 857, 859, 867, 868, 870, 880, 881, 883, 888, 890, 892, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 932, 934, 936, 937, 939, 941], "prune_unappli": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 248, 250, 252, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 494, 496, 498, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 563, 565, 567, 575, 576, 591, 593, 595, 642, 643, 645, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 687, 689, 691, 710, 712, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 777, 779, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 838, 851, 857, 859, 867, 868, 870, 880, 881, 883, 888, 890, 892, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 932, 934, 936, 937, 939, 941], "map_sequ": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 248, 250, 252, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 359, 361, 367, 369, 387, 389, 391, 393, 395, 397, 399, 401, 403, 408, 410, 412, 414, 416, 418, 420, 422, 436, 438, 440, 442, 444, 446, 456, 458, 460, 462, 464, 466, 468, 470, 480, 482, 494, 496, 498, 499, 501, 507, 509, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 563, 565, 567, 575, 576, 591, 593, 595, 642, 643, 645, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 687, 689, 691, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 777, 779, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 822, 824, 826, 828, 830, 832, 857, 859, 867, 868, 870, 880, 881, 883, 888, 890, 892, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 932, 934, 936, 937, 939, 941], "static_softplu": [66, 67, 162], "__getitem__": [68, 69, 122], "queri": [68, 69, 122, 123, 130, 276, 306, 316, 673, 684, 685, 961, 972], "slice": [68, 69, 562, 590, 591, 594, 838, 847], "chain": [68, 69, 121, 122, 132, 133, 145, 834, 835, 836, 838, 851, 983, 984], "element": [68, 69, 114, 117, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 194, 195, 198, 224, 228, 229, 233, 276, 296, 300, 304, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 570, 571, 574, 575, 577, 580, 581, 588, 602, 631, 632, 636, 672, 673, 681, 686, 692, 694, 701, 703, 710, 713, 730, 732, 737, 739, 774, 775, 778, 792, 795, 800, 803, 808, 811, 813, 814, 817, 861, 862, 873, 876, 877, 878, 879, 880, 884, 885, 886, 887, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 961, 969], "represent": [68, 69, 70, 71, 72, 144, 170, 242, 243, 244, 259, 262, 276, 289, 290, 323, 324, 327, 337, 340, 363, 366, 375, 378, 383, 386, 488, 491, 494, 497, 562, 568, 625, 630], "dictionari": [68, 69, 70, 71, 72, 131, 145, 276, 316], "sequenc": [68, 69, 70, 71, 72, 115, 117, 123, 126, 144, 168, 169, 276, 283, 284, 562, 571, 612, 774, 813, 818, 821, 861, 863, 864, 898, 903, 906, 931, 932, 935, 937, 940, 961, 970, 975, 976, 983, 984], "multiprocess": [68, 69, 70, 71, 72, 131, 145, 276, 283, 562], "asynchron": [68, 69, 70, 71, 72], "size": [68, 69, 70, 71, 72, 117, 130, 131, 171, 200, 201, 203, 204, 276, 315, 316, 317, 562, 618, 624, 673, 685, 686, 698, 700, 714, 716, 724, 726, 730, 732, 737, 739, 749, 751, 774, 788, 791, 808, 811, 813, 814, 817, 861, 862, 866, 867, 869, 873, 874, 876, 931, 932, 935, 937, 940, 961, 962, 963], "dimens": [68, 69, 70, 71, 72, 115, 117, 128, 131, 156, 161, 171, 224, 228, 229, 233, 276, 304, 562, 584, 585, 586, 589, 599, 615, 634, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 687, 690, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748, 749, 751, 752, 754, 758, 764, 767, 769, 772, 774, 780, 783, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 834, 835, 836, 837, 861, 872, 873, 874, 875, 876, 878, 879, 880, 884, 886, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972], "arriv": [68, 69, 70, 71, 72], "timeout": [68, 69, 70, 71, 72, 276, 283, 284, 562, 617, 622], "maximum": [68, 69, 70, 71, 72, 115, 128, 131, 133, 276, 297, 301, 305, 317, 323, 562, 574, 575, 577, 589, 636, 655, 657, 774, 775, 778, 838, 850, 873, 874, 898, 903, 906, 911, 914, 942], "length": [68, 69, 70, 71, 72, 117, 126, 131, 171, 172, 173, 206, 209, 686, 737, 739, 740, 742, 774, 804, 807], "whitespac": [68, 69, 70, 71, 72], "indent": [68, 69, 70, 71, 72, 131], "extra": [68, 69, 70, 71, 72, 115, 120, 121, 128, 636, 646], "newlin": [68, 69, 70, 71, 72, 114], "handl": [68, 69, 70, 71, 72, 111, 113, 117, 118, 120, 122, 123, 124, 125, 132, 145, 168, 169, 276, 289, 290, 291, 292, 293, 307, 311, 312, 319, 322, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 977, 978, 979, 980, 981, 982], "result": [68, 69, 70, 71, 72, 112, 113, 114, 115, 117, 121, 122, 123, 125, 131, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 247, 267, 276, 283, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 581, 584, 585, 586, 588, 590, 591, 594, 602, 615, 618, 619, 636, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 838, 851, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 875, 877, 878, 879, 886, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940, 942], "color": [68, 69, 70, 71, 72, 986, 987], "map": [68, 69, 70, 71, 72, 113, 117, 118, 122, 131, 144, 145, 276, 283, 838, 845, 846, 850, 851, 961, 972], "termcolor": [68, 69, 70, 71, 72], "rebuild": [68, 69, 70, 71, 72], "constructor": [68, 69, 70, 71, 72, 123, 124, 130, 562, 569, 983, 984], "param": [68, 69, 70, 71, 72, 81, 82, 128, 133, 562, 568, 590, 591, 594, 595], "alphabet": [68, 69, 70, 71, 72], "preserv": [68, 69, 70, 71, 72, 117, 133, 145, 636, 668, 774, 792, 795], "__setitem__": [68, 69, 121, 122, 130], "val": [68, 69, 125, 130, 562, 604, 605, 606, 620, 621], "after": [68, 69, 115, 117, 122, 123, 127, 242, 271, 323, 535, 538, 636, 642, 644, 646, 647, 649, 655, 657, 659, 661, 663, 665, 856, 857, 860, 977, 978, 979, 980, 981, 982], "all_fals": [68, 69], "assert_is_bool": [68, 69], "entri": [68, 69, 171, 200, 201, 203, 204, 774, 813, 838, 851], "boolean": [68, 69, 117, 122, 171, 194, 242, 245, 263, 275, 276, 308, 320, 323, 363, 366, 367, 370, 375, 378, 383, 386, 476, 479, 480, 483, 484, 487, 488, 491, 562, 563, 566, 570, 571, 601, 602, 603, 607, 608, 609, 610, 611, 628, 635, 636, 651, 653, 672, 834, 835, 836, 838, 848, 898, 911, 914], "evalu": [68, 69, 122, 323, 412, 415, 416, 419, 456, 459, 460, 463, 464, 467, 468, 471, 499, 502, 523, 526, 539, 542, 838, 839, 848, 849, 931, 932, 935, 937, 940], "assert": [68, 69, 117, 126, 130, 131, 562, 572], "prune": [68, 69, 838, 851, 852, 853], "all_key_chain": [68, 69], "include_empti": [68, 69], "all_tru": [68, 69, 122, 131], "arrays_as_list": [68, 69], "intermedi": [68, 69], "as_arrai": [68, 69, 562, 599, 624], "as_bool": [68, 69], "as_on": [68, 69], "ones": [68, 69, 70, 71, 117, 128, 130, 131, 171, 186, 187, 219, 222, 323, 387, 390, 562, 615, 942], "fill": [68, 69, 171, 180, 194, 195, 198, 216, 217, 219, 222, 234, 236, 237, 241, 861, 863, 864], "as_random_uniform": [68, 69], "low": [68, 69, 97, 98, 128, 861, 863, 864, 865, 867, 868, 869, 870], "uniform": [68, 69, 132, 861, 862, 863, 864, 867, 869, 955, 956, 957, 959], "boundari": [68, 69, 861, 867, 869], "interv": [68, 69, 128, 133, 171, 172, 173, 200, 201, 203, 204, 686, 749, 751, 774, 775, 778, 818, 821, 861, 863, 864, 867, 869, 931, 932, 935, 937, 940], "as_vari": [68, 69, 117], "as_zero": [68, 69], "assert_contains_sub_contain": [68, 69], "sub_cont": [68, 69], "except": [68, 69, 114, 121, 125, 126, 130, 145, 242, 247, 562, 572, 583, 606, 633, 686, 727, 729, 774, 780, 783, 818, 821, 873, 876, 931, 932, 935, 937, 940], "diff": [68, 69, 122, 131], "screen": [68, 69, 131], "assert_contains_sub_structur": [68, 69], "check_shap": [68, 69], "assert_ident": [68, 69], "check_typ": [68, 69], "same_arrai": [68, 69, 131], "arrays_equ": [68, 69, 70, 71, 562], "datatyp": [68, 69, 171, 175, 178, 211, 214, 242, 253, 264, 265, 266], "assert_identical_structur": [68, 69], "at_key_chain": [68, 69], "ignore_key_error": [68, 69], "ignore_non": [68, 69], "at_kei": [68, 69], "ignor": [68, 69, 115, 117, 145, 171, 206, 209, 838, 849, 977, 981], "substr": [68, 69], "clip_min": [68, 69], "clip_max": [68, 69], "minimum": [68, 69, 128, 133, 276, 323, 324, 327, 562, 597, 598, 620, 621, 626, 627, 774, 775, 778, 873, 875, 898, 903, 906, 911, 914, 942], "config": [68, 69, 131, 838, 851], "duplic": [68, 69, 114, 119, 120, 126, 130, 132], "compar": [68, 69, 117, 126, 131, 562, 563, 566, 570, 571, 878, 879, 880, 884, 886, 887, 888, 891, 893, 896], "container_rightmost": [68, 69], "common_key_chain": [68, 69, 122], "properti": [68, 69, 115, 117, 118, 122, 130, 131, 132, 276, 285, 973, 974, 977, 978, 979, 980, 982], "contains_sub_contain": [68, 69], "match": [68, 69, 122, 242, 245, 323, 515, 518, 562, 612], "contains_sub_structur": [68, 69], "create_if_abs": [68, 69], "inplac": [68, 69, 83, 84, 111, 113, 115, 120, 121, 130, 132, 562, 572, 603, 606, 607, 628, 636, 642, 643, 644, 645, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 953, 954, 977, 978, 979, 980, 981, 982], "cutoff_at_depth": [68, 69], "depth_cutoff": [68, 69], "cutoff_at_height": [68, 69], "height_cutoff": [68, 69], "deep_copi": [68, 69, 131], "intern": [68, 69, 114, 117, 121, 122, 124, 125, 276, 636, 671, 838, 839, 848, 849, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 983, 984], "belong": [68, 69, 132], "dev_clon": [68, 69, 276], "dev_dist": [68, 69, 276], "along": [68, 69, 112, 125, 171, 200, 201, 203, 204, 276, 298, 299, 300, 301, 302, 303, 304, 305, 317, 562, 580, 581, 590, 634, 686, 714, 716, 746, 748, 749, 751, 752, 754, 758, 764, 767, 769, 772, 774, 780, 783, 792, 795, 800, 803, 808, 811, 813, 818, 821, 826, 829, 834, 835, 836, 837, 861, 872, 873, 874, 875, 887, 888, 891, 893, 896, 898, 899, 902, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "dev_str": [68, 69], "diff_kei": [68, 69], "detect_key_diff": [68, 69], "detect_value_diff": [68, 69], "detect_shape_diff": [68, 69], "treat": [68, 69, 117, 129, 133, 168, 169], "detect": [68, 69, 113, 117, 126, 131, 132, 838, 839, 849], "container0": [68, 69], "einops_rearrang": [68, 69, 562], "axes_length": [68, 69, 562, 584, 585, 586], "rearrang": [68, 69, 562, 584, 586], "einops_reduc": [68, 69, 562], "reduct": [68, 69, 117, 123, 130, 562, 585, 618, 619, 931, 932, 935, 937, 940, 942], "One": [68, 69, 117, 123, 128, 130, 131, 562, 585, 774, 804, 807, 861, 863, 864], "callabl": [68, 69, 117, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 168, 169, 242, 260, 261, 276, 317, 562, 568, 573, 583, 585, 834, 835, 836, 837, 838, 844, 848, 849, 850], "einops_repeat": [68, 69, 562], "find_sub_contain": [68, 69], "sub_cont_to_find": [68, 69], "exsit": [68, 69], "find_sub_structur": [68, 69], "sub_struc_to_find": [68, 69], "flatten_key_chain": [68, 69, 131, 973, 974], "__": [68, 69, 115, 131], "above_height": [68, 69, 131], "below_depth": [68, 69, 131], "format_key_chain": [68, 69], "format_fn": [68, 69], "string": [68, 69, 119, 123, 124, 126, 128, 131, 242, 243, 244, 257, 263, 275, 276, 289, 290, 291, 292, 306, 312, 318, 319, 322, 562, 582], "from_disk_as_hdf5": [68, 69, 131], "h5_obj_or_filepath": [68, 69], "slice_obj": [68, 69], "load": [68, 69, 145], "disk": [68, 69, 131], "h5py": [68, 69], "hdf5": [68, 69, 131, 973, 974], "h5": [68, 69], "from_disk_as_json": [68, 69, 131], "json_filepath": [68, 69], "json": [68, 69, 131], "dure": [68, 69, 118, 122, 123, 124, 125, 145, 168, 169, 276, 318, 562, 633, 636, 637, 640, 642, 644, 655, 657, 686, 710, 713, 834, 835, 836, 837, 898, 919, 922, 927, 930, 973, 974, 977, 978, 979, 981], "from_disk_as_pickl": [68, 69, 131], "pickle_filepath": [68, 69], "pickl": [68, 69, 122, 131], "from_flat_list": [68, 69], "flat_list": [68, 69], "hierarchi": [68, 69, 131], "flat": [68, 69, 562, 618, 774, 800, 803], "popul": [68, 69, 117, 123, 124, 128, 861, 862, 898, 919, 922, 927, 930], "from_numpi": [68, 69, 131], "gather": [68, 69, 562, 591, 594], "h5_file_s": [68, 69], "batch": [68, 69, 118, 122, 131, 276, 315, 316, 562, 589, 673, 682, 686, 752, 754, 834, 835, 836, 837, 856, 857, 860, 975, 976], "handle_inplac": [68, 69], "prime": [68, 69], "overwritten": [68, 69, 119, 121], "has_kei": [68, 69], "query_kei": [68, 69], "somewher": [68, 69], "has_key_chain": [68, 69], "has_nan": [68, 69, 562], "include_inf": [68, 69, 562, 601, 635], "leafwis": [68, 69], "nan": [68, 69, 112, 114, 117, 170, 242, 245, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 436, 439, 444, 447, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 562, 601, 635, 673, 685, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "well": [68, 69, 117, 125, 132, 133, 144, 562, 601, 686, 734, 736], "inf": [68, 69, 117, 170, 562, 601, 635, 686, 752, 754], "wise": [68, 69, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 323, 324, 327, 329, 332, 337, 340, 342, 345, 351, 354, 355, 358, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 404, 407, 408, 411, 424, 427, 428, 431, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 503, 506, 511, 514, 515, 518, 543, 547, 562, 588, 774, 775, 778], "identical_array_shap": [68, 69], "exclus": [68, 69, 83, 84, 117, 118, 122, 133, 171, 172, 173, 562, 580, 608, 609, 611, 636, 651, 652, 653, 654, 861, 863, 864], "identical_config": [68, 69], "identical_structur": [68, 69], "if_exist": [68, 69], "inplace_upd": [68, 69, 125, 562, 953, 954], "key_chains_contain": [68, 69], "sub_str": [68, 69], "join": [68, 69, 774, 780, 783, 818, 821, 942], "list_stack": [68, 69, 131], "dim": [68, 69, 123, 562, 615, 961, 972], "func": [68, 69, 122, 168, 169, 276, 317, 562, 573, 636, 646, 838, 851], "map_cont": [68, 69], "include_self": [68, 69], "possibi": [68, 69], "matrix": [68, 69, 171, 206, 209, 224, 228, 229, 233, 562, 563, 566, 574, 673, 682, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 713, 714, 716, 717, 718, 720, 721, 723, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748, 755, 757, 961, 971], "integ": [68, 69, 117, 122, 123, 130, 171, 172, 173, 194, 242, 262, 265, 267, 323, 324, 327, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 420, 423, 424, 427, 488, 491, 511, 514, 515, 518, 519, 522, 558, 561, 686, 717, 749, 751, 752, 754, 774, 813, 861, 863, 864, 871, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "flatten": [68, 69, 562, 589, 686, 724, 726, 752, 754, 774, 800, 803, 808, 811, 873, 874, 875, 878, 879, 880, 884, 886], "broadcast": [68, 69, 112, 114, 115, 117, 122, 123, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 245, 246, 247, 276, 318, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 580, 584, 585, 586, 588, 591, 594, 602, 615, 618, 619, 636, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 697, 698, 700, 704, 706, 707, 709, 710, 713, 714, 716, 718, 720, 721, 723, 724, 726, 727, 729, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 759, 762, 764, 767, 769, 772, 774, 775, 778, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 872, 873, 874, 875, 877, 878, 886, 887, 893, 896, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "max_depth": [68, 69, 276, 279, 282, 287, 297, 301, 305, 562, 600, 838, 850], "multi_map": [68, 69, 122], "map_nest": [68, 69, 79, 80, 89, 90, 93, 94, 355, 357, 363, 365, 371, 373, 375, 377, 379, 381, 383, 385, 404, 406, 424, 426, 428, 430, 432, 434, 448, 450, 452, 454, 472, 474, 476, 478, 484, 486, 488, 490, 503, 505, 511, 513, 515, 517, 710, 712, 780, 782, 818, 820], "leftmost": [68, 69, 838, 851], "multi_map_in_static_method": [68, 69, 122], "fn_name": [68, 69], "num_arrai": [68, 69, 117], "overwrite_at_key_chain": [68, 69], "overwrit": [68, 69, 125, 128, 276, 317], "target_dict": [68, 69], "return_dict": [68, 69], "prune_empti": [68, 69], "keep_non": [68, 69], "empti": [68, 69, 70, 71, 121, 123, 124, 171, 172, 173, 636, 672, 898, 919, 922, 923, 926, 931, 932, 935, 937, 940], "prune_key_chain": [68, 69], "key1": [68, 69, 132], "key2": [68, 69], "key3": [68, 69], "prune_key_from_key_chain": [68, 69], "prune_kei": [68, 69], "prune_keys_from_key_chain": [68, 69], "remove_key_length_limit": [68, 69], "remove_print_limit": [68, 69], "reshape_lik": [68, 69], "leading_shap": [68, 69], "return_cont": [68, 69], "restructur": [68, 69], "keep_orig": [68, 69], "transpos": [68, 69, 130, 133, 276, 304, 673, 675, 677, 679, 686, 721, 723, 727, 729, 942, 961, 963, 965, 967], "restructure_key_chain": [68, 69], "keychain_map": [68, 69], "set_at_key_chain": [68, 69], "set_at_kei": [68, 69], "set_framework": [68, 69, 128, 130, 131, 133], "set_ivy_backend": [68, 69], "ivy_backend": [68, 69], "attribut": [68, 69, 114, 122, 123, 129, 130, 131, 132, 242, 259, 260, 261, 262, 276, 313], "show_sub_contain": [68, 69], "sub_cont_or_keychain": [68, 69], "shuffl": [68, 69, 861, 942], "seed_valu": [68, 69, 861, 871], "seed": [68, 69, 70, 71, 861, 942], "shuffle_h5_fil": [68, 69], "dataset": [68, 69, 131, 143, 942], "size_ordered_arrai": [68, 69], "keychain": [68, 69], "smallest": [68, 69, 242, 259, 262, 323, 387, 390], "largest": [68, 69, 144, 242, 259, 262, 686, 737, 739], "slice_kei": [68, 69], "key_slic": [68, 69], "all_depth": [68, 69], "slice_via_kei": [68, 69], "sort_by_kei": [68, 69], "num_or_size_split": [68, 69, 128, 774, 813], "with_remaind": [68, 69, 774, 813], "constitu": [68, 69, 133], "dimension": [68, 69, 171, 172, 173, 186, 187, 206, 209, 686, 692, 694, 695, 697, 710, 713, 718, 720, 724, 726, 727, 729, 749, 751, 752, 754, 774, 813, 873, 874, 875, 876, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "evenli": [68, 69, 171, 172, 173, 200, 201, 203, 204, 774, 813], "store": [68, 69, 114, 119, 121, 122, 128, 130, 131, 132, 562, 589, 636, 671, 686, 746, 748, 774, 813, 973, 974], "stop_gradi": [68, 69, 70, 71, 83, 84, 132, 276, 317, 636, 642, 643, 644, 645, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 834, 835, 836, 837, 942, 977, 978, 979, 980, 981, 982], "preserve_typ": [68, 69, 636, 668], "stop": [68, 69, 73, 74, 128, 145, 171, 172, 173, 174, 200, 201, 202, 203, 204, 205, 276, 288, 317, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 668, 834, 835, 836, 837, 977, 978, 979, 980, 981, 982], "structural_diff": [68, 69], "to_devic": [68, 69, 276, 292], "cuda": [68, 69, 128, 131, 145, 171, 200, 201, 203, 204, 276, 283, 289, 314, 562, 590, 591, 594, 615, 618, 619, 861, 862, 863, 864, 867, 869, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984], "target": [68, 69, 111, 127, 131, 132, 133, 276, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 942], "to_dict": [68, 69], "to_disk_as_hdf5": [68, 69, 131], "starting_index": [68, 69], "max_batch_s": [68, 69], "w": [68, 69, 83, 84, 128, 131, 132, 562, 571, 636, 637, 640, 642, 644, 645, 647, 649, 650, 655, 657, 658, 659, 661, 662, 663, 665, 666, 673, 674, 675, 676, 677, 678, 679, 680], "later": [68, 69, 117, 562, 573], "to_disk_as_json": [68, 69, 131], "to_disk_as_pickl": [68, 69, 131], "to_flat_list": [68, 69], "to_iter": [68, 69, 122], "leaf_keys_onli": [68, 69], "to_iterator_kei": [68, 69], "to_iterator_valu": [68, 69], "to_json": [68, 69], "to_list": [68, 69, 562, 942], "to_multi_dev": [68, 69], "multidevcontain": [68, 69, 70], "distributedarrai": [68, 69], "to_numpi": [68, 69, 131, 562, 942], "update_backend": [68, 69], "to_raw": [68, 69], "raw": [68, 69, 114], "trim_kei": [68, 69], "max_length": [68, 69], "try_kc": [68, 69], "tri": [68, 69], "self": [68, 69, 121, 122, 128, 130, 131, 132, 133, 162, 163, 164, 175, 176, 177, 181, 182, 183, 189, 190, 191, 195, 196, 197, 206, 207, 208, 211, 212, 213, 219, 220, 221, 224, 226, 227, 229, 231, 232, 237, 239, 240, 248, 249, 250, 276, 324, 325, 326, 329, 330, 331, 333, 334, 335, 337, 338, 339, 342, 343, 344, 346, 347, 348, 351, 352, 353, 355, 356, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 490, 494, 495, 496, 499, 500, 501, 503, 504, 505, 507, 508, 509, 511, 512, 513, 515, 516, 517, 519, 520, 521, 523, 524, 525, 527, 528, 529, 531, 532, 533, 535, 536, 537, 539, 540, 541, 543, 545, 546, 548, 550, 551, 553, 555, 556, 558, 559, 560, 563, 564, 565, 575, 576, 591, 592, 593, 637, 638, 639, 642, 643, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 687, 688, 689, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 712, 714, 715, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 759, 760, 761, 764, 765, 766, 769, 770, 771, 775, 776, 777, 780, 781, 782, 784, 785, 786, 788, 789, 790, 792, 793, 794, 796, 797, 798, 800, 801, 802, 804, 805, 806, 808, 809, 810, 814, 815, 816, 818, 819, 820, 822, 823, 824, 826, 827, 828, 830, 831, 832, 857, 858, 859, 867, 868, 880, 882, 883, 888, 889, 890, 893, 894, 895, 899, 900, 901, 903, 904, 905, 907, 908, 909, 911, 912, 913, 915, 916, 917, 919, 920, 921, 923, 924, 925, 927, 928, 929, 932, 933, 934, 937, 938, 939, 942, 977, 981], "arbitrari": [68, 69, 113, 117, 118, 122, 125, 132, 145, 171, 206, 209, 242, 246, 267, 276, 302, 303, 305], "concatten": [68, 69, 276, 302, 303, 304, 305, 317], "unstack": [68, 69, 128, 131, 562, 942], "dim_siz": [68, 69, 276], "update_config": [68, 69], "global_norm": [68, 69, 81, 82, 575, 576], "vector": [68, 69, 144, 171, 206, 209, 562, 575, 577, 673, 682, 686, 692, 694, 701, 703, 710, 713, 724, 726, 737, 739, 740, 742, 749, 751, 752, 754, 755, 757, 961, 971], "with_default_key_color": [68, 69], "with_entries_as_list": [68, 69], "with_ivy_backend": [68, 69], "with_key_length_limit": [68, 69, 131], "with_print_ind": [68, 69, 131], "with_print_limit": [68, 69, 131], "with_print_line_spac": [68, 69], "containerwithcr": [70, 71, 73], "containerwithdatatyp": [70, 71, 75], "containerwithdevic": [70, 71, 77], "containerwithelementwis": [70, 71, 79, 122], "containerwithgener": [70, 71, 81], "containerwithgradi": [70, 71, 83], "containerwithimag": [70, 71, 85], "containerwithlay": [70, 71, 87], "containerwithlinearalgebra": [70, 71, 89], "containerwithloss": [70, 71, 91], "containerwithnorm": [70, 71, 95], "containerwithrandom": [70, 71, 97], "containerwithsearch": [70, 71, 99], "containerwithset": [70, 71, 101], "containerwithsort": [70, 71, 103], "containerwithstatist": [70, 71, 105], "containerwithutil": [70, 71, 107], "__add__": [70, 71, 113, 114, 115, 121, 122, 130], "__radd__": [70, 71, 114, 115], "arang": [70, 71, 123, 171, 200, 201, 203, 204, 898, 899, 902, 942], "arg_info": [70, 71, 562], "arg_nam": [70, 71, 562], "argmax": [70, 71, 873, 942], "argmin": [70, 71, 873, 942], "array_equ": [70, 71, 562], "as_ivy_dev": [70, 71, 130, 276], "as_ivy_dtyp": [70, 71, 242], "as_native_dev": [70, 71, 276], "as_native_dtyp": [70, 71, 242], "assert_supports_inplac": [70, 71, 562], "astyp": [70, 71, 123, 125, 242], "broadcast_arrai": [70, 71, 242], "broadcast_to": [70, 71, 123, 242], "cache_fn": [70, 71, 118, 562], "clear_mem_on_dev": [70, 71, 276], "clip_matrix_norm": [70, 71, 562], "closest_valid_dtyp": [70, 71, 242], "container_typ": [70, 71, 562], "conv1d": [70, 71, 673, 961], "conv1d_transpos": [70, 71, 673], "conv2d": [70, 71, 673, 942, 961], "conv2d_transpos": [70, 71, 673], "conv3d": [70, 71, 673, 961], "conv3d_transpos": [70, 71, 673], "copy_arrai": [70, 71, 562], "cumprod": [70, 71, 133, 562], "cumsum": [70, 71, 562, 942], "current_backend_str": [70, 71, 562], "default_devic": [70, 71, 124, 128, 276, 311, 314, 321], "default_dtyp": [70, 71, 118, 123, 242], "default_float_dtyp": [70, 71, 123, 242], "default_int_dtyp": [70, 71, 123, 242], "depthwise_conv2d": [70, 71, 673, 942], "dev_clone_arrai": [70, 71, 276], "dev_clone_it": [70, 71, 276], "dev_clone_nest": [70, 71, 276], "dev_dist_arrai": [70, 71, 276], "dev_dist_it": [70, 71, 276], "dev_dist_nest": [70, 71, 276], "dev_unifi": [70, 71, 276], "dev_unify_arrai": [70, 71, 276], "dev_unify_it": [70, 71, 276], "dev_unify_nest": [70, 71, 276], "dev_util": [70, 71, 124, 276], "dropout": [70, 71, 131, 673, 961, 972], "dtype_bit": [70, 71, 242], "execute_with_gradi": [70, 71, 122, 131, 132, 133, 145, 636, 942], "ey": [70, 71, 133, 171, 673, 676, 680], "finfo": [70, 71, 242], "floormod": [70, 71, 562, 942], "fourier_encod": [70, 71, 562], "function_supported_dtyp": [70, 71, 242], "function_unsupported_dtyp": [70, 71, 242], "gelu": [70, 71, 156, 950], "get_all_arrays_in_memori": [70, 71, 562], "get_all_ivy_arrays_on_dev": [70, 71, 124, 276], "get_min_bas": [70, 71, 562], "get_min_denomin": [70, 71, 562], "get_num_dim": [70, 71, 562, 942], "get_referrers_recurs": [70, 71, 562], "gpu_is_avail": [70, 71, 276], "handle_nest": [70, 71, 118, 122, 146], "handle_out_argu": [70, 71, 113, 120, 123, 124, 125, 146], "iinfo": [70, 71, 126, 242], "indices_wher": [70, 71, 126, 562, 942], "infer_devic": [70, 71, 113, 123, 124, 146], "infer_dtyp": [70, 71, 113, 123, 124, 146], "inplace_arrays_support": [70, 71, 562], "inplace_decr": [70, 71, 562], "inplace_incr": [70, 71, 562], "inplace_variables_support": [70, 71, 562], "inputs_to_native_arrai": [70, 71, 121, 146], "invalid_dtyp": [70, 71, 242], "is_float_dtyp": [70, 71, 242], "is_int_dtyp": [70, 71, 242, 562, 632], "is_ivy_contain": [70, 71, 562], "leaky_relu": [70, 71, 117, 156, 942], "linear": [70, 71, 114, 128, 131, 132, 133, 156, 157, 158, 159, 562, 589, 673, 681, 734, 736, 942, 961, 962, 963, 964, 965, 966, 967, 968], "linspac": [70, 71, 128, 171, 172, 173, 942], "logspac": [70, 71, 128, 171], "lstm_updat": [70, 71, 128, 673], "match_kwarg": [70, 71, 562], "matrix_pow": [70, 71, 686], "multi_head_attent": [70, 71, 122, 125, 673], "multinomi": [70, 71, 861], "nonzero": [70, 71, 323, 337, 340, 494, 497, 873], "num_arrays_in_memori": [70, 71, 562], "num_cpu_cor": [70, 71, 124, 276], "num_gpu": [70, 71, 117, 124, 276], "num_ivy_arrays_on_dev": [70, 71, 276], "one_hot": [70, 71, 133, 562, 942], "outputs_to_ivy_arrai": [70, 71, 113, 121, 123, 124, 146], "percent_used_mem_on_dev": [70, 71, 276], "print_all_arrays_in_memori": [70, 71, 562], "print_all_ivy_arrays_on_dev": [70, 71, 276], "promote_typ": [70, 71, 242], "randint": [70, 71, 97, 98, 861, 865, 942], "random_norm": [70, 71, 117, 673, 676, 679, 680, 686, 737, 739, 861, 878, 879], "result_typ": [70, 71, 123, 242], "scaled_dot_product_attent": [70, 71, 673], "scatter_flat": [70, 71, 562], "scatter_nd": [70, 71, 130, 562, 942], "set_default_devic": [70, 71, 124, 276, 321], "set_default_dtyp": [70, 71, 118, 123, 242], "set_default_float_dtyp": [70, 71, 123, 242], "set_default_int_dtyp": [70, 71, 123, 242], "set_min_bas": [70, 71, 562], "set_min_denomin": [70, 71, 562], "set_queue_timeout": [70, 71, 562], "set_split_factor": [70, 71, 276], "set_tmp_dir": [70, 71, 562], "set_with_grad": [70, 71, 636, 672], "shape_to_tupl": [70, 71, 123, 562], "sigmoid": [70, 71, 128, 131, 132, 156, 942], "slogdet": [70, 71, 686], "split_factor": [70, 71, 276, 283], "split_func_cal": [70, 71, 276], "stable_divid": [70, 71, 118, 562], "stable_pow": [70, 71, 562], "static_aco": [70, 71], "static_acosh": [70, 71], "static_arg_info": [70, 71], "static_arg_nam": [70, 71], "static_argmax": [70, 71], "static_argmin": [70, 71], "static_arrai": [70, 71], "static_array_equ": [70, 71], "static_arrays_equ": [70, 71], "static_as_ivy_dev": [70, 71], "static_as_ivy_dtyp": [70, 71], "static_as_native_dev": [70, 71], "static_as_native_dtyp": [70, 71], "static_asin": [70, 71], "static_assert_supports_inplac": [70, 71], "static_astyp": [70, 71], "static_atan": [70, 71], "static_atan2": [70, 71], "static_atanh": [70, 71], "static_bitwise_and": [70, 71], "static_bitwise_invert": [70, 71], "static_bitwise_left_shift": [70, 71], "static_bitwise_or": [70, 71], "static_bitwise_right_shift": [70, 71], "static_bitwise_xor": [70, 71], "static_broadcast_arrai": [70, 71], "static_broadcast_to": [70, 71], "static_cache_fn": [70, 71], "static_ceil": [70, 71], "static_clear_mem_on_dev": [70, 71], "static_clip_matrix_norm": [70, 71], "static_clip_vector_norm": [70, 71], "static_closest_valid_dtyp": [70, 71], "static_concat": [70, 71], "static_constant_pad": [70, 71], "static_container_typ": [70, 71], "static_conv1d": [70, 71], "static_conv1d_transpos": [70, 71], "static_conv2d": [70, 71], "static_conv2d_transpos": [70, 71], "static_conv3d": [70, 71], "static_conv3d_transpos": [70, 71], "static_copy_arrai": [70, 71], "static_co": [70, 71], "static_cosh": [70, 71], "static_cross": [70, 71], "static_cumprod": [70, 71], "static_cumsum": [70, 71], "static_current_backend": [70, 71], "static_current_backend_str": [70, 71], "static_default": [70, 71], "static_default_devic": [70, 71], "static_default_dtyp": [70, 71], "static_default_float_dtyp": [70, 71], "static_default_int_dtyp": [70, 71], "static_depthwise_conv2d": [70, 71], "static_det": [70, 71], "static_dev": [70, 71], "static_dev_clon": [70, 71], "static_dev_clone_arrai": [70, 71], "static_dev_clone_it": [70, 71], "static_dev_clone_nest": [70, 71], "static_dev_dist": [70, 71], "static_dev_dist_arrai": [70, 71], "static_dev_dist_it": [70, 71], "static_dev_dist_nest": [70, 71], "static_dev_unifi": [70, 71], "static_dev_unify_arrai": [70, 71], "static_dev_unify_it": [70, 71], "static_dev_unify_nest": [70, 71], "static_dev_util": [70, 71], "static_diagon": [70, 71], "static_dropout": [70, 71], "static_dtyp": [70, 71], "static_dtype_bit": [70, 71], "static_eigh": [70, 71], "static_eigvalsh": [70, 71], "static_einops_rearrang": [70, 71], "static_einops_reduc": [70, 71], "static_einops_repeat": [70, 71], "static_einsum": [70, 71], "static_empti": [70, 71], "static_equ": [70, 71], "static_erf": [70, 71], "static_execute_with_gradi": [70, 71], "static_exist": [70, 71], "static_exp": [70, 71], "static_expand_dim": [70, 71], "static_expm1": [70, 71], "static_finfo": [70, 71], "static_flip": [70, 71], "static_floor": [70, 71], "static_floor_divid": [70, 71], "static_floormod": [70, 71], "static_fourier_encod": [70, 71], "static_ful": [70, 71], "static_function_supported_dtyp": [70, 71], "static_function_unsupported_dtyp": [70, 71], "static_gath": [70, 71], "static_gelu": [70, 71], "static_get_all_arrays_in_memori": [70, 71], "static_get_all_ivy_arrays_on_dev": [70, 71], "static_get_min_bas": [70, 71], "static_get_min_denomin": [70, 71], "static_get_num_dim": [70, 71], "static_get_referrers_recurs": [70, 71], "static_gpu_is_avail": [70, 71], "static_great": [70, 71], "static_greater_equ": [70, 71], "static_handle_nest": [70, 71], "static_handle_out_argu": [70, 71], "static_has_nan": [70, 71], "static_iinfo": [70, 71], "static_indices_wher": [70, 71], "static_infer_devic": [70, 71], "static_infer_dtyp": [70, 71], "static_inplace_arrays_support": [70, 71], "static_inplace_decr": [70, 71], "static_inplace_incr": [70, 71], "static_inplace_upd": [70, 71], "static_inplace_variables_support": [70, 71], "static_inputs_to_native_arrai": [70, 71], "static_inv": [70, 71], "static_invalid_dtyp": [70, 71], "static_is_arrai": [70, 71], "static_is_float_dtyp": [70, 71], "static_is_int_dtyp": [70, 71], "static_is_ivy_arrai": [70, 71], "static_is_ivy_contain": [70, 71], "static_is_native_arrai": [70, 71], "static_isfinit": [70, 71], "static_isinf": [70, 71], "static_isnan": [70, 71], "static_layer_norm": [70, 71], "static_leaky_relu": [70, 71], "static_less": [70, 71], "static_less_equ": [70, 71], "static_linear": [70, 71], "static_log": [70, 71], "static_log10": [70, 71], "static_log1p": [70, 71], "static_log2": [70, 71], "static_logaddexp": [70, 71], "static_logical_and": [70, 71], "static_logical_not": [70, 71], "static_logical_or": [70, 71], "static_logical_xor": [70, 71], "static_lstm_upd": [70, 71], "static_match_kwarg": [70, 71], "static_matmul": [70, 71], "static_matrix_norm": [70, 71], "static_matrix_pow": [70, 71], "static_matrix_rank": [70, 71], "static_matrix_transpos": [70, 71], "static_max": [70, 71], "static_maximum": [70, 71], "static_mean": [70, 71], "static_min": [70, 71], "static_minimum": [70, 71], "static_multi_head_attent": [70, 71], "static_multinomi": [70, 71], "static_multiprocess": [70, 71], "static_neg": [70, 71], "static_nonzero": [70, 71], "static_not_equ": [70, 71], "static_num_arrays_in_memori": [70, 71], "static_num_cpu_cor": [70, 71], "static_num_gpu": [70, 71], "static_num_ivy_arrays_on_dev": [70, 71], "static_one_hot": [70, 71], "static_out": [70, 71], "static_outputs_to_ivy_arrai": [70, 71], "static_percent_used_mem_on_dev": [70, 71], "static_permute_dim": [70, 71], "static_pinv": [70, 71], "static_posit": [70, 71], "static_pow": [70, 71], "static_print_all_arrays_in_memori": [70, 71], "static_print_all_ivy_arrays_on_dev": [70, 71], "static_prod": [70, 71], "static_promote_typ": [70, 71], "static_qr": [70, 71], "static_queue_timeout": [70, 71], "static_random_norm": [70, 71], "static_relu": [70, 71], "static_remaind": [70, 71], "static_repeat": [70, 71], "static_reshap": [70, 71], "static_result_typ": [70, 71], "static_round": [70, 71], "static_scaled_dot_product_attent": [70, 71], "static_scatter_flat": [70, 71], "static_scatter_nd": [70, 71], "static_se": [70, 71], "static_set_default_devic": [70, 71], "static_set_default_dtyp": [70, 71], "static_set_default_float_dtyp": [70, 71], "static_set_default_int_dtyp": [70, 71], "static_set_min_bas": [70, 71], "static_set_min_denomin": [70, 71], "static_set_queue_timeout": [70, 71], "static_set_split_factor": [70, 71], "static_set_tmp_dir": [70, 71], "static_set_with_grad": [70, 71], "static_shap": [70, 71], "static_shape_to_tupl": [70, 71], "static_shuffl": [70, 71], "static_sigmoid": [70, 71], "static_sign": [70, 71], "static_sin": [70, 71], "static_sinh": [70, 71], "static_slogdet": [70, 71], "static_softmax": [70, 71], "static_solv": [70, 71], "static_split": [70, 71], "static_split_factor": [70, 71], "static_split_func_cal": [70, 71], "static_sqrt": [70, 71], "static_squar": [70, 71], "static_squeez": [70, 71], "static_stable_divid": [70, 71], "static_stable_pow": [70, 71], "static_stack": [70, 71], "static_std": [70, 71], "static_stop_gradi": [70, 71], "static_sum": [70, 71], "static_supports_inplac": [70, 71], "static_svd": [70, 71], "static_svdv": [70, 71], "static_swapax": [70, 71], "static_tensordot": [70, 71], "static_til": [70, 71], "static_tmp_dir": [70, 71], "static_to_devic": [70, 71], "static_to_list": [70, 71], "static_to_native_arrays_and_back": [70, 71], "static_to_numpi": [70, 71], "static_to_scalar": [70, 71], "static_total_mem_on_dev": [70, 71], "static_tpu_is_avail": [70, 71], "static_trac": [70, 71], "static_trunc": [70, 71], "static_try_else_non": [70, 71], "static_type_promote_arrai": [70, 71], "static_unique_al": [70, 71], "static_unique_invers": [70, 71], "static_unique_valu": [70, 71], "static_unset_default_devic": [70, 71], "static_unset_default_dtyp": [70, 71], "static_unset_default_float_dtyp": [70, 71], "static_unset_default_int_dtyp": [70, 71], "static_unset_with_grad": [70, 71], "static_unstack": [70, 71], "static_used_mem_on_dev": [70, 71], "static_valid_dtyp": [70, 71], "static_value_is_nan": [70, 71], "static_var": [70, 71], "static_vari": [70, 71], "static_variable_data": [70, 71], "static_vecdot": [70, 71], "static_vector_norm": [70, 71], "static_vector_to_skew_symmetric_matrix": [70, 71], "static_wher": [70, 71], "static_with_grad": [70, 71], "static_zero_pad": [70, 71], "supports_inplac": [70, 71, 562], "tmp_dir": [70, 71, 562], "to_native_arrays_and_back": [70, 71, 113, 120, 146], "to_scalar": [70, 71, 562], "total_mem_on_dev": [70, 71, 124, 276], "tpu_is_avail": [70, 71, 276], "try_else_non": [70, 71, 562], "type_promote_arrai": [70, 71, 242], "unique_al": [70, 71, 878], "unique_invers": [70, 71, 878], "unique_valu": [70, 71, 878], "unset_default_devic": [70, 71, 276], "unset_default_dtyp": [70, 71, 242], "unset_default_float_dtyp": [70, 71, 242], "unset_default_int_dtyp": [70, 71, 242], "unset_with_grad": [70, 71, 636], "used_mem_on_dev": [70, 71, 276], "valid_dtyp": [70, 71, 242], "value_is_nan": [70, 71, 562], "variable_data": [70, 71, 636], "with_grad": [70, 71, 636, 667], "at_dev": [70, 72, 276, 286, 287], "static_arang": [73, 74, 172], "static_asarrai": [73, 74, 175], "static_empty_lik": [73, 74, 181], "static_ey": [73, 74, 186], "n_row": [73, 74, 171, 186, 187, 188], "n_col": [73, 74, 171, 186, 187, 188], "static_from_dlpack": [73, 74, 189], "static_full_lik": [73, 74, 195], "static_linspac": [73, 74, 200], "num": [73, 74, 128, 171, 200, 201, 202, 203, 204, 205], "endpoint": [73, 74, 171, 200, 201, 202, 203, 205], "static_logspac": [73, 74, 203], "static_meshgrid": [73, 74, 206], "static_native_arrai": [73, 74, 211], "static_on": [73, 74, 216], "static_ones_lik": [73, 74, 219], "static_tril": [73, 74, 224], "static_triu": [73, 74, 229], "static_zero": [73, 74, 234], "static_zeros_lik": [73, 74, 237], "int32": [75, 76, 117, 123, 242, 248, 250, 251, 252, 260, 562, 631, 774, 788, 791, 898, 915, 918, 923, 926], "int64": [75, 76, 117, 123, 242, 248, 250, 251, 252, 260, 323, 379, 382, 873, 874, 875, 898, 915, 918, 923, 926], "static_can_cast": [75, 76, 248], "from_": [75, 76, 242, 248, 251, 252], "02": [79, 80, 346, 348, 636, 637, 640], "33": [79, 80, 346, 348, 686, 724, 726, 856, 857, 860, 898, 899, 902], "21": [79, 80, 323, 346, 348, 383, 386, 562, 580, 686, 698, 700, 724, 726, 758, 769, 772, 898, 899, 902], "61": [79, 80, 323, 346, 348, 539, 542, 758, 759, 762], "static_ab": [79, 80, 324], "static_add": [79, 80, 114, 115, 122, 337], "static_asinh": [79, 80, 346], "97": [79, 80, 323, 346, 349, 350], "94": [79, 80, 346, 350], "37": [79, 80, 97, 98, 323, 346, 349, 350, 548, 552, 856, 857, 860, 863, 865], "75": [79, 80, 323, 346, 349, 350, 686, 707, 709, 724, 726], "static_divid": [79, 80, 122, 399], "static_multipli": [79, 80, 122, 494], "static_subtract": [79, 80, 122, 543], "static_tan": [79, 80, 115, 122, 548], "143": [79, 80, 115, 323, 548, 549, 551, 552], "38": [79, 80, 115, 323, 548, 549, 551, 552], "static_tanh": [79, 80, 553], "76": [79, 80, 323, 395, 398, 553, 554, 636, 637, 640, 686, 743, 745, 898, 899, 902], "96": [79, 80, 323, 548, 552, 553, 554, 636, 637, 640, 686, 724, 726, 898, 899, 902], "995": [79, 80, 323, 553, 554, 556, 557], "9999": [79, 80, 553, 554], "static_all_equ": [81, 82, 563, 565], "clip_vector_norm": [81, 82, 562], "max_norm": [81, 82, 562, 574, 575, 576, 577], "static_gather_nd": [81, 82, 591], "adam_upd": [83, 84, 132, 636], "lr": [83, 84, 131, 132, 636, 642, 643, 644, 645, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 977, 978, 979, 980, 981, 982], "mw_tm1": [83, 84, 636, 642, 643, 644, 645, 655, 656, 657, 658], "vw_tm1": [83, 84, 636, 642, 643, 644, 645, 655, 656, 657, 658], "gradient_descent_upd": [83, 84, 636, 834, 835, 836, 837, 942], "is_vari": [83, 84, 125, 636], "lamb_upd": [83, 84, 636], "max_trust_ratio": [83, 84, 636, 655, 656, 657, 658, 977, 979], "decay_lambda": [83, 84, 636, 655, 656, 657, 658, 659, 660, 661, 662, 977, 979, 980], "lars_upd": [83, 84, 636], "optimizer_upd": [83, 84, 636], "effective_grad": [83, 84, 636, 663, 664, 665, 666], "static_adam_step": [83, 84, 637], "87": [83, 84, 97, 98, 636, 637, 640, 641, 863, 865], "976": [83, 84, 323, 553, 557, 636, 637, 640, 641], "static_adam_upd": [83, 84, 642], "static_gradient_descent_upd": [83, 84, 647], "static_is_vari": [83, 84, 651], "static_lamb_upd": [83, 84, 655], "static_lars_upd": [83, 84, 659], "static_optimizer_upd": [83, 84, 663], "73": [89, 90, 117, 323, 535, 538, 686, 687, 689, 690, 691, 856, 857, 860], "577": [89, 90, 686, 687, 689, 690, 691], "41": [89, 90, 130, 323, 383, 386, 535, 538, 686, 687, 689, 690, 691, 898, 923, 926], "707": [89, 90, 686, 687, 689, 690, 691], "static_choleski": [89, 90, 687], "static_rol": [89, 90, 93, 94, 115, 122, 687, 691, 775, 779, 808], "static_binary_cross_entropi": [91, 92, 759], "static_cross_entropi": [91, 92, 764], "static_sparse_cross_entropi": [91, 92, 769], "static_clip": [93, 94, 775], "random_uniform": [97, 98, 117, 124, 132, 861, 942], "static_randint": [97, 98, 863], "20": [97, 98, 130, 323, 383, 386, 412, 415, 519, 522, 535, 538, 686, 698, 700, 724, 726, 743, 745, 861, 863, 864, 865, 873, 876, 877, 898, 899, 902], "40": [97, 98, 323, 395, 398, 535, 538, 686, 724, 726, 863, 865, 898, 899, 902], "62": [97, 98, 863, 865], "52": [97, 98, 636, 637, 640, 686, 724, 726, 863, 865, 878, 879, 898, 899, 902], "95": [97, 98, 636, 637, 640, 863, 865], "42": [97, 98, 133, 156, 162, 165, 636, 637, 640, 686, 724, 726, 861, 863, 865, 871, 898, 899, 902], "13": [97, 98, 115, 117, 122, 323, 363, 366, 383, 386, 395, 398, 535, 538, 562, 580, 636, 637, 640, 673, 685, 686, 698, 700, 724, 726, 856, 857, 860, 863, 865, 873, 877, 878, 879, 898, 899, 902], "static_random_uniform": [97, 98, 867], "static_unique_count": [101, 102, 880], "classivi": [101, 102, 774, 813, 878, 880, 881, 883, 884], "static_argsort": [103, 104, 888], "static_sort": [103, 104, 893], "static_al": [107, 108, 932], "static_ani": [107, 108, 937], "add_ivy_container_instance_method": 109, "containerexampl": [109, 110], "who": [111, 127, 145], "mainli": [111, 129, 131], "under": [111, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [111, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [111, 127], "behind": [111, 117, 127, 129, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665], "tour": 111, "primari": [111, 117, 119, 125, 145], "composit": [111, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [111, 114, 115, 117, 125, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 387, 390, 420, 423, 492, 503, 506, 535, 538, 539, 542, 548, 552, 562, 590, 673, 676, 685, 686, 687, 690, 698, 700, 774, 808, 811, 856, 857, 860, 878, 880, 884, 898, 903, 906, 931, 932, 935], "dynam": [111, 123, 124, 125, 128, 168, 169], "runtim": [111, 117, 276], "h": [111, 122, 673, 676, 677, 678, 679, 680], "j": [111, 562, 570, 571, 686, 746, 748, 898, 899, 902], "n": [111, 117, 171, 206, 209, 224, 228, 229, 233, 562, 571, 673, 681, 686, 698, 700, 710, 713, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 737, 739, 740, 742, 746, 748, 749, 751, 752, 754, 755, 757, 774, 784, 787, 788, 791, 796, 799, 818, 821, 830, 833, 861, 866, 867, 869, 873, 876, 898, 907, 910, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "borrow": 111, "taken": [112, 126, 133, 686, 698, 700], "constant": [112, 118, 132, 133, 145, 276, 283, 284, 774, 784, 787, 838, 844, 856, 857, 860, 955, 958, 960, 973, 974, 975, 976], "compil": [112, 122, 127, 129, 145, 942, 973, 974, 977, 978, 979, 980, 981, 982], "meta": [112, 121, 835, 836, 837], "overlap": 112, "sever": [112, 145, 686, 707, 709], "judgement": 112, "locat": [112, 117, 119, 124, 861, 862], "some_namespac": 112, "some_backend": 112, "another_backend": 112, "break": [112, 113, 126, 130, 145, 942], "anyth": [112, 117, 942], "refactor": 112, "ongo": 112, "subfold": [112, 117], "via": [112, 122, 123, 124, 125, 128, 130, 131, 144, 838, 839, 848, 849], "file_nam": [112, 117], "my_func": [112, 115], "int": [112, 113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 168, 169, 171, 180, 186, 187, 194, 195, 198, 200, 201, 203, 204, 216, 217, 224, 228, 229, 233, 234, 236, 242, 247, 256, 258, 259, 262, 265, 276, 295, 298, 299, 300, 301, 309, 310, 311, 317, 318, 323, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 562, 568, 580, 581, 584, 585, 586, 589, 590, 599, 615, 618, 619, 624, 625, 634, 636, 637, 640, 642, 644, 655, 657, 673, 674, 676, 678, 679, 680, 686, 692, 694, 698, 700, 743, 745, 746, 748, 749, 751, 752, 754, 758, 764, 767, 769, 772, 774, 780, 783, 784, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 850, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 871, 873, 874, 875, 887, 888, 891, 893, 896, 898, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "nativedtyp": [112, 113, 123, 124, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 211, 214, 216, 217, 219, 222, 234, 236, 237, 241, 242, 244, 245, 255, 256, 257, 266, 898, 923, 926], "nativedevic": [112, 113, 123, 124, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 211, 214, 216, 217, 219, 222, 234, 236, 237, 241, 276, 290, 291, 292, 306, 312, 314, 316, 318, 319, 322, 562, 615, 861, 862, 863, 864, 866, 867, 869], "my": 112, "numer": [112, 132, 171, 206, 209, 242, 245, 323, 324, 327, 337, 340, 387, 390, 399, 402, 416, 419, 420, 423, 424, 427, 436, 439, 440, 443, 444, 447, 448, 451, 480, 483, 484, 487, 494, 497, 499, 502, 503, 506, 511, 514, 515, 518, 523, 526, 539, 542, 543, 547, 558, 561, 562, 597, 598, 620, 621, 626, 627, 686, 692, 694, 710, 713, 724, 726, 737, 739, 743, 745, 746, 748, 749, 751, 861, 872, 873, 874, 875, 898, 903, 906, 915, 918, 923, 926, 955], "cooler": 112, "produc": [112, 117, 276, 283, 284, 673, 685], "something_cool": 112, "category_nam": [113, 114, 118, 123, 124], "backend_nam": [113, 114, 118, 119, 120, 123, 124], "adress": 113, "conveni": [113, 123, 124, 129, 131, 132], "revisit": [113, 133], "dedic": [113, 130, 132, 636, 671, 953, 954], "four": [113, 115, 118, 123, 131], "float": [113, 114, 117, 118, 122, 123, 125, 130, 132, 156, 158, 170, 171, 172, 173, 180, 186, 187, 194, 195, 198, 200, 201, 203, 204, 216, 217, 234, 236, 242, 245, 255, 259, 264, 267, 276, 306, 312, 316, 319, 322, 323, 324, 327, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 404, 407, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 448, 451, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 543, 547, 548, 552, 553, 557, 558, 561, 562, 574, 575, 577, 589, 597, 598, 620, 621, 626, 627, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 676, 680, 685, 686, 687, 690, 695, 697, 701, 703, 704, 706, 707, 709, 718, 720, 727, 729, 730, 732, 734, 736, 737, 739, 752, 754, 758, 759, 762, 764, 767, 769, 772, 834, 835, 836, 837, 856, 857, 860, 861, 866, 867, 869, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930], "tf": [113, 121, 123, 124, 125, 128, 133, 145, 942], "jnp": [113, 123, 124, 125, 133, 942], "jaxarrai": [113, 123, 124, 125], "wherea": [113, 117, 118, 121, 123, 124, 133], "__sub__": [113, 115, 121, 122, 130], "__mul__": [113, 115, 121, 122, 130], "__div__": 113, "permit": [113, 117, 121], "dicat": 113, "addition": [113, 125], "omit": [113, 125, 878, 879, 880, 884, 886], "wrapper": [113, 120, 121, 122, 123, 125, 130], "contrast": [113, 114], "futher": 113, "respect": [113, 115, 117, 121, 122, 123, 126, 171, 206, 209, 323, 324, 327, 337, 340, 355, 358, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 404, 407, 424, 427, 428, 431, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 494, 497, 503, 506, 515, 518, 543, 547, 636, 637, 640, 642, 644, 646, 647, 649, 655, 657, 659, 661, 663, 665, 686, 730, 732, 834, 835, 836, 837], "absenc": 113, "pep": 113, "484": 113, "annot": [113, 126], "dictat": [113, 115, 121, 125], "brittl": 113, "intend": [113, 898, 923, 926], "subset": [113, 114, 117, 128], "freeli": 113, "extend": [113, 114, 119], "consum": [113, 117, 122, 276], "inde": [113, 145], "flexibl": 113, "technic": [113, 122, 125, 145], "original_typ": 113, "cumbersom": 113, "readabl": [113, 121, 122, 130, 131], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 117, 942], "spec": [114, 115], "api_specif": [114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 686, 698, 700, 774, 788, 791, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906], "array_api": 114, "preview": 114, "render": 114, "incorrectli": [114, 126], "onlin": [114, 942], "approxim": [114, 156, 157, 323, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 355, 358, 391, 394, 395, 398, 412, 415, 416, 419, 456, 459, 460, 463, 464, 467, 468, 471, 511, 514, 527, 530, 531, 534, 548, 552, 553, 557, 686, 718, 720, 727, 729], "tangent": [114, 156, 167, 323, 351, 354, 355, 358, 359, 362, 548, 552, 553, 557], "domain": [114, 323, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 355, 358, 391, 394, 395, 398, 412, 415, 416, 419, 456, 459, 460, 463, 468, 471, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557], "infin": [114, 170, 242, 245, 323, 324, 327, 333, 336, 337, 340, 346, 349, 351, 354, 355, 358, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 424, 427, 436, 439, 440, 443, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 686, 752, 754, 898, 903, 906, 911, 914, 931, 932, 935, 937, 940], "codomain": [114, 323, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 355, 358, 391, 394, 395, 398, 412, 415, 416, 419, 456, 459, 460, 463, 468, 471, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557], "x_i": [114, 323, 324, 327, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 367, 370, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 436, 439, 440, 443, 444, 447, 456, 459, 460, 463, 468, 471, 480, 483, 499, 502, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 548, 552, 553, 557, 558, 561, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930], "assum": [114, 117, 119, 123, 130, 131, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 391, 394, 395, 398, 420, 423, 492, 503, 506, 519, 522, 527, 530, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935], "express": [114, 126, 128, 133, 323, 329, 332, 342, 345, 351, 354, 355, 358, 391, 394, 527, 530, 548, 552], "radian": [114, 323, 329, 332, 342, 345, 351, 354, 355, 358, 391, 394, 527, 530, 548, 552], "operand": [114, 323, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 355, 358, 383, 386, 387, 390, 391, 394, 395, 398, 412, 415, 416, 419, 420, 423, 456, 459, 460, 463, 468, 471, 472, 475, 494, 497, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 558, 561, 898, 899, 902, 903, 906, 911, 914, 923, 926], "whose": [114, 117, 171, 224, 228, 229, 233, 323, 333, 336, 346, 349, 359, 362, 391, 394, 395, 398, 511, 514, 527, 530, 531, 534, 548, 552, 553, 557, 562, 573, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748, 774, 792, 795, 808, 811, 878, 879, 880, 884, 898, 899, 902], "ref": [114, 323, 379, 382, 448, 451, 494, 497, 503, 506, 515, 518, 543, 547, 774, 818, 821], "promot": [114, 118, 123, 242, 245, 248, 251, 266, 267, 271, 323, 329, 332, 333, 336, 337, 340, 342, 345, 346, 349, 351, 354, 359, 362, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 391, 394, 395, 398, 399, 402, 412, 415, 416, 419, 456, 459, 460, 463, 468, 471, 472, 475, 488, 491, 494, 497, 511, 514, 515, 518, 527, 530, 531, 534, 535, 538, 548, 552, 553, 557, 686, 687, 690, 692, 694, 707, 709, 710, 713, 718, 720, 724, 726, 727, 729, 734, 736, 749, 751, 752, 754, 774, 818, 821, 898, 907, 910], "But": [114, 122, 133], "needless": 114, "info": [114, 942], "renam": 114, "conform": [114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 416, 419, 420, 423, 452, 455, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 686, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935], "org": [114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 636, 637, 640, 642, 644, 686, 698, 700, 774, 788, 791, 808, 811, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906], "elementwise_funct": [114, 323, 324, 327, 342, 345, 346, 349, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 535, 538, 539, 542, 686, 698, 700, 774, 808, 811, 878, 879, 887, 888, 891, 898, 903, 906], "descript": [114, 117, 122, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 752, 754, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906, 931, 932, 935], "simplic": [114, 132, 144, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 251, 323, 324, 327, 337, 340, 342, 345, 346, 349, 363, 366, 383, 386, 387, 390, 395, 398, 420, 423, 492, 503, 506, 519, 522, 535, 538, 539, 542, 548, 552, 553, 557, 562, 590, 673, 676, 685, 686, 687, 690, 695, 697, 698, 700, 774, 788, 791, 792, 795, 808, 811, 856, 857, 860, 878, 879, 880, 884, 887, 888, 891, 898, 903, 906], "judgment": 114, "beyond": [114, 774, 808, 811], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 838, 839], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 117, 133, 144, 145, 973, 974, 977, 981], "_forward": [114, 128, 131, 132, 942], "former": 114, "trainabl": [114, 129, 131, 132, 636, 651, 653, 953, 954, 973, 974, 983], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 686, 701, 703, 961, 970, 972, 973, 974], "latter": [114, 119], "implicit": [114, 117, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "__truediv__": [115, 121, 122], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 686, 692, 694, 734, 736, 861, 862], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 171, 206, 209], "vari": [115, 117, 122, 130, 878, 879, 880, 884, 886], "simplest": [115, 117], "small": [115, 118, 128, 132, 145, 323, 494, 497, 686, 718, 720, 727, 729, 856, 857, 860, 975, 976], "unus": [115, 125, 126, 168, 169], "18": [115, 122, 323, 383, 386, 686, 698, 700, 724, 726, 898, 899, 902], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 323, 391, 394, 395, 398, 535, 538, 673, 685, 686, 724, 726, 861, 866, 898, 899, 902], "jointli": 115, "three": [115, 117, 122, 127, 171, 206, 209, 942], "x0": [115, 562, 570], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 673, 684, 686, 692, 694, 942, 948, 961, 972], "seper": [115, 562, 589], "pars": [115, 145], "satisfi": [115, 686, 755, 757], "far": [115, 124, 129, 130, 838, 839, 849], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 686, 701, 703, 737, 739], "rule": [115, 117, 118, 121, 122, 123, 126, 242, 245, 248, 251, 267, 323, 359, 362, 379, 382, 399, 402, 494, 497, 515, 518, 686, 687, 690, 692, 694, 724, 726, 734, 736], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 686, 698, 700, 861, 866], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 562, 580, 581, 686, 749, 751, 774, 800, 803, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "non": [115, 122, 123, 128, 168, 169, 242, 245, 263, 323, 480, 483, 484, 487, 673, 676, 686, 695, 697, 718, 720, 737, 739, 743, 745, 749, 751, 752, 754, 873, 874, 875, 876, 898, 903, 906, 907, 910, 911, 914, 915, 918, 927, 930, 931, 932, 935, 937, 940, 973, 974, 977, 981], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 276], "thoroughli": 116, "ci": [116, 117, 145], "failur": 116, "On": [117, 126, 129, 133], "fixtur": 117, "300": [117, 323, 519, 522], "hit": [117, 128], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 673, 681, 861, 862, 866, 867, 869, 898, 919, 922, 927, 930, 961, 969], "rang": [117, 131, 132, 133, 171, 172, 173, 200, 201, 203, 204, 878, 879, 898, 915, 918, 923, 926, 942], "cach": [117, 118, 276, 291, 562, 573], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 838, 847], "upload": 117, "artifact": 117, "parametr": 117, "statement": [117, 126, 145], "plai": [117, 133], "varieti": [117, 123, 124], "wide": 117, "valid_int_dtyp": 117, "int8": [117, 123, 242, 260], "int16": [117, 123, 242, 248, 251, 260, 898, 915, 918, 923, 926], "uint8": [117, 123, 242, 248, 251, 260], "uint16": [117, 123, 242, 261, 898, 915, 918, 923, 926], "uint32": [117, 123, 242, 261, 898, 915, 918, 923, 926], "uint64": [117, 123, 242, 261, 898, 915, 918, 923, 926], "custom_strategi": 117, "st": 117, "sampled_from": 117, "min_siz": 117, "max_siz": 117, "wherein": 117, "referenc": 117, "print_hypothesis_exampl": 117, "searchstrategi": 117, "randomis": 117, "simplist": 117, "intricaci": 117, "briefli": [117, 118, 131], "bound": [117, 128], "mechan": [117, 143, 145, 942], "power": [117, 130, 131, 132, 323, 379, 382, 412, 415, 511, 514, 562, 597, 620, 627, 686, 717, 955], "math": [117, 125, 133, 942], "inclus": [117, 125, 171, 172, 173, 861, 863, 864], "width": 117, "losslessli": 117, "mostli": 117, "drawn": [117, 861, 862, 863, 864, 866, 867, 869], "one_of": 117, "datum": 117, "pipe": 117, "overload": 117, "shorthand": 117, "ndim": [117, 130, 686, 730, 732, 737, 739], "draw": [117, 861, 862, 866, 867, 869], "dtype_and_x": 117, "num_positional_arg": 117, "reject": 117, "flatmap": 117, "suppos": 117, "valid": [117, 123, 128, 242, 253, 673, 674, 675, 676, 677, 678, 679, 680, 774, 818, 821, 931, 932, 935, 937, 940, 961, 962, 963, 964, 965, 966, 967, 968], "dataobject": 117, "test_argsort": 117, "decor": [117, 118, 120, 122, 123, 124, 125], "initialis": [117, 276], "snippet": 117, "dtype_and_valu": 117, "valid_float_dtyp": 117, "list_of_length": 117, "instance_method": 117, "alpha": [117, 156, 158], "test_leaky_relu": 117, "fw": [117, 673, 674, 675, 676, 677, 678, 679, 680], "float16": [117, 123, 242, 261], "exhaust": 117, "num_posit": 117, "indirectli": 117, "advis": 117, "seri": 117, "9433925": 117, "401298464324817e": 117, "45": [117, 636, 637, 640, 686, 724, 726, 774, 813, 856, 857, 860, 898, 899, 902], "574352379": 117, "99999": 117, "2250738585072014e": 117, "308": 117, "103515625e": 117, "unpack": [117, 126, 562, 634], "seamlessli": 117, "edg": [117, 128, 133, 774, 775, 778, 784, 787, 830, 833, 942], "encount": 117, "criterion": 117, "straight": [117, 130, 942], "array_valu": 117, "valid_ax": 117, "hand": [117, 118, 126, 145], "craft": 117, "polici": [117, 144], "hoc": 117, "overview": [117, 127, 144], "array_dtyp": 117, "array_bool": 117, "na": 117, "test_concat": 117, "test_devic": 117, "array_shap": 117, "test_manipul": 117, "common_shap": 117, "test_lay": 117, "size_bound": 117, "precis": [117, 242, 259, 323, 494, 497, 535, 538], "283405296074752": 117, "564049465049088": 117, "0417876997507982e": 117, "min_valu": 117, "max_valu": 117, "allow_inf": 117, "min_num_dim": 117, "wherev": 117, "reshape_shap": 117, "larger": [117, 128, 133, 242, 259, 774, 775, 778, 808, 811, 898, 919, 922, 927, 930], "stand": 117, "alon": [117, 276, 312, 322], "fashion": 117, "some_sequ": 117, "06": [117, 636, 637, 640], "input_dtyp": 117, "allow_subnorm": 117, "exclude_min": 117, "960464477539063e": 117, "08": [117, 323, 346, 349, 673, 685], "coverag": 117, "allow_nan": 117, "Such": 117, "kind": [117, 145, 242, 259, 262, 323, 511, 514, 898, 915, 918, 923, 926], "get_shap": 117, "allow_non": 117, "max_num_dim": 117, "min_dim_s": 117, "none_or_list_of_float": 117, "200": 117, "199": [117, 323, 346, 349, 856, 857, 860], "99999999999997": 117, "000000000000002": 117, "125": 117, "43759670925832": 117, "get_mean_std": 117, "probabilist": 117, "811428143185347e": 117, "89": [117, 323, 383, 386, 686, 743, 745, 898, 923, 926], "none_or_list_float": 117, "get_bound": 117, "arrays_valu": 117, "put": [117, 145], "36418": 117, "213": 117, "21716926": 117, "get_prob": 117, "unnorm": [117, 861, 862], "099609375": 117, "get_axi": 117, "number_positional_argu": 117, "mind": [117, 121, 122], "bodi": 117, "possibli": [117, 145, 562, 630], "test_valu": 117, "logic": [117, 120, 121, 123, 124, 130, 276, 309, 323, 476, 479, 480, 483, 484, 487, 931, 932, 935, 937, 940, 942], "enough": [117, 130, 131, 132], "autom": [117, 942], "report": 117, "test_demo": 117, "falsifi": 117, "failing_test": 117, "traceback": 117, "123": [117, 562, 587], "assertionerror": [117, 636, 672], "shrink": 117, "prescrib": 117, "behavior": [117, 128, 145, 323, 511, 514, 515, 518, 878, 879, 880, 884, 886], "identifi": 117, "closest": [117, 242, 253, 323, 387, 390, 420, 423, 424, 427, 519, 522, 558, 561], "checkout": 117, "scratch": 117, "databas": 117, "therebi": 117, "debug": [117, 122, 131], "event": [117, 942], "test_gelu": 117, "test_fil": 117, "brief": 117, "phase": [117, 145], "reus": 117, "notabl": 117, "displai": [117, 122, 131], "verbos": [117, 128, 942, 987], "newer": 117, "max_exampl": 117, "impact": [117, 132], "deadlin": 117, "weird": 117, "verifi": [117, 123, 124, 130, 942, 948], "truth": [117, 323, 404, 407, 428, 431, 432, 435, 448, 451, 452, 455, 503, 506], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 562, 583], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 898, 919, 922, 927, 930], "venn": 118, "diagram": 118, "light": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 898, 919, 922, 927, 930], "outsid": [118, 124, 126, 128, 130, 133, 774, 775, 778, 818, 821], "denomin": [118, 145, 562, 588, 598, 621, 626, 627, 856, 857, 860, 975, 976], "divis": [118, 323, 379, 382, 399, 402, 424, 427, 515, 518, 562, 588, 598, 621, 626, 627, 636, 637, 640, 642, 644, 655, 657, 977, 978, 979], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 673, 682, 683, 685, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 973, 974, 977, 979, 980], "modif": 118, "group": [118, 122], "cast": [118, 123, 242, 245, 248, 251, 774, 780, 783, 898, 915, 918, 923, 926, 942], "get_all_arrays_on_dev": 118, "nested_map": [118, 838], "index_nest": [118, 838], "implicit_backend": 119, "unless": [119, 124, 125, 145, 323, 494, 497, 562, 615], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 636, 637, 640, 642, 644, 655, 657, 977, 978, 979], "fallback": 119, "freedom": [119, 898, 919, 922, 927, 930], "recommend": [119, 323, 480, 483, 484, 487, 515, 518, 898, 907, 910], "achiev": [120, 126, 131, 133], "topic": [120, 130], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 323, 363, 366, 375, 378, 383, 386, 488, 491], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 562, 589, 774, 788, 791], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 323, 383, 386, 395, 398], "22": [122, 323, 383, 386, 686, 698, 700, 724, 726, 873, 877, 898, 899, 902], "retain_grad": [122, 636, 646], "dy": [122, 636, 646], "dx": [122, 636, 646], "autograd": [122, 145], "grad": [122, 131, 132, 133, 942, 977, 981], "redund": 122, "num_head": [122, 673, 684, 961, 972], "mask": [122, 673, 684, 685], "to_q_fn": [122, 673, 684], "to_kv_fn": [122, 673, 684], "to_out_fn": [122, 125, 673, 684], "to_q_v": [122, 673, 684], "to_kv_v": [122, 673, 684], "to_out_v": [122, 673, 684], "measur": [122, 673, 684, 961, 972], "dot": [122, 673, 684, 685, 686, 743, 745, 749, 751, 961, 972], "product": [122, 323, 494, 497, 562, 580, 673, 684, 685, 686, 692, 694, 710, 713, 724, 726, 743, 745, 749, 751, 898, 899, 902, 915, 918, 961, 972], "implicitli": 122, "intuit": [122, 131, 132], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "bfloat16": [123, 242, 260], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 942, 973, 974, 977, 981], "invalid": [123, 126, 686, 749, 751, 931, 932, 935, 937, 940], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "arguabl": [123, 124], "compound": 123, "overflow": [123, 323, 337, 340, 898, 923, 926], "arr": [123, 124, 856, 857, 860], "scalar": [123, 128, 133, 145, 171, 195, 198, 562, 615, 632, 635, 686, 752, 754], "settabl": [123, 124], "mx": [123, 124, 125, 942], "nd": [123, 124, 125, 128, 133, 942], "deleg": 123, "as_n": [123, 242, 254, 255, 256, 257, 276, 292, 293, 314], "idx": [124, 130, 562, 568], "tpu": [124, 276, 295, 320], "aliv": [124, 276, 307, 311, 313, 562, 596, 614, 616], "amount": [124, 276, 319, 758, 759, 762, 764, 767, 769, 772], "memori": [124, 125, 143, 145, 276, 291, 312, 317, 319, 322, 673, 683, 942], "dual": 124, "thrown": [124, 145, 562, 606], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 562, 606], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 562], "assign": [125, 126, 130], "elif": 125, "irrespect": [125, 130, 242, 245], "unspecifi": [125, 323, 511, 514, 515, 518, 686, 701, 703, 774, 818, 821], "predominantli": [125, 144], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 686, 701, 703, 710, 713, 834, 835, 836, 837], "third": [125, 145, 686, 737, 739, 878, 879], "leverag": 125, "equival": [125, 131, 133, 171, 172, 173, 323, 379, 382, 480, 483, 484, 487, 515, 518, 686, 718, 720, 727, 729, 734, 736, 752, 754], "input_arrai": 125, "clean": [126, 128, 129, 131], "flake8": 126, "undefin": 126, "yield": [126, 873, 877], "handler": [126, 127, 129, 133, 942], "liter": [126, 686, 752, 754], "carri": 126, "star": 126, "byte": 126, "notimpl": 126, "notimplementederror": 126, "unsuccess": 126, "exce": [126, 323, 493], "black": 126, "disobei": 126, "successfulli": 126, "accordingli": [126, 171, 206, 209, 323, 416, 419, 686, 752, 754, 873, 875, 878, 879, 880, 884, 886, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "comparison": 126, "sound": 127, "higher": [127, 128, 133, 145, 636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "fit": [128, 774, 800, 803], "construct": [128, 129, 132, 133, 774, 826, 829, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "power_seq": 128, "okai": 128, "resid": [128, 132], "ml_framework": [128, 133, 171, 172, 173], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 276, 302, 562, 589, 774, 780, 783, 942], "framework_handl": 128, "face": 128, "cprint": [128, 986], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 774, 814, 817], "get_framework": 128, "neither": [128, 323, 337, 340, 494, 497, 636, 672], "illustr": [128, 144], "un": [128, 242, 263], "nn": [128, 133, 171, 206, 209, 942], "init_h": [128, 673, 683], "init_c": [128, 673, 683], "kernel": [128, 145, 673, 683], "recurrent_kernel": [128, 673, 683], "bia": [128, 132, 673, 682, 683, 961, 962, 963, 964, 965, 966, 967, 968, 971], "recurrent_bia": [128, 673, 683], "x_shape": 128, "batch_shap": [128, 130, 133, 562, 615, 673, 683, 684, 685, 686, 755, 757, 861, 862, 961, 970], "timestep": [128, 673, 683, 961, 970], "input_channel": [128, 132, 961, 962, 963, 964, 965, 966, 967, 970, 971], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 673, 683], "wh": 128, "lstm": [128, 673, 683, 961], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 673, 683], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 942], "reduce_sum": [128, 942], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 242, 260, 261, 276, 283, 284, 562, 568, 633, 838, 839, 844, 845, 846, 848, 849, 850, 945, 947], "example_input": [128, 168, 169], "static_argnum": [128, 168, 169], "static_argnam": [128, 168, 169], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "hierarch": [129, 131, 132], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 562], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 171, 206, 209], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 171, 206, 209], "rewritten": 130, "__pow__": 130, "strang": 130, "enforc": 130, "notic": 130, "appear": [130, 774, 788, 791], "invers": [130, 144, 323, 329, 332, 333, 336, 342, 345, 346, 349, 351, 354, 355, 358, 359, 362, 686, 707, 709, 727, 729], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 562, 578], "newshap": 130, "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "ton": 131, "ado": [131, 132], "incredibli": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 942, 948], "hold": [131, 562, 618, 619], "1000": [131, 323, 535, 538], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 673, 674, 675, 676, 677, 678, 679, 680, 861, 862], "dir": 131, "adam": [131, 132, 133, 636, 637, 640, 642, 644, 655, 657, 942, 977, 979], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 170], "helper": 131, "decod": 131, "l0": 131, "l1": [131, 686, 752, 754], "depth": [131, 132, 133, 144, 276, 297, 301, 305, 562, 600, 615, 838, 850, 973, 974], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 942], "img_min": 131, "reduce_min": [131, 942], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 774, 818, 821, 856, 857, 860, 861, 866, 975, 976], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 942], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "batch_slic": 131, "model": [131, 132, 942], "mymodel": [131, 942], "linear0": [131, 132, 942], "linear1": [131, 132, 942], "x_in": [131, 132, 133, 942], "001": [131, 132, 636, 637, 640, 856, 857, 860], "loss_fn": [131, 132, 133, 942], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 961, 962, 963, 964, 965, 966, 967, 970, 971], "with_bia": [132, 961, 971], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 673, 683, 961, 970], "fed": [132, 276, 317], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971], "glorotuniform": [132, 955, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971], "bias_initi": [132, 961, 962, 963, 964, 965, 966, 967, 968, 971], "_w_init": 132, "_b_init": 132, "create_vari": [132, 955], "var_shap": [132, 955], "fan_out": [132, 955], "fan_in": [132, 955], "fan_mod": [132, 955], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 834, 836], "descent": [132, 636, 647, 649, 977, 982], "lar": [132, 636, 655, 657, 659, 661, 977], "lamb": [132, 636, 655, 657, 977], "compile_on_next_step": [132, 973, 974, 977, 978, 979, 980, 981, 982], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 977, 981], "new_v": 132, "_lr": 132, "isinst": [132, 133, 562, 630], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 977, 978, 979, 980, 981, 982], "pre": [133, 145, 276], "captur": 133, "sparse_funct": 133, "num_class": [133, 861, 862], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 856, 857, 860, 975, 976], "to_ivy_modul": [133, 953], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 673, 681, 682], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 323, 519, 522], "tree_multimap": 133, "vision": [143, 942], "robot": [143, 942], "focus": 144, "field": [144, 686, 701, 703, 730, 732, 737, 739, 878, 879, 880, 884], "perfect": 144, "3d": [144, 961, 966, 967], "differenti": 144, "demo": [144, 942], "orient": 144, "pose": 144, "euler": [144, 170], "quaternion": 144, "rotat": 144, "matric": [144, 171, 206, 209, 224, 228, 229, 233, 673, 682, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 717, 718, 720, 721, 723, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748], "angl": [144, 323, 355, 358, 395, 398, 531, 534, 553, 557], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 686, 734, 736], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 673, 942, 950, 961], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 942], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 562, 580, 581], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "condit": [144, 168, 169, 838, 848, 849, 873, 877], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 323, 515, 518, 686, 749, 751, 931, 932, 935, 937, 940], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "gold": 145, "dex": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 276, 283, 284], "spmd": 145, "mixtur": [145, 636, 637, 640], "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 838, 840], "broadli": 145, "heavili": 145, "supplementari": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 323, 346, 349, 412, 415, 636, 637, 640, 686, 724, 726, 898, 899, 902], "85": [156, 158, 323, 383, 386], "48": [156, 158, 323, 535, 538, 636, 637, 640, 686, 724, 726, 898, 899, 902], "88": [156, 158, 323, 383, 386, 686, 724, 726, 898, 899, 902], "269": [156, 160], "731": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 323, 346, 349, 758, 769, 772], "49": [156, 161, 323, 535, 538, 898, 899, 902], "147": [156, 161], "363": [156, 161], "3461": [156, 162, 165], "6491": [156, 162, 165], "535": [156, 162, 165], "hyperbol": [156, 167, 323, 333, 336, 346, 349, 359, 362, 395, 398, 531, 534, 553, 557], "55": [156, 167, 673, 679, 686, 724, 726, 898, 899, 902], "501": [156, 167], "array_method": [162, 163, 175, 176, 181, 182, 189, 190, 195, 196, 206, 207, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 248, 249, 324, 325, 329, 330, 333, 334, 337, 338, 342, 343, 346, 347, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 494, 495, 499, 500, 503, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 545, 548, 550, 553, 555, 558, 559, 563, 564, 591, 592, 637, 638, 687, 688, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 714, 715, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 759, 760, 764, 765, 769, 770, 775, 776, 780, 781, 784, 785, 788, 789, 792, 793, 796, 797, 800, 801, 804, 805, 808, 809, 814, 815, 818, 819, 822, 823, 826, 827, 830, 831, 857, 858, 880, 882, 888, 889, 893, 894, 899, 900, 903, 904, 907, 908, 911, 912, 915, 916, 919, 920, 923, 924, 927, 928, 932, 933, 937, 938], "container_method": [162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 248, 250, 252, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 346, 348, 350, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 494, 496, 498, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 558, 560, 563, 565, 567, 575, 576, 591, 593, 595, 637, 639, 641, 642, 643, 645, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 687, 689, 691, 710, 712, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 777, 779, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 857, 859, 863, 865, 867, 868, 870, 880, 881, 883, 888, 890, 892, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 932, 934, 936, 937, 939, 941], "faster": [168, 169], "invoc": [168, 169], "718281828459045": 170, "newaxi": 170, "alia": 170, "pi": 170, "141592653589793": 170, "mathemat": [170, 323, 337, 340, 355, 358, 416, 419, 494, 497, 686, 752, 754], "half": [171, 172, 173, 861, 863, 864, 867, 869], "chosen": [171, 172, 173, 323, 355, 358, 873, 877], "distanc": [171, 172, 173], "adjac": [171, 172, 173], "creation_funct": [171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241], "interpret": [171, 175, 178, 211, 214], "uniniti": [171, 180, 181, 184], "elsewher": [171, 186, 187, 873, 877], "row": [171, 186, 187, 686, 734, 736, 737, 739, 861, 862, 873, 876], "column": [171, 186, 187, 686, 701, 703, 730, 732, 734, 736, 737, 739], "__dlpack__": [171, 189, 192, 276, 318], "interchang": [171, 189, 192, 774, 822, 825], "coordin": [171, 206, 209, 323, 355, 358], "cartesian": [171, 206, 209], "ij": [171, 206, 209, 898, 899, 902], "rank": [171, 206, 209, 562, 634, 686, 692, 694, 718, 720, 730, 732, 734, 736, 746, 748, 749, 751, 752, 754, 774, 784, 787, 788, 791, 818, 821, 830, 833, 873, 876, 931, 932, 935, 937, 940], "ni": [171, 206, 209], "xi": [171, 206, 209], "n1": [171, 206, 209], "n2": [171, 206, 209], "n3": [171, 206, 209], "xv": [171, 206, 209], "yv": [171, 206, 209], "triangular": [171, 224, 228, 229, 233, 686, 687, 690, 730, 732], "innermost": [171, 224, 228, 229, 233, 686, 687, 690, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 718, 720, 721, 723, 727, 729, 730, 732, 734, 736, 737, 739, 740, 742, 746, 748], "mxn": [171, 224, 228, 229, 233, 686, 698, 700, 718, 720, 721, 723, 727, 729, 730, 732, 740, 742, 746, 748], "defaultdtyp": 242, "defaultfloatdtyp": 242, "float_dtyp": [242, 255, 269], "defaultintdtyp": 242, "dtype_in": [242, 243, 244, 258, 263, 264, 265, 275], "incompat": [242, 247], "occur": [242, 248, 251, 873, 874, 875, 878, 879, 880, 884, 886], "data_type_funct": [242, 248, 251], "floatdtyp": [242, 255], "int_dtyp": [242, 256, 270], "intdtyp": [242, 256], "followng": [242, 259], "occupi": [242, 259, 262, 562, 618, 619], "ep": [242, 259, 686, 718, 720, 727, 729], "smallest_norm": [242, 259], "encapsul": [242, 262], "type1": [242, 266], "type2": [242, 266], "arrays_and_dtyp": [242, 267], "ret1": [242, 271], "ret2": [242, 271], "defaultdevic": 276, "__enter__": 276, "_dev": 276, "devcloneditem": [276, 295], "multidevitem": [276, 277, 280], "devclonedit": 276, "multidevit": [276, 278, 281, 283, 284, 287], "devclonednest": 276, "multidevnest": [276, 279, 282], "devdistitem": 276, "devdistit": 276, "devdistnest": 276, "devmanag": 276, "dev_mapp": 276, "da_dim_s": 276, "safety_factor": 276, "min_dev_dim_s": 276, "max_dev_dim_step_ratio": 276, "min_unit_dev_tune_step": 276, "min_sf_tune_step": 276, "starting_split_factor": 276, "max_split_factor_step_s": 276, "tune_dev_alloc": 276, "tune_dev_split": 276, "mapper": [276, 283, 284], "receivess": 276, "ratio": [276, 636, 655, 657, 977, 979], "safe": [276, 283], "oom": 276, "tune": 276, "da_tune_step": 276, "ds_tune_step": 276, "to_clon": 276, "to_distribut": 276, "multidevic": [276, 283], "parallel": [276, 283, 284], "mutlidevic": [276, 283], "repeated_config_check": 276, "tune_step": 276, "devmapp": [276, 284], "ret_fn": [276, 283, 284], "queue_class": [276, 283, 284], "worker_class": [276, 283, 284], "worker": [276, 283, 284], "used_dev": [276, 283], "sf": [276, 283], "devmappermultiproc": 276, "multidev": [276, 285, 286, 305], "profil": 276, "save_dir": [276, 288], "deviceic": [276, 294], "spread": [276, 305], "139740789224448": [276, 307], "physic": [276, 309], "x3": [276, 311], "x4": [276, 311], "process_specif": [276, 312, 322], "percentag": [276, 312], "ram": [276, 312, 319, 322], "attr_onli": [276, 313], "chunk": [276, 315, 316, 317], "max_chunk_s": [276, 317], "chunk_siz": [276, 317], "input_ax": [276, 317], "output_ax": [276, 317], "feed": [276, 317], "fist": [276, 317], "stream": [276, 318], "caveat": [276, 318], "portabl": [276, 318, 942], "gb": [276, 319, 322], "reset": [276, 321], "magnitud": [323, 324, 327, 337, 340, 494, 497, 686, 737, 739, 740, 742], "princip": [323, 329, 332, 342, 345, 351, 354], "cosin": [323, 329, 332, 333, 336, 391, 394, 395, 398], "x1_i": [323, 337, 340, 355, 358, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 404, 407, 424, 427, 428, 431, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 515, 518, 543, 547], "x2_i": [323, 337, 340, 355, 358, 363, 366, 371, 374, 375, 378, 379, 382, 383, 386, 399, 402, 404, 407, 424, 427, 428, 431, 432, 435, 448, 451, 452, 455, 472, 475, 476, 479, 484, 487, 488, 491, 494, 497, 503, 506, 511, 514, 515, 518, 543, 547], "finit": [323, 337, 340, 355, 358, 436, 439, 494, 497, 511, 514, 515, 518], "nor": [323, 337, 340, 494, 497, 636, 672], "nearest": [323, 337, 340, 494, 497, 519, 522], "2019": [323, 337, 340, 416, 419, 494, 497], "commut": [323, 337, 340], "sine": [323, 342, 345, 346, 349, 527, 530, 531, 534], "57": [323, 342, 345, 346, 349, 383, 386, 395, 398], "524": [323, 342, 345], "644": [323, 342, 345], "201": [323, 342, 345, 519, 522], "305": [323, 342, 345], "412": [323, 342, 345], "44": [323, 346, 349, 519, 522, 535, 538, 539, 542, 686, 724, 726, 873, 877, 898, 899, 902], "809": [323, 346, 349], "569": [323, 346, 349], "733": [323, 346, 349], "68": [323, 346, 349], "99": [323, 346, 349, 898, 899, 902], "quotient": [323, 355, 358], "notat": [323, 355, 358, 898, 899, 902], "denot": [323, 355, 358, 636, 672], "pair": [323, 355, 358, 673, 685, 686, 692, 694], "quadrant": [323, 355, 358], "3\u03c0": [323, 355, 358], "549": [323, 359, 362], "bitwis": [323, 363, 366, 375, 378, 383, 386, 488, 491], "AND": [323, 363, 366, 476, 479, 931, 932, 935], "binari": [323, 363, 366, 375, 378, 383, 386, 488, 491, 758, 759, 762], "invert": [323, 367, 370], "arithmet": [323, 379, 382, 898, 907, 910], "propag": [323, 379, 382, 898, 903, 906, 907, 910, 911, 914, 919, 922, 923, 926, 927, 930], "thu": [323, 379, 382, 511, 514, 515, 518, 686, 701, 703], "lh": [323, 379, 382], "rh": [323, 379, 382], "xor": [323, 383, 386, 488, 491], "78": [323, 383, 386, 686, 724, 726, 898, 899, 902], "91": [323, 383, 386, 686, 724, 726, 898, 899, 902], "23": [323, 383, 386, 673, 679, 686, 698, 700, 873, 877], "66": [323, 383, 386, 686, 724, 726, 898, 899, 902], "77": [323, 383, 386, 686, 724, 726, 898, 899, 902], "79": [323, 383, 386], "98": [323, 383, 386, 686, 724, 726, 873, 877, 898, 899, 902], "26": [323, 383, 386, 636, 637, 640, 673, 680, 686, 698, 700, 724, 726, 743, 745, 898, 899, 902], "34": [323, 383, 386, 535, 538], "24": [323, 383, 386, 535, 538, 562, 580, 636, 637, 640, 686, 698, 700, 724, 726, 898, 899, 902], "51": [323, 383, 386], "27": [323, 383, 386, 395, 398, 535, 538, 673, 685, 686, 724, 726, 898, 899, 902], "74": [323, 383, 386], "59": [323, 383, 386], "416": [323, 391, 394], "122": [323, 395, 398], "368": [323, 395, 398], "670": [323, 395, 398], "202": [323, 395, 398, 519, 522], "548": [323, 395, 398], "1490": [323, 395, 398], "dividend": [323, 399, 402, 515, 518], "divisor": [323, 399, 402, 515, 518, 636, 637, 640, 642, 644, 655, 657, 898, 919, 922, 927, 930, 977, 978, 979], "gauss": [323, 408, 411], "exponenti": [323, 408, 411, 412, 415, 472, 475, 511, 514], "logarithm": [323, 412, 415, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 686, 733], "72": [323, 412, 415, 636, 637, 640, 686, 724, 726, 898, 899, 902], "accur": [323, 416, 419], "fdlibm": [323, 416, 419], "compliant": [323, 416, 419, 480, 483, 484, 487, 898, 903, 906, 907, 910, 911, 914], "greatest": [323, 420, 423, 424, 427], "out_i": [323, 436, 439, 440, 443, 444, 447], "threshold": [323, 492, 493], "y_i": [323, 499, 502], "expon": [323, 511, 514, 562, 627], "versu": [323, 511, 514], "odd": [323, 511, 514], "modulu": [323, 515, 518], "primarili": [323, 515, 518], "5654": [323, 519, 522], "034": [323, 519, 522], "433": [323, 519, 522], "343": [323, 519, 522], "30": [323, 519, 522, 686, 724, 726, 898, 899, 902, 955, 959], "81": [323, 519, 522, 539, 542, 898, 899, 902], "527": [323, 519, 522], "301": [323, 519, 522], "indistinguish": [323, 535, 538], "infinit": [323, 535, 538], "83": [323, 535, 538], "32455532": [323, 535, 538], "89897949": [323, 535, 538], "50": [323, 535, 538, 686, 724, 726, 873, 876, 898, 899, 902], "31": [323, 535, 538], "169": [323, 535, 538], "47": [323, 535, 538], "93": [323, 535, 538], "35": [323, 535, 538, 673, 685, 686, 692, 694, 873, 877, 898, 899, 902], "09": [323, 539, 542, 673, 685], "546": [323, 548, 552], "842": [323, 548, 552], "916": [323, 548, 552, 758, 759, 762], "996": [323, 548, 552], "328": [323, 548, 552], "real": [323, 553, 557], "462": [323, 553, 557], "604": [323, 553, 557], "984": [323, 553, 557], "997": [323, 553, 557, 856, 857, 860], "decim": [323, 558, 561], "inspect": [562, 568, 946, 947], "downscal": [562, 574, 575, 577], "60": [562, 580, 686, 724, 726, 898, 899, 902], "default_v": [562, 583], "catch_except": [562, 583], "rev": [562, 583], "with_cal": [562, 583], "arrang": [562, 584], "mod": [562, 588], "max_freq": [562, 589], "num_band": [562, 589], "pad": [562, 589, 673, 674, 675, 676, 677, 678, 679, 680, 774, 784, 787, 830, 833, 961, 962, 963, 964, 965, 966, 967, 968], "fourier": [562, 589], "band": [562, 589], "linearli": [562, 589, 686, 734, 736], "oppos": [562, 589], "geometr": [562, 589], "seen_set": [562, 600], "local_set": [562, 600], "decrement": [562, 604], "is_arrai": 562, "allow_dupl": [562, 612], "forkserv": [562, 613], "spawn": [562, 613], "hot": [562, 615], "scatter": [562, 615, 618, 619], "overrid": [562, 615], "tmp_dr": [562, 623], "temporari": [562, 623], "min_denomin": [562, 626], "stabil": [562, 626, 627, 887, 888, 891, 893, 896], "_min_denomin": [562, 626], "min_bas": [562, 627], "_min_bas": [562, 627, 856, 857, 860, 975, 976], "100000023841858": [562, 630], "200000047683716": [562, 630], "299999952316284": [562, 630], "400000095367432": [562, 630], "599999904632568": [562, 630], "101": [562, 631], "gradienttrack": 636, "delta": [636, 637, 640], "cost": [636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 834, 835, 836, 837], "en": [636, 637, 640, 642, 644], "wikipedia": [636, 637, 640, 642, 644], "wiki": [636, 637, 640, 642, 644], "stochastic_gradient_desc": [636, 637, 640, 642, 644], "dc": [636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665], "dw": [636, 637, 640, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665], "averag": [636, 637, 640, 642, 644, 655, 657, 834, 835, 836], "forget": [636, 637, 640, 642, 644, 655, 657, 977, 978, 979], "004": [636, 637, 640], "009": [636, 637, 640], "86": [636, 637, 640], "28": [636, 637, 640, 673, 676, 679, 680, 686, 724, 726, 898, 899, 902], "0125": [636, 637, 640], "601": [636, 637, 640], "581": [636, 637, 640], "025": [636, 637, 640], "992": [636, 637, 640], "209": [636, 637, 640, 878, 879], "271": [636, 637, 640], "0717": [636, 637, 640], "142": [636, 637, 640], "182": [636, 637, 640], "624": [636, 637, 640, 861, 867, 869], "744": [636, 637, 640], "626": [636, 637, 640], "65": [636, 637, 640, 686, 724, 726, 898, 899, 902], "024": [636, 637, 640], "096": [636, 637, 640], "216": [636, 637, 640], "384": [636, 637, 640], "rate": [636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665, 834, 835, 836, 837, 961, 972, 977, 978, 979, 980, 981, 982], "ws_new": [636, 642, 644, 647, 649, 655, 657, 659, 661, 663, 665], "retain": [636, 646], "trust": [636, 655, 657, 977, 979], "decai": [636, 655, 657, 659, 661, 977, 979, 980], "layerwis": [636, 659, 661, 977, 980], "with_grads_stack": [636, 672], "stride": [673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "data_format": [673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "nwc": [673, 674, 675, 961, 962, 963], "dilat": [673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "convolut": [673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "d_in": [673, 674, 675, 676, 677, 678, 679], "d_out": [673, 674, 675, 676, 677, 678, 679], "slide": [673, 674, 675, 676, 677, 678, 679, 680, 961, 962, 963, 964, 965, 966, 967, 968], "ncw": [673, 674, 675, 961, 962, 963], "wio": [673, 674], "output_shap": [673, 675, 677, 679, 961, 963, 965, 967], "nhwc": [673, 676, 677, 680, 961, 964, 965, 968], "fh": [673, 676, 677, 678, 679, 680], "nchw": [673, 676, 677, 680, 961, 964, 965, 968], "hwio": [673, 676], "unequ": [673, 676], "unsqueez": [673, 676, 680], "ndhwc": [673, 678, 679, 961, 966, 967], "volum": [673, 678], "fd": [673, 678, 679], "ncdhw": [673, 678, 679, 961, 966, 967], "dhwio": [673, 678], "256": [673, 679], "258": [673, 679], "128": [673, 679, 686, 724, 726], "depthwis": [673, 680, 961, 968], "333": [673, 680], "inp": [673, 680], "prob": [673, 681, 861, 862, 961, 969], "randomli": [673, 681, 961, 969], "bernoulli": [673, 681], "out_featur": [673, 681, 682], "incom": [673, 682], "outer_batch_shap": [673, 682], "inner_batch_shap": [673, 682], "in_featur": [673, 682], "cell": [673, 683, 961, 970], "num_queri": [673, 684, 685], "x_feat_dim": [673, 684], "num_kei": [673, 684, 685], "cont_feat_dim": [673, 684], "numhead": [673, 684], "feat_dim": [673, 684, 685], "out_feat_dim": [673, 684], "score": [673, 685], "04": [673, 685], "03": [673, 685, 856, 857, 860], "decomposit": [686, 687, 690, 730, 732, 737, 739], "symmetr": [686, 687, 690, 701, 703, 704, 706, 755, 757], "vif": [686, 692, 694], "92": [686, 695, 697], "293": [686, 695, 697], "46997": [686, 695, 697], "eigendecomposit": [686, 701, 703], "qlq\u1d40": [686, 701, 703], "orthogon": [686, 701, 703], "eig": [686, 701, 703], "eigenvalu": [686, 701, 703, 704, 706], "eigenvector": [686, 701, 703], "prepend": [686, 710, 713], "singular": [686, 718, 720, 727, 729, 737, 739, 740, 742], "toler": [686, 718, 720, 727, 729], "largest_singular_valu": [686, 718, 720, 727, 729], "array_lik": [686, 724, 726], "36": [686, 724, 726, 898, 899, 902], "84": [686, 724, 726, 898, 899, 902], "105": [686, 724, 726, 758, 759, 762], "112": [686, 724, 726, 898, 899, 902], "104": [686, 724, 726, 898, 899, 902], "120": [686, 724, 726], "moor": [686, 727, 729], "penros": [686, 727, 729], "pseudo": [686, 727, 729], "orthonorm": [686, 730, 732, 737, 739], "2d": [686, 733, 961, 964, 965, 968], "logdet": [686, 733], "coeffici": [686, 734, 736], "usvh": [686, 737, 739], "vh": [686, 737, 739], "hermitian": [686, 737, 739], "et": [686, 737, 739], "cetera": [686, 737, 739], "adjoint": [686, 737, 739], "reconstruct": [686, 737, 739, 878, 879, 885], "reconstructed_x": [686, 737, 739], "contract": [686, 743, 745, 898, 899, 902], "doubl": [686, 743, 745], "singleton": [686, 752, 754, 774, 814, 817, 873, 875, 898, 903, 906, 907, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 932, 935, 937, 940], "manhattan": [686, 752, 754], "l2": [686, 752, 754], "euclidean": [686, 752, 754], "mathbf": [686, 755, 757], "mathbb": [686, 755, 757], "skew": [686, 755, 757], "entropi": [758, 759, 762, 764, 767, 769, 772], "predict": [758, 759, 762, 764, 767, 769, 772], "smooth": [758, 759, 762, 764, 767, 769, 772], "223": [758, 759, 762], "357": [758, 759, 762, 769, 772], "511": [758, 759, 762], "discret": [758, 764, 767], "3862944": [758, 764, 767], "35667497": [758, 764, 767], "spars": [758, 769, 772], "logit": [758, 769, 772], "793291": [758, 769, 772], "512926": [758, 769, 772], "before_1": [774, 784, 787, 830, 833], "after_1": [774, 784, 787, 830, 833], "before_n": [774, 784, 787, 830, 833], "after_n": [774, 784, 787, 830, 833], "insert": [774, 788, 791, 838, 843, 873, 874], "manipulation_funct": [774, 788, 791], "reorder": [774, 792, 795], "permut": [774, 796, 799, 822, 825], "repetit": [774, 800, 803, 826, 829], "restor": [774, 808, 811], "famili": [774, 818, 821], "intxx": [774, 818, 821], "floatxx": [774, 818, 821], "fomaml_step": 834, "inner_cost_fn": [834, 835, 836], "outer_cost_fn": [834, 835, 836], "inner_grad_step": [834, 835, 836, 837], "inner_learning_r": [834, 835, 836, 837], "inner_optimization_step": [834, 835, 836, 837], "inner_batch_fn": [834, 835, 836], "outer_batch_fn": [834, 835, 836], "average_across_step": [834, 835, 836], "inner_v": [834, 835, 836], "keep_inner_v": [834, 835, 836], "outer_v": [834, 835, 836], "keep_outer_v": [834, 835, 836], "return_inner_v": [834, 835, 836, 837], "num_task": [834, 835, 836, 837], "maml": [834, 835, 836], "recev": [834, 835, 836], "0x7f9e6c0cdee0": [834, 835, 836, 837], "maml_step": 834, "rece": [834, 836], "reptile_step": 834, "cost_fn": [834, 837], "reptil": [834, 837], "receivng": [834, 837], "all_nested_indic": 838, "include_nest": [838, 839], "_index": [838, 839, 849], "_base": [838, 839, 848, 849], "copy_nest": 838, "to_mut": [838, 840, 850], "mutabl": [838, 840, 850], "insert_into_nest_at_index": 838, "insert_into_nest_at_indic": 838, "map_nest_at_index": 838, "map_nest_at_indic": 838, "multi_index_nest": 838, "nested_ani": 838, "check_nest": [838, 848, 849], "conditon": [838, 848, 849], "nested_indices_wher": 838, "stop_after_n_found": [838, 849], "_depth": [838, 850], "_tuple_check_fn": [838, 850], "_list_check_fn": [838, 850], "_dict_check_fn": [838, 850], "nested_multi_map": 838, "nest0": [838, 851], "ivy_arrai": [838, 851], "funciton": [838, 851], "prune_nest_at_index": 838, "prune_nest_at_indic": 838, "set_nest_at_index": 838, "set_nest_at_indic": 838, "mini": [856, 857, 860, 975, 976], "gamma": [856, 857, 860], "beta": [856, 857, 860], "0976": [856, 857, 860], "3452": [856, 857, 860], "2740": [856, 857, 860], "1047": [856, 857, 860], "5886": [856, 857, 860], "2732": [856, 857, 860], "7696": [856, 857, 860], "7024": [856, 857, 860], "2518": [856, 857, 860], "58": [856, 857, 860, 878, 879], "283": [856, 857, 860], "585": [856, 857, 860], "909": [856, 857, 860], "628": [856, 857, 860], "225": [856, 857, 860], "425": [856, 857, 860], "norm_idx": [856, 857, 860], "228": [856, 857, 860], "0285": [856, 857, 860], "204": [856, 857, 860], "population_s": [861, 862], "num_sampl": [861, 862], "home": [861, 862, 866], "uniformli": [861, 863, 864, 867, 869], "highest": [861, 863, 864], "parameter": [861, 866, 867, 869], "6444774682897879": [861, 866], "811": [861, 866], "508": [861, 866], "564": [861, 866], "7268672": [861, 866], "968": [861, 866], "175": [861, 866, 878, 879], "064": [861, 866], "40935726": [861, 866], "556": [861, 866], "26431865": [861, 867, 869], "475": [861, 867, 869], "878": [861, 867, 869], "861": [861, 867, 869], "89150229": [861, 867, 869], "89629126": [861, 867, 869], "94198485": [861, 867, 869], "91405606": [861, 867, 869], "72848724": [861, 867, 869], "7550739": [861, 867, 869], "00109": [861, 867, 869], "occurr": [873, 874, 875, 878, 879], "43": [873, 877], "x_j": [878, 879, 880, 884, 886], "impli": [878, 879, 880, 884, 886], "inverse_indic": [878, 879, 885], "aggreg": [878, 879], "fourth": [878, 879], "607": [878, 879], "735": [878, 879], "667": [878, 879], "381": [878, 879], "857": [878, 879], "0396": [878, 879], "166": [878, 879], "828": [878, 879], "144": [878, 879], "40501155": [878, 879], "77361575": [878, 879], "97776199": [878, 879], "36831157": [878, 879], "89148434": [878, 879], "9512272": [878, 879], "67542176": [878, 879], "41985657": [878, 879], "23478023": [878, 879], "1141": [878, 879], "8101": [878, 879], "9298": [878, 879], "8460": [878, 879], "2119": [878, 879], "3519": [878, 879], "6252": [878, 879], "4033": [878, 879], "7443": [878, 879], "2577": [878, 879], "3707": [878, 879], "0545": [878, 879], "3238": [878, 879], "5944": [878, 879], "0775": [878, 879], "4327": [878, 879], "176": [878, 879], "889": [878, 879], "763": [878, 879], "071": [878, 879], "262": [878, 879], "456": [878, 879], "114": [878, 879], "349": [878, 879], "615": [878, 879], "594": [878, 879], "335": [878, 879], "212": [878, 879], "457": [878, 879], "827": [878, 879], "set_funct": [878, 880, 884], "ascend": [887, 888, 891], "einstein": [898, 899, 902], "summat": [898, 899, 902], "seq": [898, 899, 902], "jk": [898, 899, 902], "ik": [898, 899, 902], "126": [898, 899, 902], "510": [898, 899, 902], "108": [898, 899, 902], "117": [898, 899, 902], "sentinel": [898, 903, 906, 911, 914], "unsign": [898, 915, 918, 923, 926], "degre": [898, 919, 922, 927, 930], "bessel": [898, 919, 922, 927, 930], "8164966": [898, 919, 922], "varianc": [898, 927, 930], "unbias": [898, 927, 930], "simplicit": [931, 932, 935], "grow": 942, "ai": 942, "got": 942, "colab": 942, "sharp": 942, "weekli": 942, "immedi": 942, "favorit": 942, "jax_concat": 942, "tf_concat": 942, "np_concat": 942, "mx_concat": 942, "torch_concat": 942, "prompt": 942, "get_devic": 942, "reduce_prod": 942, "gradient_imag": 942, "linalg": 942, "bilinear_resampl": 942, "stack_imag": 942, "neural_net": 942, "ecosystem": [942, 948], "popular": [942, 948], "acceler": 942, "articl": 942, "lenton2021ivi": 942, "inter": 942, "lenton": 942, "daniel": 942, "pardo": 942, "fabio": 942, "falck": 942, "fabian": 942, "jame": 942, "stephen": 942, "clark": 942, "ronald": 942, "journal": 942, "arxiv": 942, "preprint": 942, "2102": 942, "02886": 942, "2021": 942, "add_array_spec": 945, "fn_array_spec": 945, "geglu": 950, "native_modul": [953, 954], "native_module_class": [953, 954], "firstlayersiren": 955, "kaimingnorm": 955, "negative_slop": 955, "Ones": 955, "siren": 955, "w0": [955, 959], "filter_s": [961, 962, 963], "1d": [961, 962, 963], "conv1dtranspos": 961, "filter_shap": [961, 964, 965, 966, 967, 968], "conv2dtranspos": 961, "conv3dtranspos": 961, "depthwiseconv2d": 961, "num_channel": [961, 968], "bernoul": [961, 969], "num_lay": [961, 970], "return_sequ": [961, 970], "return_st": [961, 970], "get_initial_st": [961, 970], "dens": [961, 971], "multiheadattent": 961, "query_dim": [961, 972], "head_dim": [961, 972], "dropout_r": [961, 972], "context_dim": [961, 972], "with_to_q_fn": [961, 972], "with_to_kv_fn": [961, 972], "with_to_out_fn": [961, 972], "build_mod": [961, 972, 973, 974], "on_init": [961, 972, 973, 974], "__call__": [961, 972, 973, 974], "store_var": [973, 974], "arg_stateful_idx": [973, 974], "kwarg_stateful_idx": [973, 974], "fallback_to_non_compil": [973, 974, 977, 981], "with_partial_v": [973, 974], "initialz": [973, 974], "from_cal": [973, 974], "check_submod_ret": [973, 974], "get_mod_kei": [973, 974], "top_mod": [973, 974], "mod_depth": [973, 974], "mod_height": [973, 974], "mod_with_top_mod_key_chain": [973, 974], "save_weight": [973, 974], "weights_path": [973, 974], "show_mod_in_top_mod": [973, 974], "upper_depth": [973, 974], "lower_depth": [973, 974], "show_structur": [973, 974], "show_v_in_top_v": [973, 974], "sub_mod": [973, 974], "show_v": [973, 974], "track_submod_call_ord": [973, 974], "track_submod_ret": [973, 974], "v_with_top_v_key_chain": [973, 974], "layernorm": 975, "normalized_shap": [975, 976], "elementwise_affin": [975, 976], "trail": [975, 976], "affin": [975, 976], "0001": [977, 978, 979], "init_on_first_step": [977, 981], "ignore_miss": [977, 981], "overriden": [977, 981], "sgd": 977, "stochast": [977, 982], "sub_modul": [983, 984]}, "objects": {"ivy.array": [[21, 0, 0, "-", "activations"], [23, 0, 0, "-", "conversions"], [28, 0, 0, "-", "creation"], [30, 0, 0, "-", "data_type"], [32, 0, 0, "-", "device"], [34, 0, 0, "-", "elementwise"], [36, 0, 0, "-", "general"], [38, 0, 0, "-", "gradients"], [40, 0, 0, "-", "image"], [42, 0, 0, "-", "layers"], [44, 0, 0, "-", "linear_algebra"], [46, 0, 0, "-", "losses"], [48, 0, 0, "-", "manipulation"], [50, 0, 0, "-", "norms"], [52, 0, 0, "-", "random"], [54, 0, 0, "-", "searching"], [56, 0, 0, "-", "set"], [58, 0, 0, "-", "sorting"], [60, 0, 0, "-", "statistical"], [62, 0, 0, "-", "utility"], [64, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[22, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[22, 2, 1, "", "softplus"]], "ivy.array.array_methods": [[325, 3, 1, "", "abs"], [330, 3, 1, "", "acos"], [334, 3, 1, "", "acosh"], [638, 3, 1, "", "adam_step"], [338, 3, 1, "", "add"], [933, 3, 1, "", "all"], [564, 3, 1, "", "all_equal"], [938, 3, 1, "", "any"], [889, 3, 1, "", "argsort"], [176, 3, 1, "", "asarray"], [343, 3, 1, "", "asin"], [347, 3, 1, "", "asinh"], [352, 3, 1, "", "atan"], [356, 3, 1, "", "atan2"], [360, 3, 1, "", "atanh"], [760, 3, 1, "", "binary_cross_entropy"], [364, 3, 1, "", "bitwise_and"], [368, 3, 1, "", "bitwise_invert"], [372, 3, 1, "", "bitwise_left_shift"], [376, 3, 1, "", "bitwise_or"], [380, 3, 1, "", "bitwise_right_shift"], [384, 3, 1, "", "bitwise_xor"], [249, 3, 1, "", "can_cast"], [388, 3, 1, "", "ceil"], [688, 3, 1, "", "cholesky"], [776, 3, 1, "", "clip"], [781, 3, 1, "", "concat"], [785, 3, 1, "", "constant_pad"], [392, 3, 1, "", "cos"], [396, 3, 1, "", "cosh"], [693, 3, 1, "", "cross"], [765, 3, 1, "", "cross_entropy"], [696, 3, 1, "", "det"], [699, 3, 1, "", "diagonal"], [400, 3, 1, "", "divide"], [702, 3, 1, "", "eigh"], [705, 3, 1, "", "eigvalsh"], [900, 3, 1, "", "einsum"], [182, 3, 1, "", "empty_like"], [405, 3, 1, "", "equal"], [409, 3, 1, "", "erf"], [413, 3, 1, "", "exp"], [789, 3, 1, "", "expand_dims"], [417, 3, 1, "", "expm1"], [793, 3, 1, "", "flip"], [421, 3, 1, "", "floor"], [425, 3, 1, "", "floor_divide"], [190, 3, 1, "", "from_dlpack"], [196, 3, 1, "", "full_like"], [592, 3, 1, "", "gather_nd"], [429, 3, 1, "", "greater"], [433, 3, 1, "", "greater_equal"], [708, 3, 1, "", "inv"], [437, 3, 1, "", "isfinite"], [441, 3, 1, "", "isinf"], [445, 3, 1, "", "isnan"], [858, 3, 1, "", "layer_norm"], [449, 3, 1, "", "less"], [453, 3, 1, "", "less_equal"], [457, 3, 1, "", "log"], [461, 3, 1, "", "log10"], [465, 3, 1, "", "log1p"], [469, 3, 1, "", "log2"], [473, 3, 1, "", "logaddexp"], [477, 3, 1, "", "logical_and"], [481, 3, 1, "", "logical_not"], [485, 3, 1, "", "logical_or"], [489, 3, 1, "", "logical_xor"], [711, 3, 1, "", "matmul"], [715, 3, 1, "", "matrix_norm"], [719, 3, 1, "", "matrix_rank"], [722, 3, 1, "", "matrix_transpose"], [904, 3, 1, "", "max"], [908, 3, 1, "", "mean"], [207, 3, 1, "", "meshgrid"], [912, 3, 1, "", "min"], [495, 3, 1, "", "multiply"], [212, 3, 1, "", "native_array"], [500, 3, 1, "", "negative"], [504, 3, 1, "", "not_equal"], [220, 3, 1, "", "ones_like"], [725, 3, 1, "", "outer"], [797, 3, 1, "", "permute_dims"], [728, 3, 1, "", "pinv"], [508, 3, 1, "", "positive"], [512, 3, 1, "", "pow"], [916, 3, 1, "", "prod"], [731, 3, 1, "", "qr"], [516, 3, 1, "", "remainder"], [801, 3, 1, "", "repeat"], [805, 3, 1, "", "reshape"], [809, 3, 1, "", "roll"], [520, 3, 1, "", "round"], [524, 3, 1, "", "sign"], [528, 3, 1, "", "sin"], [532, 3, 1, "", "sinh"], [163, 3, 1, "", "softplus"], [735, 3, 1, "", "solve"], [894, 3, 1, "", "sort"], [770, 3, 1, "", "sparse_cross_entropy"], [536, 3, 1, "", "sqrt"], [540, 3, 1, "", "square"], [815, 3, 1, "", "squeeze"], [819, 3, 1, "", "stack"], [920, 3, 1, "", "std"], [545, 3, 1, "", "subtract"], [924, 3, 1, "", "sum"], [738, 3, 1, "", "svd"], [741, 3, 1, "", "svdvals"], [823, 3, 1, "", "swapaxes"], [550, 3, 1, "", "tan"], [555, 3, 1, "", "tanh"], [744, 3, 1, "", "tensordot"], [827, 3, 1, "", "tile"], [747, 3, 1, "", "trace"], [226, 3, 1, "", "tril"], [231, 3, 1, "", "triu"], [559, 3, 1, "", "trunc"], [882, 3, 1, "", "unique_counts"], [928, 3, 1, "", "var"], [750, 3, 1, "", "vecdot"], [753, 3, 1, "", "vector_norm"], [756, 3, 1, "", "vector_to_skew_symmetric_matrix"], [831, 3, 1, "", "zero_pad"], [239, 3, 1, "", "zeros_like"]], "ivy.array.conversions": [[24, 3, 1, "", "args_to_ivy"], [25, 3, 1, "", "args_to_native"], [26, 3, 1, "", "to_ivy"], [27, 3, 1, "", "to_native"]], "ivy.array.creation": [[29, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[29, 2, 1, "", "asarray"], [29, 2, 1, "", "empty_like"], [29, 2, 1, "", "from_dlpack"], [29, 2, 1, "", "full_like"], [29, 2, 1, "", "meshgrid"], [29, 2, 1, "", "native_array"], [29, 2, 1, "", "ones_like"], [29, 2, 1, "", "tril"], [29, 2, 1, "", "triu"], [29, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[31, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[31, 2, 1, "", "can_cast"]], "ivy.array.device": [[33, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[35, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[35, 2, 1, "", "abs"], [35, 2, 1, "", "acos"], [35, 2, 1, "", "acosh"], [35, 2, 1, "", "add"], [35, 2, 1, "", "asin"], [35, 2, 1, "", "asinh"], [35, 2, 1, "", "atan"], [35, 2, 1, "", "atan2"], [35, 2, 1, "", "atanh"], [35, 2, 1, "", "bitwise_and"], [35, 2, 1, "", "bitwise_invert"], [35, 2, 1, "", "bitwise_left_shift"], [35, 2, 1, "", "bitwise_or"], [35, 2, 1, "", "bitwise_right_shift"], [35, 2, 1, "", "bitwise_xor"], [35, 2, 1, "", "ceil"], [35, 2, 1, "", "cos"], [35, 2, 1, "", "cosh"], [35, 2, 1, "", "divide"], [35, 2, 1, "", "equal"], [35, 2, 1, "", "erf"], [35, 2, 1, "", "exp"], [35, 2, 1, "", "expm1"], [35, 2, 1, "", "floor"], [35, 2, 1, "", "floor_divide"], [35, 2, 1, "", "greater"], [35, 2, 1, "", "greater_equal"], [35, 2, 1, "", "isfinite"], [35, 2, 1, "", "isinf"], [35, 2, 1, "", "isnan"], [35, 2, 1, "", "less"], [35, 2, 1, "", "less_equal"], [35, 2, 1, "", "log"], [35, 2, 1, "", "log10"], [35, 2, 1, "", "log1p"], [35, 2, 1, "", "log2"], [35, 2, 1, "", "logaddexp"], [35, 2, 1, "", "logical_and"], [35, 2, 1, "", "logical_not"], [35, 2, 1, "", "logical_or"], [35, 2, 1, "", "logical_xor"], [35, 2, 1, "", "multiply"], [35, 2, 1, "", "negative"], [35, 2, 1, "", "not_equal"], [35, 2, 1, "", "positive"], [35, 2, 1, "", "pow"], [35, 2, 1, "", "remainder"], [35, 2, 1, "", "round"], [35, 2, 1, "", "sign"], [35, 2, 1, "", "sin"], [35, 2, 1, "", "sinh"], [35, 2, 1, "", "sqrt"], [35, 2, 1, "", "square"], [35, 2, 1, "", "subtract"], [35, 2, 1, "", "tan"], [35, 2, 1, "", "tanh"], [35, 2, 1, "", "trunc"]], "ivy.array.general": [[37, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[37, 2, 1, "", "all_equal"], [37, 2, 1, "", "gather_nd"]], "ivy.array.gradients": [[39, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[39, 2, 1, "", "adam_step"]], "ivy.array.image": [[41, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[43, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[45, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[45, 2, 1, "", "cholesky"], [45, 2, 1, "", "cross"], [45, 2, 1, "", "det"], [45, 2, 1, "", "diagonal"], [45, 2, 1, "", "eigh"], [45, 2, 1, "", "eigvalsh"], [45, 2, 1, "", "inv"], [45, 2, 1, "", "matmul"], [45, 2, 1, "", "matrix_norm"], [45, 2, 1, "", "matrix_rank"], [45, 2, 1, "", "matrix_transpose"], [45, 2, 1, "", "outer"], [45, 2, 1, "", "pinv"], [45, 2, 1, "", "qr"], [45, 2, 1, "", "solve"], [45, 2, 1, "", "svd"], [45, 2, 1, "", "svdvals"], [45, 2, 1, "", "tensordot"], [45, 2, 1, "", "trace"], [45, 2, 1, "", "vecdot"], [45, 2, 1, "", "vector_norm"], [45, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[47, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[47, 2, 1, "", "binary_cross_entropy"], [47, 2, 1, "", "cross_entropy"], [47, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[49, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[49, 2, 1, "", "clip"], [49, 2, 1, "", "concat"], [49, 2, 1, "", "constant_pad"], [49, 2, 1, "", "expand_dims"], [49, 2, 1, "", "flip"], [49, 2, 1, "", "permute_dims"], [49, 2, 1, "", "repeat"], [49, 2, 1, "", "reshape"], [49, 2, 1, "", "roll"], [49, 2, 1, "", "squeeze"], [49, 2, 1, "", "stack"], [49, 2, 1, "", "swapaxes"], [49, 2, 1, "", "tile"], [49, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[51, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[51, 2, 1, "", "layer_norm"]], "ivy.array.random": [[53, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[55, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[57, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[57, 2, 1, "", "unique_counts"]], "ivy.array.sorting": [[59, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[59, 2, 1, "", "argsort"], [59, 2, 1, "", "sort"]], "ivy.array.statistical": [[61, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[61, 2, 1, "", "einsum"], [61, 2, 1, "", "max"], [61, 2, 1, "", "mean"], [61, 2, 1, "", "min"], [61, 2, 1, "", "prod"], [61, 2, 1, "", "std"], [61, 2, 1, "", "sum"], [61, 2, 1, "", "var"]], "ivy.array.utility": [[63, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[63, 2, 1, "", "all"], [63, 2, 1, "", "any"]], "ivy.array.wrapping": [[65, 3, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [945, 0, 0, "-", "inspection"], [949, 0, 0, "-", "stateful"], [986, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [1, 3, 1, "", "choose_random_backend"], [2, 3, 1, "", "clear_backend_stack"], [3, 3, 1, "", "current_backend"], [4, 3, 1, "", "get_backend"], [5, 3, 1, "", "set_backend"], [6, 3, 1, "", "try_import_ivy_jax"], [7, 3, 1, "", "try_import_ivy_mxnet"], [8, 3, 1, "", "try_import_ivy_numpy"], [9, 3, 1, "", "try_import_ivy_tf"], [10, 3, 1, "", "try_import_ivy_torch"], [11, 3, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 2, 1, "", "__init__"]], "ivy.container": [[66, 0, 0, "-", "activations"], [68, 0, 0, "-", "base"], [70, 0, 0, "-", "container"], [73, 0, 0, "-", "creation"], [75, 0, 0, "-", "data_type"], [77, 0, 0, "-", "device"], [79, 0, 0, "-", "elementwise"], [81, 0, 0, "-", "general"], [83, 0, 0, "-", "gradients"], [85, 0, 0, "-", "image"], [87, 0, 0, "-", "layers"], [89, 0, 0, "-", "linear_algebra"], [91, 0, 0, "-", "losses"], [93, 0, 0, "-", "manipulation"], [95, 0, 0, "-", "norms"], [97, 0, 0, "-", "random"], [99, 0, 0, "-", "searching"], [101, 0, 0, "-", "set"], [103, 0, 0, "-", "sorting"], [105, 0, 0, "-", "statistical"], [107, 0, 0, "-", "utility"], [109, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[67, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[67, 2, 1, "", "softplus"], [67, 2, 1, "", "static_softplus"]], "ivy.container.base": [[69, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[69, 2, 1, "", "__getitem__"], [69, 2, 1, "", "__init__"], [69, 2, 1, "", "__setitem__"], [69, 2, 1, "", "all_false"], [69, 2, 1, "", "all_key_chains"], [69, 2, 1, "", "all_true"], [69, 2, 1, "", "arrays_as_lists"], [69, 2, 1, "", "as_arrays"], [69, 2, 1, "", "as_bools"], [69, 2, 1, "", "as_ones"], [69, 2, 1, "", "as_random_uniform"], [69, 2, 1, "", "as_variables"], [69, 2, 1, "", "as_zeros"], [69, 2, 1, "", "assert_contains_sub_container"], [69, 2, 1, "", "assert_contains_sub_structure"], [69, 2, 1, "", "assert_identical"], [69, 2, 1, "", "assert_identical_structure"], [69, 2, 1, "", "at_key_chain"], [69, 2, 1, "", "at_key_chains"], [69, 2, 1, "", "at_keys"], [69, 2, 1, "", "clip"], [69, 2, 1, "", "combine"], [69, 2, 1, "", "common_key_chains"], [69, 4, 1, "", "config"], [69, 2, 1, "", "contains_sub_container"], [69, 2, 1, "", "contains_sub_structure"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "create_if_absent"], [69, 2, 1, "", "cutoff_at_depth"], [69, 2, 1, "", "cutoff_at_height"], [69, 2, 1, "", "deep_copy"], [69, 4, 1, "", "dev"], [69, 2, 1, "", "dev_clone"], [69, 2, 1, "", "dev_dist"], [69, 4, 1, "", "dev_str"], [69, 2, 1, "", "diff"], [69, 2, 1, "", "dtype"], [69, 2, 1, "", "einops_rearrange"], [69, 2, 1, "", "einops_reduce"], [69, 2, 1, "", "einops_repeat"], [69, 2, 1, "", "find_sub_container"], [69, 2, 1, "", "find_sub_structure"], [69, 2, 1, "", "flatten_key_chain"], [69, 2, 1, "", "flatten_key_chains"], [69, 2, 1, "", "format_key_chains"], [69, 2, 1, "", "from_disk_as_hdf5"], [69, 2, 1, "", "from_disk_as_json"], [69, 2, 1, "", "from_disk_as_pickled"], [69, 2, 1, "", "from_flat_list"], [69, 2, 1, "", "from_numpy"], [69, 2, 1, "", "gather"], [69, 2, 1, "", "gather_nd"], [69, 2, 1, "", "h5_file_size"], [69, 2, 1, "", "handle_inplace"], [69, 2, 1, "", "has_key"], [69, 2, 1, "", "has_key_chain"], [69, 2, 1, "", "has_nans"], [69, 2, 1, "", "identical"], [69, 2, 1, "", "identical_array_shapes"], [69, 2, 1, "", "identical_configs"], [69, 2, 1, "", "identical_structure"], [69, 2, 1, "", "if_exists"], [69, 2, 1, "", "inplace_update"], [69, 4, 1, "", "ivy"], [69, 2, 1, "", "key_chains_containing"], [69, 2, 1, "", "list_join"], [69, 2, 1, "", "list_stack"], [69, 2, 1, "", "map"], [69, 2, 1, "", "map_conts"], [69, 2, 1, "", "matrix_norm"], [69, 4, 1, "", "max_depth"], [69, 2, 1, "", "maximum"], [69, 2, 1, "", "minimum"], [69, 2, 1, "", "multi_map"], [69, 2, 1, "", "multi_map_in_static_method"], [69, 2, 1, "", "num_arrays"], [69, 2, 1, "", "overwrite_at_key_chain"], [69, 2, 1, "", "overwrite_at_key_chains"], [69, 2, 1, "", "prune_empty"], [69, 2, 1, "", "prune_key_chain"], [69, 2, 1, "", "prune_key_chains"], [69, 2, 1, "", "prune_key_from_key_chains"], [69, 2, 1, "", "prune_keys"], [69, 2, 1, "", "prune_keys_from_key_chains"], [69, 2, 1, "", "reduce"], [69, 2, 1, "", "remove_key_length_limit"], [69, 2, 1, "", "remove_print_limit"], [69, 2, 1, "", "reshape_like"], [69, 2, 1, "", "restructure"], [69, 2, 1, "", "restructure_key_chains"], [69, 2, 1, "", "set_at_key_chain"], [69, 2, 1, "", "set_at_key_chains"], [69, 2, 1, "", "set_at_keys"], [69, 2, 1, "", "set_framework"], [69, 2, 1, "", "set_ivy_backend"], [69, 4, 1, "", "shape"], [69, 4, 1, "", "shapes"], [69, 2, 1, "", "show"], [69, 2, 1, "", "show_sub_container"], [69, 2, 1, "", "shuffle"], [69, 2, 1, "", "shuffle_h5_file"], [69, 2, 1, "", "size_ordered_arrays"], [69, 2, 1, "", "slice_keys"], [69, 2, 1, "", "slice_via_key"], [69, 2, 1, "", "sort_by_key"], [69, 2, 1, "", "split"], [69, 2, 1, "", "stop_gradients"], [69, 2, 1, "", "structural_diff"], [69, 2, 1, "", "to_device"], [69, 2, 1, "", "to_dict"], [69, 2, 1, "", "to_disk_as_hdf5"], [69, 2, 1, "", "to_disk_as_json"], [69, 2, 1, "", "to_disk_as_pickled"], [69, 2, 1, "", "to_flat_list"], [69, 2, 1, "", "to_iterator"], [69, 2, 1, "", "to_iterator_keys"], [69, 2, 1, "", "to_iterator_values"], [69, 2, 1, "", "to_ivy"], [69, 2, 1, "", "to_jsonable"], [69, 2, 1, "", "to_list"], [69, 2, 1, "", "to_multi_dev"], [69, 2, 1, "", "to_native"], [69, 2, 1, "", "to_numpy"], [69, 2, 1, "", "to_raw"], [69, 2, 1, "", "trim_key"], [69, 2, 1, "", "try_kc"], [69, 2, 1, "", "unify"], [69, 2, 1, "", "unstack"], [69, 2, 1, "", "update_config"], [69, 2, 1, "", "vector_norm"], [69, 2, 1, "", "with_default_key_color"], [69, 2, 1, "", "with_entries_as_lists"], [69, 2, 1, "", "with_ivy_backend"], [69, 2, 1, "", "with_key_length_limit"], [69, 2, 1, "", "with_print_indent"], [69, 2, 1, "", "with_print_limit"], [69, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[71, 1, 1, "", "Container"], [72, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[71, 2, 1, "", "__add__"], [71, 2, 1, "", "__init__"], [71, 2, 1, "", "__radd__"], [71, 2, 1, "", "arange"], [71, 2, 1, "", "arg_info"], [71, 2, 1, "", "arg_names"], [71, 2, 1, "", "argmax"], [71, 2, 1, "", "argmin"], [71, 2, 1, "", "array"], [71, 2, 1, "", "array_equal"], [71, 2, 1, "", "arrays_equal"], [71, 2, 1, "", "as_ivy_dev"], [71, 2, 1, "", "as_ivy_dtype"], [71, 2, 1, "", "as_native_dev"], [71, 2, 1, "", "as_native_dtype"], [71, 2, 1, "", "assert_supports_inplace"], [71, 2, 1, "", "astype"], [71, 2, 1, "", "broadcast_arrays"], [71, 2, 1, "", "broadcast_to"], [71, 2, 1, "", "cache_fn"], [71, 2, 1, "", "clear_mem_on_dev"], [71, 2, 1, "", "clip_matrix_norm"], [71, 2, 1, "", "closest_valid_dtype"], [71, 2, 1, "", "container_types"], [71, 2, 1, "", "conv1d"], [71, 2, 1, "", "conv1d_transpose"], [71, 2, 1, "", "conv2d"], [71, 2, 1, "", "conv2d_transpose"], [71, 2, 1, "", "conv3d"], [71, 2, 1, "", "conv3d_transpose"], [71, 2, 1, "", "copy_array"], [71, 2, 1, "", "cross"], [71, 2, 1, "", "cumprod"], [71, 2, 1, "", "cumsum"], [71, 2, 1, "", "current_backend"], [71, 2, 1, "", "current_backend_str"], [71, 2, 1, "", "default"], [71, 2, 1, "", "default_device"], [71, 2, 1, "", "default_dtype"], [71, 2, 1, "", "default_float_dtype"], [71, 2, 1, "", "default_int_dtype"], [71, 2, 1, "", "depthwise_conv2d"], [71, 2, 1, "", "det"], [71, 2, 1, "", "dev_clone_array"], [71, 2, 1, "", "dev_clone_iter"], [71, 2, 1, "", "dev_clone_nest"], [71, 2, 1, "", "dev_dist_array"], [71, 2, 1, "", "dev_dist_iter"], [71, 2, 1, "", "dev_dist_nest"], [71, 2, 1, "", "dev_unify"], [71, 2, 1, "", "dev_unify_array"], [71, 2, 1, "", "dev_unify_iter"], [71, 2, 1, "", "dev_unify_nest"], [71, 2, 1, "", "dev_util"], [71, 2, 1, "", "diagonal"], [71, 2, 1, "", "dropout"], [71, 2, 1, "", "dtype_bits"], [71, 2, 1, "", "eigh"], [71, 2, 1, "", "eigvalsh"], [71, 2, 1, "", "empty"], [71, 2, 1, "", "execute_with_gradients"], [71, 2, 1, "", "exists"], [71, 2, 1, "", "eye"], [71, 2, 1, "", "finfo"], [71, 2, 1, "", "floormod"], [71, 2, 1, "", "fourier_encode"], [71, 2, 1, "", "full"], [71, 2, 1, "", "function_supported_dtypes"], [71, 2, 1, "", "function_unsupported_dtypes"], [71, 2, 1, "", "gelu"], [71, 2, 1, "", "get_all_arrays_in_memory"], [71, 2, 1, "", "get_all_ivy_arrays_on_dev"], [71, 2, 1, "", "get_min_base"], [71, 2, 1, "", "get_min_denominator"], [71, 2, 1, "", "get_num_dims"], [71, 2, 1, "", "get_referrers_recursive"], [71, 2, 1, "", "gpu_is_available"], [71, 2, 1, "", "handle_nestable"], [71, 2, 1, "", "handle_out_argument"], [71, 2, 1, "", "iinfo"], [71, 2, 1, "", "indices_where"], [71, 2, 1, "", "infer_device"], [71, 2, 1, "", "infer_dtype"], [71, 2, 1, "", "inplace_arrays_supported"], [71, 2, 1, "", "inplace_decrement"], [71, 2, 1, "", "inplace_increment"], [71, 2, 1, "", "inplace_variables_supported"], [71, 2, 1, "", "inputs_to_native_arrays"], [71, 2, 1, "", "inv"], [71, 2, 1, "", "invalid_dtype"], [71, 2, 1, "", "is_float_dtype"], [71, 2, 1, "", "is_int_dtype"], [71, 2, 1, "", "is_ivy_container"], [71, 2, 1, "", "leaky_relu"], [71, 2, 1, "", "linear"], [71, 2, 1, "", "linspace"], [71, 2, 1, "", "logspace"], [71, 2, 1, "", "lstm_update"], [71, 2, 1, "", "match_kwargs"], [71, 2, 1, "", "matrix_power"], [71, 2, 1, "", "matrix_rank"], [71, 2, 1, "", "matrix_transpose"], [71, 2, 1, "", "multi_head_attention"], [71, 2, 1, "", "multinomial"], [71, 2, 1, "", "multiprocessing"], [71, 2, 1, "", "nonzero"], [71, 2, 1, "", "num_arrays_in_memory"], [71, 2, 1, "", "num_cpu_cores"], [71, 2, 1, "", "num_gpus"], [71, 2, 1, "", "num_ivy_arrays_on_dev"], [71, 2, 1, "", "one_hot"], [71, 2, 1, "", "ones"], [71, 2, 1, "", "outer"], [71, 2, 1, "", "outputs_to_ivy_arrays"], [71, 2, 1, "", "percent_used_mem_on_dev"], [71, 2, 1, "", "pinv"], [71, 2, 1, "", "print_all_arrays_in_memory"], [71, 2, 1, "", "print_all_ivy_arrays_on_dev"], [71, 2, 1, "", "promote_types"], [71, 2, 1, "", "qr"], [71, 2, 1, "", "queue_timeout"], [71, 2, 1, "", "randint"], [71, 2, 1, "", "random_normal"], [71, 2, 1, "", "relu"], [71, 2, 1, "", "result_type"], [71, 2, 1, "", "scaled_dot_product_attention"], [71, 2, 1, "", "scatter_flat"], [71, 2, 1, "", "scatter_nd"], [71, 2, 1, "", "seed"], [71, 2, 1, "", "set_default_device"], [71, 2, 1, "", "set_default_dtype"], [71, 2, 1, "", "set_default_float_dtype"], [71, 2, 1, "", "set_default_int_dtype"], [71, 2, 1, "", "set_min_base"], [71, 2, 1, "", "set_min_denominator"], [71, 2, 1, "", "set_queue_timeout"], [71, 2, 1, "", "set_split_factor"], [71, 2, 1, "", "set_tmp_dir"], [71, 2, 1, "", "set_with_grads"], [71, 2, 1, "", "shape_to_tuple"], [71, 2, 1, "", "sigmoid"], [71, 2, 1, "", "slogdet"], [71, 2, 1, "", "softmax"], [71, 2, 1, "", "solve"], [71, 2, 1, "", "split_factor"], [71, 2, 1, "", "split_func_call"], [71, 2, 1, "", "stable_divide"], [71, 2, 1, "", "stable_pow"], [71, 2, 1, "", "static_acos"], [71, 2, 1, "", "static_acosh"], [71, 2, 1, "", "static_arg_info"], [71, 2, 1, "", "static_arg_names"], [71, 2, 1, "", "static_argmax"], [71, 2, 1, "", "static_argmin"], [71, 2, 1, "", "static_array"], [71, 2, 1, "", "static_array_equal"], [71, 2, 1, "", "static_arrays_equal"], [71, 2, 1, "", "static_as_ivy_dev"], [71, 2, 1, "", "static_as_ivy_dtype"], [71, 2, 1, "", "static_as_native_dev"], [71, 2, 1, "", "static_as_native_dtype"], [71, 2, 1, "", "static_asin"], [71, 2, 1, "", "static_assert_supports_inplace"], [71, 2, 1, "", "static_astype"], [71, 2, 1, "", "static_atan"], [71, 2, 1, "", "static_atan2"], [71, 2, 1, "", "static_atanh"], [71, 2, 1, "", "static_bitwise_and"], [71, 2, 1, "", "static_bitwise_invert"], [71, 2, 1, "", "static_bitwise_left_shift"], [71, 2, 1, "", "static_bitwise_or"], [71, 2, 1, "", "static_bitwise_right_shift"], [71, 2, 1, "", "static_bitwise_xor"], [71, 2, 1, "", "static_broadcast_arrays"], [71, 2, 1, "", "static_broadcast_to"], [71, 2, 1, "", "static_cache_fn"], [71, 2, 1, "", "static_ceil"], [71, 2, 1, "", "static_clear_mem_on_dev"], [71, 2, 1, "", "static_clip_matrix_norm"], [71, 2, 1, "", "static_clip_vector_norm"], [71, 2, 1, "", "static_closest_valid_dtype"], [71, 2, 1, "", "static_concat"], [71, 2, 1, "", "static_constant_pad"], [71, 2, 1, "", "static_container_types"], [71, 2, 1, "", "static_conv1d"], [71, 2, 1, "", "static_conv1d_transpose"], [71, 2, 1, "", "static_conv2d"], [71, 2, 1, "", "static_conv2d_transpose"], [71, 2, 1, "", "static_conv3d"], [71, 2, 1, "", "static_conv3d_transpose"], [71, 2, 1, "", "static_copy_array"], [71, 2, 1, "", "static_cos"], [71, 2, 1, "", "static_cosh"], [71, 2, 1, "", "static_cross"], [71, 2, 1, "", "static_cumprod"], [71, 2, 1, "", "static_cumsum"], [71, 2, 1, "", "static_current_backend"], [71, 2, 1, "", "static_current_backend_str"], [71, 2, 1, "", "static_default"], [71, 2, 1, "", "static_default_device"], [71, 2, 1, "", "static_default_dtype"], [71, 2, 1, "", "static_default_float_dtype"], [71, 2, 1, "", "static_default_int_dtype"], [71, 2, 1, "", "static_depthwise_conv2d"], [71, 2, 1, "", "static_det"], [71, 2, 1, "", "static_dev"], [71, 2, 1, "", "static_dev_clone"], [71, 2, 1, "", "static_dev_clone_array"], [71, 2, 1, "", "static_dev_clone_iter"], [71, 2, 1, "", "static_dev_clone_nest"], [71, 2, 1, "", "static_dev_dist"], [71, 2, 1, "", "static_dev_dist_array"], [71, 2, 1, "", "static_dev_dist_iter"], [71, 2, 1, "", "static_dev_dist_nest"], [71, 2, 1, "", "static_dev_unify"], [71, 2, 1, "", "static_dev_unify_array"], [71, 2, 1, "", "static_dev_unify_iter"], [71, 2, 1, "", "static_dev_unify_nest"], [71, 2, 1, "", "static_dev_util"], [71, 2, 1, "", "static_diagonal"], [71, 2, 1, "", "static_dropout"], [71, 2, 1, "", "static_dtype"], [71, 2, 1, "", "static_dtype_bits"], [71, 2, 1, "", "static_eigh"], [71, 2, 1, "", "static_eigvalsh"], [71, 2, 1, "", "static_einops_rearrange"], [71, 2, 1, "", "static_einops_reduce"], [71, 2, 1, "", "static_einops_repeat"], [71, 2, 1, "", "static_einsum"], [71, 2, 1, "", "static_empty"], [71, 2, 1, "", "static_equal"], [71, 2, 1, "", "static_erf"], [71, 2, 1, "", "static_execute_with_gradients"], [71, 2, 1, "", "static_exists"], [71, 2, 1, "", "static_exp"], [71, 2, 1, "", "static_expand_dims"], [71, 2, 1, "", "static_expm1"], [71, 2, 1, "", "static_finfo"], [71, 2, 1, "", "static_flip"], [71, 2, 1, "", "static_floor"], [71, 2, 1, "", "static_floor_divide"], [71, 2, 1, "", "static_floormod"], [71, 2, 1, "", "static_fourier_encode"], [71, 2, 1, "", "static_full"], [71, 2, 1, "", "static_function_supported_dtypes"], [71, 2, 1, "", "static_function_unsupported_dtypes"], [71, 2, 1, "", "static_gather"], [71, 2, 1, "", "static_gelu"], [71, 2, 1, "", "static_get_all_arrays_in_memory"], [71, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [71, 2, 1, "", "static_get_min_base"], [71, 2, 1, "", "static_get_min_denominator"], [71, 2, 1, "", "static_get_num_dims"], [71, 2, 1, "", "static_get_referrers_recursive"], [71, 2, 1, "", "static_gpu_is_available"], [71, 2, 1, "", "static_greater"], [71, 2, 1, "", "static_greater_equal"], [71, 2, 1, "", "static_handle_nestable"], [71, 2, 1, "", "static_handle_out_argument"], [71, 2, 1, "", "static_has_nans"], [71, 2, 1, "", "static_iinfo"], [71, 2, 1, "", "static_indices_where"], [71, 2, 1, "", "static_infer_device"], [71, 2, 1, "", "static_infer_dtype"], [71, 2, 1, "", "static_inplace_arrays_supported"], [71, 2, 1, "", "static_inplace_decrement"], [71, 2, 1, "", "static_inplace_increment"], [71, 2, 1, "", "static_inplace_update"], [71, 2, 1, "", "static_inplace_variables_supported"], [71, 2, 1, "", "static_inputs_to_native_arrays"], [71, 2, 1, "", "static_inv"], [71, 2, 1, "", "static_invalid_dtype"], [71, 2, 1, "", "static_is_array"], [71, 2, 1, "", "static_is_float_dtype"], [71, 2, 1, "", "static_is_int_dtype"], [71, 2, 1, "", "static_is_ivy_array"], [71, 2, 1, "", "static_is_ivy_container"], [71, 2, 1, "", "static_is_native_array"], [71, 2, 1, "", "static_isfinite"], [71, 2, 1, "", "static_isinf"], [71, 2, 1, "", "static_isnan"], [71, 2, 1, "", "static_layer_norm"], [71, 2, 1, "", "static_leaky_relu"], [71, 2, 1, "", "static_less"], [71, 2, 1, "", "static_less_equal"], [71, 2, 1, "", "static_linear"], [71, 2, 1, "", "static_log"], [71, 2, 1, "", "static_log10"], [71, 2, 1, "", "static_log1p"], [71, 2, 1, "", "static_log2"], [71, 2, 1, "", "static_logaddexp"], [71, 2, 1, "", "static_logical_and"], [71, 2, 1, "", "static_logical_not"], [71, 2, 1, "", "static_logical_or"], [71, 2, 1, "", "static_logical_xor"], [71, 2, 1, "", "static_lstm_update"], [71, 2, 1, "", "static_match_kwargs"], [71, 2, 1, "", "static_matmul"], [71, 2, 1, "", "static_matrix_norm"], [71, 2, 1, "", "static_matrix_power"], [71, 2, 1, "", "static_matrix_rank"], [71, 2, 1, "", "static_matrix_transpose"], [71, 2, 1, "", "static_max"], [71, 2, 1, "", "static_maximum"], [71, 2, 1, "", "static_mean"], [71, 2, 1, "", "static_min"], [71, 2, 1, "", "static_minimum"], [71, 2, 1, "", "static_multi_head_attention"], [71, 2, 1, "", "static_multinomial"], [71, 2, 1, "", "static_multiprocessing"], [71, 2, 1, "", "static_negative"], [71, 2, 1, "", "static_nonzero"], [71, 2, 1, "", "static_not_equal"], [71, 2, 1, "", "static_num_arrays_in_memory"], [71, 2, 1, "", "static_num_cpu_cores"], [71, 2, 1, "", "static_num_gpus"], [71, 2, 1, "", "static_num_ivy_arrays_on_dev"], [71, 2, 1, "", "static_one_hot"], [71, 2, 1, "", "static_outer"], [71, 2, 1, "", "static_outputs_to_ivy_arrays"], [71, 2, 1, "", "static_percent_used_mem_on_dev"], [71, 2, 1, "", "static_permute_dims"], [71, 2, 1, "", "static_pinv"], [71, 2, 1, "", "static_positive"], [71, 2, 1, "", "static_pow"], [71, 2, 1, "", "static_print_all_arrays_in_memory"], [71, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [71, 2, 1, "", "static_prod"], [71, 2, 1, "", "static_promote_types"], [71, 2, 1, "", "static_qr"], [71, 2, 1, "", "static_queue_timeout"], [71, 2, 1, "", "static_random_normal"], [71, 2, 1, "", "static_relu"], [71, 2, 1, "", "static_remainder"], [71, 2, 1, "", "static_repeat"], [71, 2, 1, "", "static_reshape"], [71, 2, 1, "", "static_result_type"], [71, 2, 1, "", "static_round"], [71, 2, 1, "", "static_scaled_dot_product_attention"], [71, 2, 1, "", "static_scatter_flat"], [71, 2, 1, "", "static_scatter_nd"], [71, 2, 1, "", "static_seed"], [71, 2, 1, "", "static_set_default_device"], [71, 2, 1, "", "static_set_default_dtype"], [71, 2, 1, "", "static_set_default_float_dtype"], [71, 2, 1, "", "static_set_default_int_dtype"], [71, 2, 1, "", "static_set_min_base"], [71, 2, 1, "", "static_set_min_denominator"], [71, 2, 1, "", "static_set_queue_timeout"], [71, 2, 1, "", "static_set_split_factor"], [71, 2, 1, "", "static_set_tmp_dir"], [71, 2, 1, "", "static_set_with_grads"], [71, 2, 1, "", "static_shape"], [71, 2, 1, "", "static_shape_to_tuple"], [71, 2, 1, "", "static_shuffle"], [71, 2, 1, "", "static_sigmoid"], [71, 2, 1, "", "static_sign"], [71, 2, 1, "", "static_sin"], [71, 2, 1, "", "static_sinh"], [71, 2, 1, "", "static_slogdet"], [71, 2, 1, "", "static_softmax"], [71, 2, 1, "", "static_solve"], [71, 2, 1, "", "static_split"], [71, 2, 1, "", "static_split_factor"], [71, 2, 1, "", "static_split_func_call"], [71, 2, 1, "", "static_sqrt"], [71, 2, 1, "", "static_square"], [71, 2, 1, "", "static_squeeze"], [71, 2, 1, "", "static_stable_divide"], [71, 2, 1, "", "static_stable_pow"], [71, 2, 1, "", "static_stack"], [71, 2, 1, "", "static_std"], [71, 2, 1, "", "static_stop_gradient"], [71, 2, 1, "", "static_sum"], [71, 2, 1, "", "static_supports_inplace"], [71, 2, 1, "", "static_svd"], [71, 2, 1, "", "static_svdvals"], [71, 2, 1, "", "static_swapaxes"], [71, 2, 1, "", "static_tensordot"], [71, 2, 1, "", "static_tile"], [71, 2, 1, "", "static_tmp_dir"], [71, 2, 1, "", "static_to_device"], [71, 2, 1, "", "static_to_list"], [71, 2, 1, "", "static_to_native_arrays_and_back"], [71, 2, 1, "", "static_to_numpy"], [71, 2, 1, "", "static_to_scalar"], [71, 2, 1, "", "static_total_mem_on_dev"], [71, 2, 1, "", "static_tpu_is_available"], [71, 2, 1, "", "static_trace"], [71, 2, 1, "", "static_trunc"], [71, 2, 1, "", "static_try_else_none"], [71, 2, 1, "", "static_type_promote_arrays"], [71, 2, 1, "", "static_unique_all"], [71, 2, 1, "", "static_unique_inverse"], [71, 2, 1, "", "static_unique_values"], [71, 2, 1, "", "static_unset_default_device"], [71, 2, 1, "", "static_unset_default_dtype"], [71, 2, 1, "", "static_unset_default_float_dtype"], [71, 2, 1, "", "static_unset_default_int_dtype"], [71, 2, 1, "", "static_unset_with_grads"], [71, 2, 1, "", "static_unstack"], [71, 2, 1, "", "static_used_mem_on_dev"], [71, 2, 1, "", "static_valid_dtype"], [71, 2, 1, "", "static_value_is_nan"], [71, 2, 1, "", "static_var"], [71, 2, 1, "", "static_variable"], [71, 2, 1, "", "static_variable_data"], [71, 2, 1, "", "static_vecdot"], [71, 2, 1, "", "static_vector_norm"], [71, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [71, 2, 1, "", "static_where"], [71, 2, 1, "", "static_with_grads"], [71, 2, 1, "", "static_zero_pad"], [71, 2, 1, "", "stop_gradient"], [71, 2, 1, "", "supports_inplace"], [71, 2, 1, "", "svd"], [71, 2, 1, "", "svdvals"], [71, 2, 1, "", "tensordot"], [71, 2, 1, "", "tmp_dir"], [71, 2, 1, "", "to_native_arrays_and_back"], [71, 2, 1, "", "to_scalar"], [71, 2, 1, "", "total_mem_on_dev"], [71, 2, 1, "", "tpu_is_available"], [71, 2, 1, "", "trace"], [71, 2, 1, "", "try_else_none"], [71, 2, 1, "", "type_promote_arrays"], [71, 2, 1, "", "unique_all"], [71, 2, 1, "", "unique_inverse"], [71, 2, 1, "", "unique_values"], [71, 2, 1, "", "unset_default_device"], [71, 2, 1, "", "unset_default_dtype"], [71, 2, 1, "", "unset_default_float_dtype"], [71, 2, 1, "", "unset_default_int_dtype"], [71, 2, 1, "", "unset_with_grads"], [71, 2, 1, "", "used_mem_on_dev"], [71, 2, 1, "", "valid_dtype"], [71, 2, 1, "", "value_is_nan"], [71, 2, 1, "", "variable"], [71, 2, 1, "", "variable_data"], [71, 2, 1, "", "vecdot"], [71, 2, 1, "", "vector_to_skew_symmetric_matrix"], [71, 2, 1, "", "where"], [71, 2, 1, "", "with_grads"], [71, 2, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "at_dev"], [72, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[326, 3, 1, "", "abs"], [331, 3, 1, "", "acos"], [335, 3, 1, "", "acosh"], [639, 3, 1, "", "adam_step"], [643, 3, 1, "", "adam_update"], [339, 3, 1, "", "add"], [934, 3, 1, "", "all"], [565, 3, 1, "", "all_equal"], [939, 3, 1, "", "any"], [890, 3, 1, "", "argsort"], [177, 3, 1, "", "asarray"], [344, 3, 1, "", "asin"], [348, 3, 1, "", "asinh"], [353, 3, 1, "", "atan"], [357, 3, 1, "", "atan2"], [361, 3, 1, "", "atanh"], [761, 3, 1, "", "binary_cross_entropy"], [365, 3, 1, "", "bitwise_and"], [369, 3, 1, "", "bitwise_invert"], [373, 3, 1, "", "bitwise_left_shift"], [377, 3, 1, "", "bitwise_or"], [381, 3, 1, "", "bitwise_right_shift"], [385, 3, 1, "", "bitwise_xor"], [250, 3, 1, "", "can_cast"], [389, 3, 1, "", "ceil"], [689, 3, 1, "", "cholesky"], [777, 3, 1, "", "clip"], [576, 3, 1, "", "clip_vector_norm"], [782, 3, 1, "", "concat"], [786, 3, 1, "", "constant_pad"], [393, 3, 1, "", "cos"], [397, 3, 1, "", "cosh"], [766, 3, 1, "", "cross_entropy"], [401, 3, 1, "", "divide"], [901, 3, 1, "", "einsum"], [183, 3, 1, "", "empty_like"], [406, 3, 1, "", "equal"], [410, 3, 1, "", "erf"], [414, 3, 1, "", "exp"], [790, 3, 1, "", "expand_dims"], [418, 3, 1, "", "expm1"], [794, 3, 1, "", "flip"], [422, 3, 1, "", "floor"], [426, 3, 1, "", "floor_divide"], [191, 3, 1, "", "from_dlpack"], [197, 3, 1, "", "full_like"], [593, 3, 1, "", "gather_nd"], [648, 3, 1, "", "gradient_descent_update"], [430, 3, 1, "", "greater"], [434, 3, 1, "", "greater_equal"], [652, 3, 1, "", "is_variable"], [438, 3, 1, "", "isfinite"], [442, 3, 1, "", "isinf"], [446, 3, 1, "", "isnan"], [656, 3, 1, "", "lamb_update"], [660, 3, 1, "", "lars_update"], [859, 3, 1, "", "layer_norm"], [450, 3, 1, "", "less"], [454, 3, 1, "", "less_equal"], [458, 3, 1, "", "log"], [462, 3, 1, "", "log10"], [466, 3, 1, "", "log1p"], [470, 3, 1, "", "log2"], [474, 3, 1, "", "logaddexp"], [478, 3, 1, "", "logical_and"], [482, 3, 1, "", "logical_not"], [486, 3, 1, "", "logical_or"], [490, 3, 1, "", "logical_xor"], [712, 3, 1, "", "matmul"], [905, 3, 1, "", "max"], [909, 3, 1, "", "mean"], [208, 3, 1, "", "meshgrid"], [913, 3, 1, "", "min"], [496, 3, 1, "", "multiply"], [213, 3, 1, "", "native_array"], [501, 3, 1, "", "negative"], [505, 3, 1, "", "not_equal"], [221, 3, 1, "", "ones_like"], [664, 3, 1, "", "optimizer_update"], [798, 3, 1, "", "permute_dims"], [509, 3, 1, "", "positive"], [513, 3, 1, "", "pow"], [917, 3, 1, "", "prod"], [868, 3, 1, "", "random_uniform"], [517, 3, 1, "", "remainder"], [802, 3, 1, "", "repeat"], [806, 3, 1, "", "reshape"], [810, 3, 1, "", "roll"], [521, 3, 1, "", "round"], [525, 3, 1, "", "sign"], [529, 3, 1, "", "sin"], [533, 3, 1, "", "sinh"], [164, 3, 1, "", "softplus"], [895, 3, 1, "", "sort"], [771, 3, 1, "", "sparse_cross_entropy"], [537, 3, 1, "", "sqrt"], [541, 3, 1, "", "square"], [816, 3, 1, "", "squeeze"], [820, 3, 1, "", "stack"], [328, 3, 1, "", "static_abs"], [641, 3, 1, "", "static_adam_step"], [645, 3, 1, "", "static_adam_update"], [341, 3, 1, "", "static_add"], [936, 3, 1, "", "static_all"], [567, 3, 1, "", "static_all_equal"], [941, 3, 1, "", "static_any"], [174, 3, 1, "", "static_arange"], [892, 3, 1, "", "static_argsort"], [179, 3, 1, "", "static_asarray"], [350, 3, 1, "", "static_asinh"], [763, 3, 1, "", "static_binary_cross_entropy"], [252, 3, 1, "", "static_can_cast"], [691, 3, 1, "", "static_cholesky"], [779, 3, 1, "", "static_clip"], [768, 3, 1, "", "static_cross_entropy"], [403, 3, 1, "", "static_divide"], [185, 3, 1, "", "static_empty_like"], [188, 3, 1, "", "static_eye"], [193, 3, 1, "", "static_from_dlpack"], [199, 3, 1, "", "static_full_like"], [595, 3, 1, "", "static_gather_nd"], [650, 3, 1, "", "static_gradient_descent_update"], [654, 3, 1, "", "static_is_variable"], [658, 3, 1, "", "static_lamb_update"], [662, 3, 1, "", "static_lars_update"], [202, 3, 1, "", "static_linspace"], [205, 3, 1, "", "static_logspace"], [210, 3, 1, "", "static_meshgrid"], [498, 3, 1, "", "static_multiply"], [215, 3, 1, "", "static_native_array"], [218, 3, 1, "", "static_ones"], [223, 3, 1, "", "static_ones_like"], [666, 3, 1, "", "static_optimizer_update"], [865, 3, 1, "", "static_randint"], [870, 3, 1, "", "static_random_uniform"], [812, 3, 1, "", "static_roll"], [166, 3, 1, "", "static_softplus"], [897, 3, 1, "", "static_sort"], [773, 3, 1, "", "static_sparse_cross_entropy"], [544, 3, 1, "", "static_subtract"], [549, 3, 1, "", "static_tan"], [554, 3, 1, "", "static_tanh"], [225, 3, 1, "", "static_tril"], [230, 3, 1, "", "static_triu"], [881, 3, 1, "", "static_unique_counts"], [235, 3, 1, "", "static_zeros"], [238, 3, 1, "", "static_zeros_like"], [921, 3, 1, "", "std"], [546, 3, 1, "", "subtract"], [925, 3, 1, "", "sum"], [824, 3, 1, "", "swapaxes"], [551, 3, 1, "", "tan"], [556, 3, 1, "", "tanh"], [828, 3, 1, "", "tile"], [227, 3, 1, "", "tril"], [232, 3, 1, "", "triu"], [560, 3, 1, "", "trunc"], [883, 3, 1, "", "unique_counts"], [929, 3, 1, "", "var"], [832, 3, 1, "", "zero_pad"], [240, 3, 1, "", "zeros_like"]], "ivy.container.creation": [[74, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[74, 2, 1, "", "asarray"], [74, 2, 1, "", "empty_like"], [74, 2, 1, "", "from_dlpack"], [74, 2, 1, "", "full_like"], [74, 2, 1, "", "meshgrid"], [74, 2, 1, "", "native_array"], [74, 2, 1, "", "ones_like"], [74, 2, 1, "", "static_arange"], [74, 2, 1, "", "static_asarray"], [74, 2, 1, "", "static_empty_like"], [74, 2, 1, "", "static_eye"], [74, 2, 1, "", "static_from_dlpack"], [74, 2, 1, "", "static_full_like"], [74, 2, 1, "", "static_linspace"], [74, 2, 1, "", "static_logspace"], [74, 2, 1, "", "static_meshgrid"], [74, 2, 1, "", "static_native_array"], [74, 2, 1, "", "static_ones"], [74, 2, 1, "", "static_ones_like"], [74, 2, 1, "", "static_tril"], [74, 2, 1, "", "static_triu"], [74, 2, 1, "", "static_zeros"], [74, 2, 1, "", "static_zeros_like"], [74, 2, 1, "", "tril"], [74, 2, 1, "", "triu"], [74, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[76, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[76, 2, 1, "", "can_cast"], [76, 2, 1, "", "static_can_cast"]], "ivy.container.device": [[78, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[80, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[80, 2, 1, "", "abs"], [80, 2, 1, "", "acos"], [80, 2, 1, "", "acosh"], [80, 2, 1, "", "add"], [80, 2, 1, "", "asin"], [80, 2, 1, "", "asinh"], [80, 2, 1, "", "atan"], [80, 2, 1, "", "atan2"], [80, 2, 1, "", "atanh"], [80, 2, 1, "", "bitwise_and"], [80, 2, 1, "", "bitwise_invert"], [80, 2, 1, "", "bitwise_left_shift"], [80, 2, 1, "", "bitwise_or"], [80, 2, 1, "", "bitwise_right_shift"], [80, 2, 1, "", "bitwise_xor"], [80, 2, 1, "", "ceil"], [80, 2, 1, "", "cos"], [80, 2, 1, "", "cosh"], [80, 2, 1, "", "divide"], [80, 2, 1, "", "equal"], [80, 2, 1, "", "erf"], [80, 2, 1, "", "exp"], [80, 2, 1, "", "expm1"], [80, 2, 1, "", "floor"], [80, 2, 1, "", "floor_divide"], [80, 2, 1, "", "greater"], [80, 2, 1, "", "greater_equal"], [80, 2, 1, "", "isfinite"], [80, 2, 1, "", "isinf"], [80, 2, 1, "", "isnan"], [80, 2, 1, "", "less"], [80, 2, 1, "", "less_equal"], [80, 2, 1, "", "log"], [80, 2, 1, "", "log10"], [80, 2, 1, "", "log1p"], [80, 2, 1, "", "log2"], [80, 2, 1, "", "logaddexp"], [80, 2, 1, "", "logical_and"], [80, 2, 1, "", "logical_not"], [80, 2, 1, "", "logical_or"], [80, 2, 1, "", "logical_xor"], [80, 2, 1, "", "multiply"], [80, 2, 1, "", "negative"], [80, 2, 1, "", "not_equal"], [80, 2, 1, "", "positive"], [80, 2, 1, "", "pow"], [80, 2, 1, "", "remainder"], [80, 2, 1, "", "round"], [80, 2, 1, "", "sign"], [80, 2, 1, "", "sin"], [80, 2, 1, "", "sinh"], [80, 2, 1, "", "sqrt"], [80, 2, 1, "", "square"], [80, 2, 1, "", "static_abs"], [80, 2, 1, "", "static_add"], [80, 2, 1, "", "static_asinh"], [80, 2, 1, "", "static_divide"], [80, 2, 1, "", "static_multiply"], [80, 2, 1, "", "static_subtract"], [80, 2, 1, "", "static_tan"], [80, 2, 1, "", "static_tanh"], [80, 2, 1, "", "subtract"], [80, 2, 1, "", "tan"], [80, 2, 1, "", "tanh"], [80, 2, 1, "", "trunc"]], "ivy.container.general": [[82, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[82, 2, 1, "", "all_equal"], [82, 2, 1, "", "clip_vector_norm"], [82, 2, 1, "", "gather_nd"], [82, 2, 1, "", "static_all_equal"], [82, 2, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[84, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[84, 2, 1, "", "adam_step"], [84, 2, 1, "", "adam_update"], [84, 2, 1, "", "gradient_descent_update"], [84, 2, 1, "", "is_variable"], [84, 2, 1, "", "lamb_update"], [84, 2, 1, "", "lars_update"], [84, 2, 1, "", "optimizer_update"], [84, 2, 1, "", "static_adam_step"], [84, 2, 1, "", "static_adam_update"], [84, 2, 1, "", "static_gradient_descent_update"], [84, 2, 1, "", "static_is_variable"], [84, 2, 1, "", "static_lamb_update"], [84, 2, 1, "", "static_lars_update"], [84, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[86, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[88, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[90, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[90, 2, 1, "", "cholesky"], [90, 2, 1, "", "matmul"], [90, 2, 1, "", "static_cholesky"]], "ivy.container.losses": [[92, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[92, 2, 1, "", "binary_cross_entropy"], [92, 2, 1, "", "cross_entropy"], [92, 2, 1, "", "sparse_cross_entropy"], [92, 2, 1, "", "static_binary_cross_entropy"], [92, 2, 1, "", "static_cross_entropy"], [92, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[94, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[94, 2, 1, "", "clip"], [94, 2, 1, "", "concat"], [94, 2, 1, "", "constant_pad"], [94, 2, 1, "", "expand_dims"], [94, 2, 1, "", "flip"], [94, 2, 1, "", "permute_dims"], [94, 2, 1, "", "repeat"], [94, 2, 1, "", "reshape"], [94, 2, 1, "", "roll"], [94, 2, 1, "", "squeeze"], [94, 2, 1, "", "stack"], [94, 2, 1, "", "static_clip"], [94, 2, 1, "", "static_roll"], [94, 2, 1, "", "swapaxes"], [94, 2, 1, "", "tile"], [94, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[96, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[96, 2, 1, "", "layer_norm"]], "ivy.container.random": [[98, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[98, 2, 1, "", "random_uniform"], [98, 2, 1, "", "static_randint"], [98, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[100, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[102, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[102, 2, 1, "", "static_unique_counts"], [102, 2, 1, "", "unique_counts"]], "ivy.container.sorting": [[104, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[104, 2, 1, "", "argsort"], [104, 2, 1, "", "sort"], [104, 2, 1, "", "static_argsort"], [104, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[106, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[106, 2, 1, "", "einsum"], [106, 2, 1, "", "max"], [106, 2, 1, "", "mean"], [106, 2, 1, "", "min"], [106, 2, 1, "", "prod"], [106, 2, 1, "", "std"], [106, 2, 1, "", "sum"], [106, 2, 1, "", "var"]], "ivy.container.utility": [[108, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[108, 2, 1, "", "all"], [108, 2, 1, "", "any"], [108, 2, 1, "", "static_all"], [108, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[110, 3, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 3, 1, "", "handle_nestable"], [148, 3, 1, "", "handle_out_argument"], [149, 3, 1, "", "infer_device"], [150, 3, 1, "", "infer_dtype"], [151, 3, 1, "", "inputs_to_ivy_arrays"], [152, 3, 1, "", "inputs_to_native_arrays"], [153, 3, 1, "", "outputs_to_ivy_arrays"], [154, 3, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [168, 0, 0, "-", "compilation"], [170, 0, 0, "-", "constants"], [171, 0, 0, "-", "creation"], [242, 0, 0, "-", "data_type"], [276, 0, 0, "-", "device"], [323, 0, 0, "-", "elementwise"], [562, 0, 0, "-", "general"], [636, 0, 0, "-", "gradients"], [673, 0, 0, "-", "layers"], [686, 0, 0, "-", "linear_algebra"], [758, 0, 0, "-", "losses"], [774, 0, 0, "-", "manipulation"], [834, 0, 0, "-", "meta"], [838, 0, 0, "-", "nest"], [856, 0, 0, "-", "norms"], [861, 0, 0, "-", "random"], [873, 0, 0, "-", "searching"], [878, 0, 0, "-", "set"], [887, 0, 0, "-", "sorting"], [898, 0, 0, "-", "statistical"], [931, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 3, 1, "", "gelu"], [158, 3, 1, "", "leaky_relu"], [159, 3, 1, "", "relu"], [160, 3, 1, "", "sigmoid"], [161, 3, 1, "", "softmax"], [165, 3, 1, "", "softplus"], [167, 3, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[169, 3, 1, "", "compile"]], "ivy.functional.ivy.constants": [[170, 5, 1, "", "e"], [170, 5, 1, "", "inf"], [170, 5, 1, "", "nan"], [170, 5, 1, "", "newaxis"], [170, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[173, 3, 1, "", "arange"], [171, 3, 1, "", "array"], [178, 3, 1, "", "asarray"], [180, 3, 1, "", "empty"], [184, 3, 1, "", "empty_like"], [187, 3, 1, "", "eye"], [192, 3, 1, "", "from_dlpack"], [194, 3, 1, "", "full"], [198, 3, 1, "", "full_like"], [201, 3, 1, "", "linspace"], [204, 3, 1, "", "logspace"], [209, 3, 1, "", "meshgrid"], [214, 3, 1, "", "native_array"], [217, 3, 1, "", "ones"], [222, 3, 1, "", "ones_like"], [228, 3, 1, "", "tril"], [233, 3, 1, "", "triu"], [236, 3, 1, "", "zeros"], [241, 3, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[242, 1, 1, "", "DefaultDtype"], [242, 1, 1, "", "DefaultFloatDtype"], [242, 1, 1, "", "DefaultIntDtype"], [243, 3, 1, "", "as_ivy_dtype"], [244, 3, 1, "", "as_native_dtype"], [245, 3, 1, "", "astype"], [246, 3, 1, "", "broadcast_arrays"], [247, 3, 1, "", "broadcast_to"], [251, 3, 1, "", "can_cast"], [253, 3, 1, "", "closest_valid_dtype"], [254, 3, 1, "", "default_dtype"], [255, 3, 1, "", "default_float_dtype"], [256, 3, 1, "", "default_int_dtype"], [257, 3, 1, "", "dtype"], [258, 3, 1, "", "dtype_bits"], [259, 3, 1, "", "finfo"], [260, 3, 1, "", "function_supported_dtypes"], [261, 3, 1, "", "function_unsupported_dtypes"], [262, 3, 1, "", "iinfo"], [263, 3, 1, "", "invalid_dtype"], [264, 3, 1, "", "is_float_dtype"], [265, 3, 1, "", "is_int_dtype"], [266, 3, 1, "", "promote_types"], [267, 3, 1, "", "result_type"], [268, 3, 1, "", "set_default_dtype"], [269, 3, 1, "", "set_default_float_dtype"], [270, 3, 1, "", "set_default_int_dtype"], [271, 3, 1, "", "type_promote_arrays"], [272, 3, 1, "", "unset_default_dtype"], [273, 3, 1, "", "unset_default_float_dtype"], [274, 3, 1, "", "unset_default_int_dtype"], [275, 3, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[242, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[242, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[242, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[276, 1, 1, "", "DefaultDevice"], [277, 1, 1, "", "DevClonedItem"], [278, 1, 1, "", "DevClonedIter"], [279, 1, 1, "", "DevClonedNest"], [280, 1, 1, "", "DevDistItem"], [281, 1, 1, "", "DevDistIter"], [282, 1, 1, "", "DevDistNest"], [276, 1, 1, "", "DevManager"], [283, 1, 1, "", "DevMapper"], [284, 1, 1, "", "DevMapperMultiProc"], [276, 1, 1, "", "MultiDev"], [285, 1, 1, "", "MultiDevItem"], [286, 1, 1, "", "MultiDevIter"], [287, 1, 1, "", "MultiDevNest"], [288, 1, 1, "", "Profiler"], [289, 3, 1, "", "as_ivy_dev"], [290, 3, 1, "", "as_native_dev"], [291, 3, 1, "", "clear_mem_on_dev"], [292, 3, 1, "", "default_device"], [293, 3, 1, "", "dev"], [294, 3, 1, "", "dev_clone"], [295, 3, 1, "", "dev_clone_array"], [296, 3, 1, "", "dev_clone_iter"], [297, 3, 1, "", "dev_clone_nest"], [298, 3, 1, "", "dev_dist"], [299, 3, 1, "", "dev_dist_array"], [300, 3, 1, "", "dev_dist_iter"], [301, 3, 1, "", "dev_dist_nest"], [302, 3, 1, "", "dev_unify"], [303, 3, 1, "", "dev_unify_array"], [304, 3, 1, "", "dev_unify_iter"], [305, 3, 1, "", "dev_unify_nest"], [306, 3, 1, "", "dev_util"], [307, 3, 1, "", "get_all_ivy_arrays_on_dev"], [308, 3, 1, "", "gpu_is_available"], [309, 3, 1, "", "num_cpu_cores"], [310, 3, 1, "", "num_gpus"], [311, 3, 1, "", "num_ivy_arrays_on_dev"], [312, 3, 1, "", "percent_used_mem_on_dev"], [313, 3, 1, "", "print_all_ivy_arrays_on_dev"], [314, 3, 1, "", "set_default_device"], [315, 3, 1, "", "set_split_factor"], [316, 3, 1, "", "split_factor"], [317, 3, 1, "", "split_func_call"], [318, 3, 1, "", "to_device"], [319, 3, 1, "", "total_mem_on_dev"], [320, 3, 1, "", "tpu_is_available"], [321, 3, 1, "", "unset_default_device"], [322, 3, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[276, 2, 1, "", "__enter__"], [276, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[276, 2, 1, "", "__init__"], [276, 2, 1, "", "da_tune_step"], [276, 4, 1, "", "dim_size"], [276, 2, 1, "", "ds_tune_step"], [276, 2, 1, "", "map"], [276, 2, 1, "", "repeated_config_check"], [276, 4, 1, "", "tune_step"], [276, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[284, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[276, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[285, 2, 1, "", "__init__"], [285, 2, 1, "", "items"], [285, 2, 1, "", "keys"], [285, 4, 1, "", "shape"], [285, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[286, 2, 1, "", "__init__"], [286, 2, 1, "", "at_dev"], [286, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[287, 2, 1, "", "__init__"], [287, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "start"], [288, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[327, 3, 1, "", "abs"], [332, 3, 1, "", "acos"], [336, 3, 1, "", "acosh"], [340, 3, 1, "", "add"], [345, 3, 1, "", "asin"], [349, 3, 1, "", "asinh"], [354, 3, 1, "", "atan"], [358, 3, 1, "", "atan2"], [362, 3, 1, "", "atanh"], [366, 3, 1, "", "bitwise_and"], [370, 3, 1, "", "bitwise_invert"], [374, 3, 1, "", "bitwise_left_shift"], [378, 3, 1, "", "bitwise_or"], [382, 3, 1, "", "bitwise_right_shift"], [386, 3, 1, "", "bitwise_xor"], [390, 3, 1, "", "ceil"], [394, 3, 1, "", "cos"], [398, 3, 1, "", "cosh"], [402, 3, 1, "", "divide"], [407, 3, 1, "", "equal"], [411, 3, 1, "", "erf"], [415, 3, 1, "", "exp"], [419, 3, 1, "", "expm1"], [423, 3, 1, "", "floor"], [427, 3, 1, "", "floor_divide"], [431, 3, 1, "", "greater"], [435, 3, 1, "", "greater_equal"], [439, 3, 1, "", "isfinite"], [443, 3, 1, "", "isinf"], [447, 3, 1, "", "isnan"], [451, 3, 1, "", "less"], [455, 3, 1, "", "less_equal"], [459, 3, 1, "", "log"], [463, 3, 1, "", "log10"], [467, 3, 1, "", "log1p"], [471, 3, 1, "", "log2"], [475, 3, 1, "", "logaddexp"], [479, 3, 1, "", "logical_and"], [483, 3, 1, "", "logical_not"], [487, 3, 1, "", "logical_or"], [491, 3, 1, "", "logical_xor"], [492, 3, 1, "", "maximum"], [493, 3, 1, "", "minimum"], [497, 3, 1, "", "multiply"], [502, 3, 1, "", "negative"], [506, 3, 1, "", "not_equal"], [510, 3, 1, "", "positive"], [514, 3, 1, "", "pow"], [518, 3, 1, "", "remainder"], [522, 3, 1, "", "round"], [526, 3, 1, "", "sign"], [530, 3, 1, "", "sin"], [534, 3, 1, "", "sinh"], [538, 3, 1, "", "sqrt"], [542, 3, 1, "", "square"], [547, 3, 1, "", "subtract"], [552, 3, 1, "", "tan"], [557, 3, 1, "", "tanh"], [561, 3, 1, "", "trunc"]], "ivy.functional.ivy.general": [[566, 3, 1, "", "all_equal"], [568, 3, 1, "", "arg_info"], [569, 3, 1, "", "arg_names"], [570, 3, 1, "", "array_equal"], [571, 3, 1, "", "arrays_equal"], [572, 3, 1, "", "assert_supports_inplace"], [573, 3, 1, "", "cache_fn"], [574, 3, 1, "", "clip_matrix_norm"], [577, 3, 1, "", "clip_vector_norm"], [578, 3, 1, "", "container_types"], [579, 3, 1, "", "copy_array"], [580, 3, 1, "", "cumprod"], [581, 3, 1, "", "cumsum"], [582, 3, 1, "", "current_backend_str"], [583, 3, 1, "", "default"], [584, 3, 1, "", "einops_rearrange"], [585, 3, 1, "", "einops_reduce"], [586, 3, 1, "", "einops_repeat"], [587, 3, 1, "", "exists"], [588, 3, 1, "", "floormod"], [589, 3, 1, "", "fourier_encode"], [590, 3, 1, "", "gather"], [594, 3, 1, "", "gather_nd"], [596, 3, 1, "", "get_all_arrays_in_memory"], [597, 3, 1, "", "get_min_base"], [598, 3, 1, "", "get_min_denominator"], [599, 3, 1, "", "get_num_dims"], [600, 3, 1, "", "get_referrers_recursive"], [601, 3, 1, "", "has_nans"], [602, 3, 1, "", "indices_where"], [603, 3, 1, "", "inplace_arrays_supported"], [604, 3, 1, "", "inplace_decrement"], [605, 3, 1, "", "inplace_increment"], [606, 3, 1, "", "inplace_update"], [607, 3, 1, "", "inplace_variables_supported"], [608, 3, 1, "", "is_array"], [609, 3, 1, "", "is_ivy_array"], [610, 3, 1, "", "is_ivy_container"], [611, 3, 1, "", "is_native_array"], [612, 3, 1, "", "match_kwargs"], [613, 3, 1, "", "multiprocessing"], [614, 3, 1, "", "num_arrays_in_memory"], [615, 3, 1, "", "one_hot"], [616, 3, 1, "", "print_all_arrays_in_memory"], [617, 3, 1, "", "queue_timeout"], [618, 3, 1, "", "scatter_flat"], [619, 3, 1, "", "scatter_nd"], [620, 3, 1, "", "set_min_base"], [621, 3, 1, "", "set_min_denominator"], [622, 3, 1, "", "set_queue_timeout"], [623, 3, 1, "", "set_tmp_dir"], [624, 3, 1, "", "shape"], [625, 3, 1, "", "shape_to_tuple"], [626, 3, 1, "", "stable_divide"], [627, 3, 1, "", "stable_pow"], [628, 3, 1, "", "supports_inplace"], [629, 3, 1, "", "tmp_dir"], [630, 3, 1, "", "to_list"], [631, 3, 1, "", "to_numpy"], [632, 3, 1, "", "to_scalar"], [633, 3, 1, "", "try_else_none"], [634, 3, 1, "", "unstack"], [635, 3, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[636, 1, 1, "", "GradientTracking"], [640, 3, 1, "", "adam_step"], [644, 3, 1, "", "adam_update"], [646, 3, 1, "", "execute_with_gradients"], [649, 3, 1, "", "gradient_descent_update"], [653, 3, 1, "", "is_variable"], [657, 3, 1, "", "lamb_update"], [661, 3, 1, "", "lars_update"], [665, 3, 1, "", "optimizer_update"], [667, 3, 1, "", "set_with_grads"], [668, 3, 1, "", "stop_gradient"], [669, 3, 1, "", "unset_with_grads"], [670, 3, 1, "", "variable"], [671, 3, 1, "", "variable_data"], [672, 3, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[636, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[674, 3, 1, "", "conv1d"], [675, 3, 1, "", "conv1d_transpose"], [676, 3, 1, "", "conv2d"], [677, 3, 1, "", "conv2d_transpose"], [678, 3, 1, "", "conv3d"], [679, 3, 1, "", "conv3d_transpose"], [680, 3, 1, "", "depthwise_conv2d"], [681, 3, 1, "", "dropout"], [682, 3, 1, "", "linear"], [683, 3, 1, "", "lstm_update"], [684, 3, 1, "", "multi_head_attention"], [685, 3, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[690, 3, 1, "", "cholesky"], [694, 3, 1, "", "cross"], [697, 3, 1, "", "det"], [700, 3, 1, "", "diagonal"], [703, 3, 1, "", "eigh"], [706, 3, 1, "", "eigvalsh"], [709, 3, 1, "", "inv"], [713, 3, 1, "", "matmul"], [716, 3, 1, "", "matrix_norm"], [717, 3, 1, "", "matrix_power"], [720, 3, 1, "", "matrix_rank"], [723, 3, 1, "", "matrix_transpose"], [726, 3, 1, "", "outer"], [729, 3, 1, "", "pinv"], [732, 3, 1, "", "qr"], [733, 3, 1, "", "slogdet"], [736, 3, 1, "", "solve"], [739, 3, 1, "", "svd"], [742, 3, 1, "", "svdvals"], [745, 3, 1, "", "tensordot"], [748, 3, 1, "", "trace"], [751, 3, 1, "", "vecdot"], [754, 3, 1, "", "vector_norm"], [757, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[762, 3, 1, "", "binary_cross_entropy"], [767, 3, 1, "", "cross_entropy"], [772, 3, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[778, 3, 1, "", "clip"], [783, 3, 1, "", "concat"], [787, 3, 1, "", "constant_pad"], [791, 3, 1, "", "expand_dims"], [795, 3, 1, "", "flip"], [799, 3, 1, "", "permute_dims"], [803, 3, 1, "", "repeat"], [807, 3, 1, "", "reshape"], [811, 3, 1, "", "roll"], [813, 3, 1, "", "split"], [817, 3, 1, "", "squeeze"], [821, 3, 1, "", "stack"], [825, 3, 1, "", "swapaxes"], [829, 3, 1, "", "tile"], [833, 3, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[835, 3, 1, "", "fomaml_step"], [836, 3, 1, "", "maml_step"], [837, 3, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[839, 3, 1, "", "all_nested_indices"], [840, 3, 1, "", "copy_nest"], [841, 3, 1, "", "index_nest"], [842, 3, 1, "", "insert_into_nest_at_index"], [843, 3, 1, "", "insert_into_nest_at_indices"], [844, 3, 1, "", "map"], [845, 3, 1, "", "map_nest_at_index"], [846, 3, 1, "", "map_nest_at_indices"], [847, 3, 1, "", "multi_index_nest"], [848, 3, 1, "", "nested_any"], [849, 3, 1, "", "nested_indices_where"], [850, 3, 1, "", "nested_map"], [851, 3, 1, "", "nested_multi_map"], [852, 3, 1, "", "prune_nest_at_index"], [853, 3, 1, "", "prune_nest_at_indices"], [854, 3, 1, "", "set_nest_at_index"], [855, 3, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[860, 3, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[862, 3, 1, "", "multinomial"], [864, 3, 1, "", "randint"], [866, 3, 1, "", "random_normal"], [869, 3, 1, "", "random_uniform"], [871, 3, 1, "", "seed"], [872, 3, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[874, 3, 1, "", "argmax"], [875, 3, 1, "", "argmin"], [876, 3, 1, "", "nonzero"], [877, 3, 1, "", "where"]], "ivy.functional.ivy.set": [[879, 3, 1, "", "unique_all"], [884, 3, 1, "", "unique_counts"], [885, 3, 1, "", "unique_inverse"], [886, 3, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[891, 3, 1, "", "argsort"], [896, 3, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[902, 3, 1, "", "einsum"], [906, 3, 1, "", "max"], [910, 3, 1, "", "mean"], [914, 3, 1, "", "min"], [918, 3, 1, "", "prod"], [922, 3, 1, "", "std"], [926, 3, 1, "", "sum"], [930, 3, 1, "", "var"]], "ivy.functional.ivy.utility": [[935, 3, 1, "", "all"], [940, 3, 1, "", "any"]], "ivy.inspection": [[946, 3, 1, "", "add_array_specs"], [947, 3, 1, "", "fn_array_spec"]], "ivy.stateful": [[950, 0, 0, "-", "activations"], [953, 0, 0, "-", "converters"], [955, 0, 0, "-", "initializers"], [961, 0, 0, "-", "layers"], [973, 0, 0, "-", "module"], [975, 0, 0, "-", "norms"], [977, 0, 0, "-", "optimizers"], [983, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[951, 1, 1, "", "GEGLU"], [952, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[951, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[952, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[954, 3, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[955, 1, 1, "", "Constant"], [956, 1, 1, "", "FirstLayerSiren"], [957, 1, 1, "", "GlorotUniform"], [955, 1, 1, "", "KaimingNormal"], [958, 1, 1, "", "Ones"], [959, 1, 1, "", "Siren"], [955, 1, 1, "", "Uniform"], [960, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[955, 2, 1, "", "__init__"], [955, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[956, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[957, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[955, 2, 1, "", "__init__"], [955, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[958, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[959, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[955, 2, 1, "", "__init__"], [955, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[960, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[962, 1, 1, "", "Conv1D"], [963, 1, 1, "", "Conv1DTranspose"], [964, 1, 1, "", "Conv2D"], [965, 1, 1, "", "Conv2DTranspose"], [966, 1, 1, "", "Conv3D"], [967, 1, 1, "", "Conv3DTranspose"], [968, 1, 1, "", "DepthwiseConv2D"], [969, 1, 1, "", "Dropout"], [970, 1, 1, "", "LSTM"], [971, 1, 1, "", "Linear"], [972, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[962, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[963, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[964, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[965, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[966, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[967, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[968, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[969, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[970, 2, 1, "", "__init__"], [970, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[971, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[972, 2, 1, "", "__init__"]], "ivy.stateful.module": [[974, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[974, 2, 1, "", "__init__"], [974, 2, 1, "", "build"], [974, 4, 1, "", "build_mode"], [974, 4, 1, "", "built"], [974, 2, 1, "", "check_submod_rets"], [974, 2, 1, "", "get_mod_key"], [974, 2, 1, "", "mod_depth"], [974, 2, 1, "", "mod_height"], [974, 2, 1, "", "mod_with_top_mod_key_chain"], [974, 2, 1, "", "save_weights"], [974, 2, 1, "", "show_mod_in_top_mod"], [974, 2, 1, "", "show_structure"], [974, 2, 1, "", "show_v_in_top_v"], [974, 2, 1, "", "sub_mods"], [974, 2, 1, "", "track_submod_call_order"], [974, 2, 1, "", "track_submod_rets"], [974, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[976, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[976, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[978, 1, 1, "", "Adam"], [979, 1, 1, "", "LAMB"], [980, 1, 1, "", "LARS"], [981, 1, 1, "", "Optimizer"], [982, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[978, 2, 1, "", "__init__"], [978, 2, 1, "", "set_state"], [978, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[979, 2, 1, "", "__init__"], [979, 2, 1, "", "set_state"], [979, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[980, 2, 1, "", "__init__"], [980, 2, 1, "", "set_state"], [980, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[981, 2, 1, "", "__init__"], [981, 2, 1, "", "set_state"], [981, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[982, 2, 1, "", "__init__"], [982, 2, 1, "", "set_state"], [982, 4, 1, "", "state"]], "ivy.stateful.sequential": [[984, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[984, 2, 1, "", "__init__"]], "ivy.verbosity": [[987, 3, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 112, 119, 128, 145], "handler": [0, 128], "choose_random_backend": 1, "clear_backend_stack": 2, "current_backend": 3, "get_backend": 4, "set_backend": 5, "try_import_ivy_jax": 6, "try_import_ivy_mxnet": 7, "try_import_ivy_numpi": 8, "try_import_ivy_tf": 9, "try_import_ivy_torch": 10, "unset_backend": 11, "background": [12, 942], "ml": 13, "explos": 13, "standard": 14, "skeptic": 14, "complimentari": 14, "v": [14, 145], "competit": 14, "do": [14, 117], "work": [14, 20], "The": [14, 18, 130, 145], "arrai": [14, 113, 116, 121, 130, 163, 176, 182, 190, 196, 207, 212, 220, 226, 231, 239, 249, 325, 330, 334, 338, 343, 347, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 495, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 545, 550, 555, 559, 564, 592, 638, 688, 693, 696, 699, 702, 705, 708, 711, 715, 719, 722, 725, 728, 731, 735, 738, 741, 744, 747, 750, 753, 756, 760, 765, 770, 776, 781, 785, 789, 793, 797, 801, 805, 809, 815, 819, 823, 827, 831, 858, 882, 889, 894, 900, 904, 908, 912, 916, 920, 924, 928, 933, 938], "api": [14, 19, 112, 116, 122, 128, 130, 132, 133], "why": [15, 117], "unifi": [15, 130], "No": [15, 17], "more": 15, "re": 15, "implement": 15, "infinit": 15, "shelf": 15, "life": 15, "contribut": [16, 942], "set": [17, 56, 101, 119, 878], "up": 17, "clone": 17, "ivi": [17, 112, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 164, 165, 166, 173, 174, 176, 177, 178, 179, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 249, 250, 251, 252, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 528, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 564, 565, 566, 567, 576, 577, 592, 593, 594, 595, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 688, 689, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 713, 715, 716, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 781, 782, 783, 785, 786, 787, 789, 790, 791, 793, 794, 795, 797, 798, 799, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 827, 828, 829, 831, 832, 833, 858, 859, 860, 864, 865, 868, 869, 870, 881, 882, 883, 884, 889, 890, 891, 892, 894, 895, 896, 897, 900, 901, 902, 904, 905, 906, 908, 909, 910, 912, 913, 914, 916, 917, 918, 920, 921, 922, 924, 925, 926, 928, 929, 930, 933, 934, 935, 936, 938, 939, 940, 941], "pycharm": 17, "virtual": 17, "environ": 17, "docker": [17, 18, 20], "us": [17, 20, 131], "miniconda": [17, 20], "venv": [17, 20], "interpret": 17, "window": 17, "maco": 17, "ubuntu": 17, "github": 17, "codespac": 17, "pre": [17, 126], "commit": [17, 18, 126], "basic": 18, "get": 18, "help": 18, "todo": 18, "list": 18, "issu": 18, "manag": 18, "your": 18, "fork": 18, "who": 18, "To": 18, "ask": 18, "With": 18, "command": 18, "line": 18, "browser": 18, "pull": 18, "request": 18, "small": 18, "often": 18, "run": 18, "test": [18, 116, 117], "local": 18, "open": 19, "task": 19, "function": [19, 113, 117, 118, 120, 122, 123, 124, 128, 133, 145], "format": [19, 126], "frontend": [19, 133], "build": [20, 128], "doc": 20, "dockerless": 20, "document": 20, "pipelin": [20, 145], "make_doc": 20, "sh": 20, "entrypoint": 20, "_make_doc": 20, "generate_src_rst_fil": 20, "py": 20, "sphinx": 20, "correct_built_html_fil": 20, "remove_fil": 20, "activ": [21, 66, 156, 950], "arraywithactiv": 22, "convers": 23, "args_to_ivi": 24, "args_to_n": 25, "to_ivi": 26, "to_n": 27, "creation": [28, 73, 171], "arraywithcr": 29, "data": [30, 75, 117, 123, 131, 145, 242, 878, 879, 880, 884, 886], "type": [30, 75, 118, 123, 145, 242], "arraywithdatatyp": 31, "devic": [32, 77, 113, 124, 276], "arraywithdevic": 33, "elementwis": [34, 79, 323], "arraywithelementwis": 35, "gener": [36, 81, 117, 562], "arraywithgener": 37, "gradient": [38, 83, 636], "arraywithgradi": 39, "imag": [40, 85], "arraywithimag": 41, "layer": [42, 87, 673, 961], "arraywithlay": 43, "linear": [44, 89, 682, 686, 971], "algebra": [44, 89, 686], "arraywithlinearalgebra": 45, "loss": [46, 91, 758], "arraywithloss": 47, "manipul": [48, 93, 774], "arraywithmanipul": 49, "norm": [50, 95, 856, 975], "arraywithnorm": 51, "random": [52, 97, 861], "arraywithrandom": 53, "search": [54, 99, 873], "arraywithsearch": 55, "arraywithset": 57, "sort": [58, 103, 887, 893, 894, 895, 896], "arraywithsort": 59, "statist": [60, 105, 898], "arraywithstatist": 61, "util": [62, 107, 931], "arraywithutil": 63, "wrap": [64, 109, 120], "add_ivy_array_instance_method": 65, "containerwithactiv": 67, "base": 68, "containerbas": 69, "contain": [70, 71, 122, 131, 164, 166, 174, 177, 179, 183, 185, 188, 191, 193, 197, 199, 202, 205, 208, 210, 213, 215, 218, 221, 223, 225, 227, 230, 232, 235, 238, 240, 250, 252, 326, 328, 331, 335, 339, 341, 344, 348, 350, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 403, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 496, 498, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 541, 544, 546, 549, 551, 554, 556, 560, 565, 567, 576, 593, 595, 639, 641, 643, 645, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 689, 691, 712, 761, 763, 766, 768, 771, 773, 777, 779, 782, 786, 790, 794, 798, 802, 806, 810, 812, 816, 820, 824, 828, 832, 859, 865, 868, 870, 881, 883, 890, 892, 895, 897, 901, 905, 909, 913, 917, 921, 925, 929, 934, 936, 939, 941], "multidevcontain": 72, "containerwithcr": 74, "containerwithdatatyp": 76, "containerwithdevic": 78, "containerwithelementwis": 80, "containerwithgener": 82, "containerwithgradi": 84, "containerwithimag": 86, "containerwithlay": 88, "containerwithlinearalgebra": 90, "containerwithloss": 92, "containerwithmanipul": 94, "containerwithnorm": 96, "containerwithrandom": 98, "containerwithsearch": 100, "containerwithset": 102, "containerwithsort": 104, "containerwithstatist": 106, "containerwithutil": 108, "add_ivy_container_instance_method": 110, "deep": 111, "dive": 111, "navig": 112, "code": 112, "categor": 112, "submodul": 112, "design": [112, 127, 942], "argument": [113, 123, 124, 125], "exampl": [113, 115, 126], "out": [113, 125], "dtype": [113, 257], "number": 113, "oper": [113, 130, 145], "integ": 113, "sequenc": 113, "nestabl": [113, 118, 122], "docstr": [114, 115], "tan": [115, 548, 550, 551, 552], "roll": [115, 808, 809, 810, 811], "add": [115, 337, 338, 339, 340], "hypothesi": 117, "import": 117, "strategi": 117, "integr": 117, "we": 117, "need": 117, "helper": 117, "how": 117, "write": 117, "effect": 117, "bonu": 117, "extend": 117, "featur": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 973, 974], "other": [123, 124], "inplac": 125, "updat": 125, "copi": 125, "lint": 126, "check": [126, 145], "hook": 126, "automat": 126, "reformat": 126, "befor": 126, "block": 128, "framework": [128, 129, 949], "graph": [128, 133], "compil": [128, 133, 168, 169], "class": [130, 949], "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 955], "optim": [132, 977, 981], "transpil": 133, "role": 133, "convert": [133, 953], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 942], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "maintain": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 624, 878, 879, 880, 884, 886], "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 952], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": [162, 163, 164, 165], "static_softplu": 166, "tanh": [167, 553, 555, 556, 557], "constant": 170, "note": [171, 189, 192], "arang": [172, 173], "static_arang": 174, "asarrai": [175, 176, 177, 178], "static_asarrai": 179, "empti": 180, "empty_lik": [181, 182, 183, 184], "static_empty_lik": 185, "ey": [186, 187], "static_ey": 188, "from_dlpack": [189, 190, 191, 192], "static_from_dlpack": 193, "full": 194, "full_lik": [195, 196, 197, 198], "static_full_lik": 199, "linspac": [200, 201], "static_linspac": 202, "logspac": [203, 204], "static_logspac": 205, "meshgrid": [206, 207, 208, 209], "static_meshgrid": 210, "native_arrai": [211, 212, 213, 214], "static_native_arrai": 215, "ones": [216, 217], "static_on": 218, "ones_lik": [219, 220, 221, 222], "static_ones_lik": 223, "tril": [224, 226, 227, 228], "static_tril": 225, "triu": [229, 231, 232, 233], "static_triu": 230, "zero": [234, 236, 960], "static_zero": 235, "zeros_lik": [237, 239, 240, 241], "static_zeros_lik": 238, "as_ivy_dtyp": 243, "as_native_dtyp": 244, "astyp": 245, "broadcast_arrai": 246, "broadcast_to": 247, "can_cast": [248, 249, 250, 251], "static_can_cast": 252, "closest_valid_dtyp": 253, "default_dtyp": 254, "default_float_dtyp": 255, "default_int_dtyp": 256, "dtype_bit": 258, "finfo": 259, "function_supported_dtyp": 260, "function_unsupported_dtyp": 261, "iinfo": 262, "invalid_dtyp": 263, "is_float_dtyp": 264, "is_int_dtyp": 265, "promote_typ": 266, "result_typ": 267, "set_default_dtyp": 268, "set_default_float_dtyp": 269, "set_default_int_dtyp": 270, "type_promote_arrai": 271, "unset_default_dtyp": 272, "unset_default_float_dtyp": 273, "unset_default_int_dtyp": 274, "valid_dtyp": 275, "devcloneditem": 277, "devclonedit": 278, "devclonednest": 279, "devdistitem": 280, "devdistit": 281, "devdistnest": 282, "devmapp": 283, "devmappermultiproc": 284, "multidevitem": 285, "multidevit": 286, "multidevnest": 287, "profil": 288, "as_ivy_dev": 289, "as_native_dev": 290, "clear_mem_on_dev": 291, "default_devic": 292, "dev": 293, "dev_clon": 294, "dev_clone_arrai": 295, "dev_clone_it": 296, "dev_clone_nest": 297, "dev_dist": 298, "dev_dist_arrai": 299, "dev_dist_it": 300, "dev_dist_nest": 301, "dev_unifi": 302, "dev_unify_arrai": 303, "dev_unify_it": 304, "dev_unify_nest": 305, "dev_util": 306, "get_all_ivy_arrays_on_dev": 307, "gpu_is_avail": 308, "num_cpu_cor": 309, "num_gpu": 310, "num_ivy_arrays_on_dev": 311, "percent_used_mem_on_dev": 312, "print_all_ivy_arrays_on_dev": 313, "set_default_devic": 314, "set_split_factor": 315, "split_factor": 316, "split_func_cal": 317, "to_devic": 318, "total_mem_on_dev": 319, "tpu_is_avail": 320, "unset_default_devic": 321, "used_mem_on_dev": 322, "ab": [324, 325, 326, 327], "static_ab": 328, "aco": [329, 330, 331, 332], "acosh": [333, 334, 335, 336], "static_add": 341, "asin": [342, 343, 344, 345], "asinh": [346, 347, 348, 349], "static_asinh": 350, "atan": [351, 352, 353, 354], "atan2": [355, 356, 357, 358], "atanh": [359, 360, 361, 362], "bitwise_and": [363, 364, 365, 366], "bitwise_invert": [367, 368, 369, 370], "bitwise_left_shift": [371, 372, 373, 374], "bitwise_or": [375, 376, 377, 378], "bitwise_right_shift": [379, 380, 381, 382], "bitwise_xor": [383, 384, 385, 386], "ceil": [387, 388, 389, 390], "co": [391, 392, 393, 394], "cosh": [395, 396, 397, 398], "divid": [399, 400, 401, 402], "static_divid": 403, "equal": [404, 405, 406, 407], "erf": [408, 409, 410, 411], "exp": [412, 413, 414, 415], "expm1": [416, 417, 418, 419], "floor": [420, 421, 422, 423], "floor_divid": [424, 425, 426, 427], "greater": [428, 429, 430, 431], "greater_equ": [432, 433, 434, 435], "isfinit": [436, 437, 438, 439], "isinf": [440, 441, 442, 443], "isnan": [444, 445, 446, 447], "less": [448, 449, 450, 451], "less_equ": [452, 453, 454, 455], "log": [456, 457, 458, 459], "log10": [460, 461, 462, 463], "log1p": [464, 465, 466, 467], "log2": [468, 469, 470, 471], "logaddexp": [472, 473, 474, 475], "logical_and": [476, 477, 478, 479], "logical_not": [480, 481, 482, 483], "logical_or": [484, 485, 486, 487], "logical_xor": [488, 489, 490, 491], "maximum": 492, "minimum": 493, "multipli": [494, 495, 496, 497], "static_multipli": 498, "neg": [499, 500, 501, 502], "not_equ": [503, 504, 505, 506], "posit": [507, 508, 509, 510], "pow": [511, 512, 513, 514], "remaind": [515, 516, 517, 518], "round": [519, 520, 521, 522], "sign": [523, 524, 525, 526], "sin": [527, 528, 529, 530], "sinh": [531, 532, 533, 534], "sqrt": [535, 536, 537, 538], "squar": [539, 540, 541, 542], "subtract": [543, 545, 546, 547], "static_subtract": 544, "static_tan": 549, "static_tanh": 554, "trunc": [558, 559, 560, 561], "all_equ": [563, 564, 565, 566], "static_all_equ": 567, "arg_info": 568, "arg_nam": 569, "array_equ": 570, "arrays_equ": 571, "assert_supports_inplac": 572, "cache_fn": 573, "clip_matrix_norm": 574, "clip_vector_norm": [575, 576, 577], "container_typ": 578, "copy_arrai": 579, "cumprod": 580, "cumsum": 581, "current_backend_str": 582, "default": 583, "einops_rearrang": 584, "einops_reduc": 585, "einops_repeat": 586, "exist": 587, "floormod": 588, "fourier_encod": 589, "gather": 590, "gather_nd": [591, 592, 593, 594], "static_gather_nd": 595, "get_all_arrays_in_memori": 596, "get_min_bas": 597, "get_min_denomin": 598, "get_num_dim": 599, "get_referrers_recurs": 600, "has_nan": 601, "indices_wher": 602, "inplace_arrays_support": 603, "inplace_decr": 604, "inplace_incr": 605, "inplace_upd": 606, "inplace_variables_support": 607, "is_arrai": 608, "is_ivy_arrai": 609, "is_ivy_contain": 610, "is_native_arrai": 611, "match_kwarg": 612, "multiprocess": 613, "num_arrays_in_memori": 614, "one_hot": 615, "print_all_arrays_in_memori": 616, "queue_timeout": 617, "scatter_flat": 618, "scatter_nd": 619, "set_min_bas": 620, "set_min_denomin": 621, "set_queue_timeout": 622, "set_tmp_dir": 623, "shape_to_tupl": 625, "stable_divid": 626, "stable_pow": 627, "supports_inplac": 628, "tmp_dir": 629, "to_list": 630, "to_numpi": 631, "to_scalar": 632, "try_else_non": 633, "unstack": 634, "value_is_nan": 635, "adam_step": [637, 638, 639, 640], "static_adam_step": 641, "adam_upd": [642, 643, 644], "static_adam_upd": 645, "execute_with_gradi": 646, "gradient_descent_upd": [647, 648, 649], "static_gradient_descent_upd": 650, "is_vari": [651, 652, 653], "static_is_vari": 654, "lamb_upd": [655, 656, 657], "static_lamb_upd": 658, "lars_upd": [659, 660, 661], "static_lars_upd": 662, "optimizer_upd": [663, 664, 665], "static_optimizer_upd": 666, "set_with_grad": 667, "stop_gradi": 668, "unset_with_grad": 669, "variabl": 670, "variable_data": 671, "with_grad": 672, "conv1d": [674, 962], "conv1d_transpos": 675, "conv2d": [676, 964], "conv2d_transpos": 677, "conv3d": [678, 966], "conv3d_transpos": 679, "depthwise_conv2d": 680, "dropout": [681, 969], "lstm_updat": 683, "multi_head_attent": 684, "scaled_dot_product_attent": 685, "choleski": [687, 688, 689, 690], "static_choleski": 691, "cross": [692, 693, 694], "det": [695, 696, 697], "diagon": [698, 699, 700], "eigh": [701, 702, 703], "eigvalsh": [704, 705, 706], "inv": [707, 708, 709], "matmul": [710, 711, 712, 713], "matrix_norm": [714, 715, 716], "matrix_pow": 717, "matrix_rank": [718, 719, 720], "matrix_transpos": [721, 722, 723], "outer": [724, 725, 726], "pinv": [727, 728, 729], "qr": [730, 731, 732], "slogdet": 733, "solv": [734, 735, 736], "svd": [737, 738, 739], "svdval": [740, 741, 742], "tensordot": [743, 744, 745], "trace": [746, 747, 748], "vecdot": [749, 750, 751], "vector_norm": [752, 753, 754], "vector_to_skew_symmetric_matrix": [755, 756, 757], "binary_cross_entropi": [759, 760, 761, 762], "static_binary_cross_entropi": 763, "cross_entropi": [764, 765, 766, 767], "static_cross_entropi": 768, "sparse_cross_entropi": [769, 770, 771, 772], "static_sparse_cross_entropi": 773, "clip": [775, 776, 777, 778], "static_clip": 779, "concat": [780, 781, 782, 783], "constant_pad": [784, 785, 786, 787], "expand_dim": [788, 789, 790, 791], "flip": [792, 793, 794, 795], "permute_dim": [796, 797, 798, 799], "repeat": [800, 801, 802, 803], "reshap": [804, 805, 806, 807], "static_rol": 812, "split": 813, "squeez": [814, 815, 816, 817], "stack": [818, 819, 820, 821], "swapax": [822, 823, 824, 825], "tile": [826, 827, 828, 829], "zero_pad": [830, 831, 832, 833], "meta": 834, "fomaml_step": 835, "maml_step": 836, "reptile_step": 837, "nest": 838, "all_nested_indic": 839, "copy_nest": 840, "index_nest": 841, "insert_into_nest_at_index": 842, "insert_into_nest_at_indic": 843, "map": 844, "map_nest_at_index": 845, "map_nest_at_indic": 846, "multi_index_nest": 847, "nested_ani": 848, "nested_indices_wher": 849, "nested_map": 850, "nested_multi_map": 851, "prune_nest_at_index": 852, "prune_nest_at_indic": 853, "set_nest_at_index": 854, "set_nest_at_indic": 855, "layer_norm": [857, 858, 859, 860], "multinomi": 862, "randint": [863, 864], "static_randint": 865, "random_norm": 866, "random_uniform": [867, 868, 869], "static_random_uniform": 870, "seed": 871, "shuffl": 872, "argmax": 874, "argmin": 875, "nonzero": 876, "where": 877, "depend": [878, 879, 880, 884, 886], "output": [878, 879, 880, 884, 886], "unique_al": 879, "unique_count": [880, 882, 883, 884], "static_unique_count": 881, "unique_invers": 885, "unique_valu": 886, "argsort": [888, 889, 890, 891], "static_argsort": 892, "static_sort": 897, "einsum": [899, 900, 901, 902], "max": [903, 904, 905, 906], "mean": [907, 908, 909, 910], "min": [911, 912, 913, 914], "prod": [915, 916, 917, 918], "std": [919, 920, 921, 922], "sum": [923, 924, 925, 926], "var": [927, 928, 929, 930], "all": [932, 933, 934, 935], "static_al": 936, "ani": [937, 938, 939, 940], "static_ani": 941, "content": 942, "overview": 942, "quick": 942, "start": 942, "roadmap": [942, 948], "citat": 942, "inspect": 945, "add_array_spec": 946, "fn_array_spec": 947, "geglu": 951, "to_ivy_modul": 954, "firstlayersiren": 956, "glorotuniform": 957, "Ones": 958, "siren": 959, "conv1dtranspos": 963, "conv2dtranspos": 965, "conv3dtranspos": 967, "depthwiseconv2d": 968, "lstm": 970, "multiheadattent": 972, "layernorm": 976, "adam": 978, "lamb": 979, "lar": 980, "sgd": 982, "sequenti": [983, 984], "verbos": 986, "cprint": 987}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})