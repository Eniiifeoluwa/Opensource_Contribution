Search.setIndex({"docnames": ["backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "DevMapper", "DevMapperMultiProc", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "FirstLayerSiren", "GlorotUniform", "Ones", "Siren", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 5, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 120, 121, 122, 123, 125, 127, 128, 130, 131, 132, 142, 143, 144, 241, 261, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 560, 567, 604, 610, 629, 634, 635, 637, 639, 669, 836, 838, 848, 871, 874, 940, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 166, 167, 168, 169, 170, 171, 174, 179, 180, 185, 188, 193, 194, 199, 202, 205, 210, 215, 218, 223, 228, 233, 236, 241, 242, 243, 244, 245, 246, 247, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 332, 336, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 491, 492, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 541, 546, 551, 556, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 640, 644, 645, 649, 653, 657, 661, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 693, 696, 699, 702, 705, 708, 712, 715, 716, 719, 722, 725, 728, 731, 732, 735, 738, 741, 744, 747, 750, 753, 756, 757, 762, 767, 772, 773, 778, 782, 786, 790, 794, 798, 802, 806, 811, 812, 816, 820, 824, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 859, 860, 861, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 884, 885, 886, 891, 896, 897, 901, 905, 909, 913, 917, 921, 925, 929, 930, 935, 940, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985], "backend_handl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 940], "contextmanag": 0, "modul": [0, 3, 4, 15, 17, 20, 64, 65, 68, 69, 70, 71, 72, 109, 110, 116, 117, 118, 120, 124, 127, 128, 130, 132, 143, 144, 560, 611, 859, 860, 864, 940, 948, 949, 950, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 981, 982], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120, 121, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 945, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985], "base": [0, 18, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 119, 121, 127, 143, 170, 202, 203, 204, 241, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 322, 410, 413, 454, 457, 458, 461, 462, 465, 466, 469, 509, 512, 560, 595, 618, 625, 634, 876, 877, 878, 882, 884, 896, 897, 900, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "object": [0, 68, 69, 70, 71, 72, 129, 132, 170, 188, 191, 241, 258, 275, 317, 634, 836, 839, 841, 843, 844, 845, 850, 851, 852, 853, 859, 870, 953, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972], "__init__": [0, 3, 4, 68, 69, 70, 71, 72, 112, 118, 122, 127, 129, 130, 131, 132, 241, 275, 282, 283, 284, 285, 286, 287, 634, 859, 860, 864, 940, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "choose_random_backend": 0, "exclud": [0, 1, 114, 127, 170, 171, 172, 859, 865, 867], "none": [0, 1, 4, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 117, 121, 122, 123, 124, 125, 127, 129, 131, 132, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 249, 251, 253, 254, 255, 258, 261, 275, 282, 283, 290, 291, 314, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 572, 573, 574, 575, 577, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 598, 600, 601, 605, 611, 613, 616, 617, 618, 619, 624, 625, 631, 634, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 842, 847, 848, 849, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 878, 879, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 951, 952, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "clear_backend_stack": 0, "current_backend": [0, 70, 71, 112, 117], "arg": [0, 3, 20, 23, 24, 25, 68, 69, 127, 129, 131, 275, 282, 296, 300, 304, 316, 560, 617, 951, 952, 971, 972], "kwarg": [0, 3, 23, 24, 25, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 129, 131, 275, 282, 296, 300, 304, 560, 610, 951, 952, 971, 972], "return": [0, 3, 4, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 274, 275, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 849, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 945, 951, 952, 959, 968, 969, 975, 979], "current": [0, 3, 4, 11, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 117, 123, 127, 132, 143, 144, 241, 259, 260, 262, 274, 275, 282, 305, 306, 310, 312, 560, 594, 601, 605, 612, 614, 836, 837, 846, 847, 940], "prioriti": [0, 3, 18, 68, 69, 124], "global_backend": [0, 3], "argument": [0, 3, 4, 13, 19, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 111, 112, 113, 114, 116, 117, 118, 120, 121, 127, 129, 130, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 266, 275, 282, 283, 296, 300, 304, 322, 323, 326, 336, 339, 341, 344, 385, 388, 418, 421, 501, 504, 533, 536, 537, 540, 546, 550, 560, 566, 567, 571, 581, 588, 610, 617, 671, 674, 683, 684, 685, 688, 696, 698, 772, 806, 809, 836, 842, 854, 855, 858, 876, 878, 882, 896, 901, 904, 921, 924, 929, 930, 933, 943, 945, 951, 952, 971, 972], "": [0, 3, 4, 5, 11, 14, 15, 16, 17, 18, 20, 23, 26, 27, 68, 69, 111, 113, 114, 116, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 169, 170, 205, 208, 223, 227, 228, 232, 241, 259, 260, 275, 291, 315, 322, 513, 516, 560, 569, 634, 640, 642, 645, 647, 653, 655, 661, 663, 684, 735, 737, 738, 740, 836, 842, 848, 896, 917, 920, 925, 928, 940, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "paramet": [0, 3, 4, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 112, 113, 116, 129, 130, 143, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 943, 945, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "from": [0, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 170, 171, 172, 174, 177, 180, 183, 188, 191, 193, 194, 197, 205, 208, 210, 213, 218, 221, 236, 240, 241, 247, 250, 266, 275, 282, 283, 291, 306, 310, 315, 316, 322, 426, 429, 533, 536, 560, 581, 588, 589, 592, 628, 634, 640, 642, 653, 655, 671, 679, 682, 684, 696, 698, 735, 737, 747, 749, 772, 790, 793, 802, 805, 812, 815, 832, 833, 834, 835, 836, 838, 848, 849, 859, 860, 861, 862, 864, 865, 867, 871, 875, 876, 877, 883, 896, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 946, 951, 952, 959, 967, 970, 975, 979], "which": [0, 3, 4, 13, 14, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 155, 160, 167, 168, 169, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 193, 194, 197, 199, 200, 202, 203, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 252, 256, 258, 261, 262, 274, 275, 282, 283, 292, 297, 298, 299, 300, 301, 302, 303, 304, 306, 310, 312, 314, 315, 316, 322, 513, 516, 560, 566, 578, 579, 581, 588, 589, 592, 594, 600, 604, 612, 613, 614, 616, 617, 632, 634, 640, 642, 644, 645, 647, 653, 655, 657, 659, 661, 663, 666, 668, 669, 671, 682, 684, 690, 692, 696, 698, 712, 714, 732, 734, 735, 737, 747, 749, 750, 752, 756, 762, 765, 767, 770, 772, 778, 781, 790, 793, 798, 801, 806, 809, 811, 816, 819, 836, 841, 842, 843, 844, 849, 850, 851, 852, 853, 859, 860, 861, 862, 865, 867, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 943, 945, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "try": [0, 3, 12, 14, 15, 17, 18, 19, 20, 68, 69, 120, 121, 129, 144, 560, 631, 940], "infer": [0, 3, 111, 118, 122, 123, 127, 132, 167, 168, 170, 171, 172, 174, 177, 180, 183, 193, 194, 197, 210, 213, 218, 221, 236, 240, 322, 426, 429, 560, 597, 622, 772, 802, 805], "when": [0, 3, 13, 14, 17, 18, 19, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 144, 241, 244, 275, 322, 336, 339, 414, 417, 509, 512, 560, 571, 604, 625, 756, 757, 760, 762, 765, 767, 770, 836, 847, 871, 872, 873, 875, 896, 901, 904, 909, 912, 917, 920, 925, 928, 940, 971, 972], "i": [0, 3, 4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 155, 156, 160, 167, 168, 169, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 247, 250, 256, 262, 263, 264, 274, 275, 282, 283, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 315, 316, 318, 319, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 361, 364, 369, 372, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 422, 425, 434, 437, 438, 441, 442, 445, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 490, 491, 492, 495, 497, 500, 501, 504, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 546, 550, 551, 555, 556, 559, 560, 561, 564, 568, 569, 571, 572, 573, 575, 578, 579, 581, 585, 587, 588, 599, 600, 604, 606, 607, 608, 609, 610, 611, 615, 616, 617, 620, 632, 633, 634, 640, 642, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 671, 674, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 708, 711, 712, 714, 716, 718, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 741, 743, 744, 746, 747, 749, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 816, 819, 828, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 849, 854, 855, 858, 859, 860, 864, 865, 867, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "global": [0, 3, 4, 5, 11, 68, 69, 70, 71, 72, 117, 118, 122, 123, 127, 241, 253, 254, 255, 275, 282, 283, 314, 315, 316, 560, 595, 596, 615, 618, 619, 620, 624, 625, 854, 855, 858, 973, 974], "set": [0, 3, 4, 5, 11, 13, 16, 18, 23, 26, 27, 57, 68, 69, 102, 111, 112, 117, 119, 120, 121, 122, 123, 124, 127, 129, 130, 275, 291, 301, 302, 313, 314, 315, 316, 322, 353, 356, 560, 561, 564, 618, 619, 620, 621, 634, 640, 642, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 684, 690, 692, 712, 714, 716, 718, 725, 727, 732, 734, 836, 837, 846, 847, 848, 852, 853, 859, 869, 871, 872, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 917, 920, 925, 928, 959, 968, 975, 976, 977, 978, 979, 980], "ret": [0, 3, 4, 11, 23, 24, 25, 26, 27, 68, 69, 112, 113, 127, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 274, 275, 282, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 564, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 638, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 943, 945, 951, 952, 975, 979], "exampl": [0, 3, 4, 5, 11, 15, 17, 18, 19, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 143, 144, 155, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 193, 194, 197, 205, 208, 215, 216, 218, 221, 233, 235, 236, 240, 241, 244, 247, 248, 249, 250, 251, 259, 260, 275, 291, 292, 294, 306, 307, 308, 309, 310, 313, 315, 317, 319, 320, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 357, 360, 361, 364, 365, 368, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 410, 413, 418, 419, 420, 421, 426, 429, 430, 433, 446, 449, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 568, 569, 577, 578, 585, 588, 589, 590, 591, 592, 593, 596, 607, 622, 623, 628, 629, 630, 634, 635, 636, 637, 638, 639, 671, 672, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 705, 707, 716, 718, 722, 724, 735, 737, 741, 743, 744, 746, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 917, 920, 921, 924, 929, 930, 933, 940], "If": [0, 3, 4, 5, 13, 16, 17, 18, 19, 20, 23, 26, 27, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 132, 144, 170, 171, 172, 179, 180, 183, 185, 186, 193, 194, 197, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 266, 275, 291, 315, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 454, 457, 458, 461, 466, 469, 470, 473, 478, 481, 482, 485, 492, 495, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 560, 604, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 684, 685, 688, 690, 692, 712, 714, 716, 718, 725, 727, 728, 730, 732, 734, 735, 737, 747, 749, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 786, 789, 790, 793, 806, 809, 811, 812, 815, 816, 819, 832, 833, 834, 836, 848, 849, 859, 864, 865, 867, 871, 872, 873, 874, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940], "import": [0, 3, 14, 19, 64, 65, 109, 110, 112, 113, 114, 118, 120, 121, 122, 123, 124, 127, 129, 130, 132, 144, 275, 313, 940, 946], "numpi": [0, 3, 4, 5, 13, 14, 18, 19, 68, 69, 116, 118, 122, 123, 124, 125, 127, 129, 132, 560, 629, 896, 897, 900, 940], "np": [0, 3, 120, 122, 123, 124, 125, 129, 130, 132, 940], "x": [0, 3, 11, 20, 23, 26, 27, 30, 31, 34, 35, 36, 37, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 103, 104, 107, 108, 112, 113, 114, 117, 118, 121, 124, 125, 127, 129, 130, 131, 132, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 170, 174, 177, 178, 180, 183, 184, 188, 191, 192, 194, 197, 198, 205, 208, 210, 213, 214, 218, 221, 222, 223, 224, 227, 228, 229, 232, 233, 235, 236, 237, 240, 241, 244, 246, 247, 248, 249, 250, 251, 256, 275, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 306, 310, 315, 317, 322, 323, 324, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 406, 409, 410, 413, 414, 417, 418, 419, 420, 421, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 478, 481, 490, 491, 497, 500, 505, 508, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 564, 568, 569, 570, 572, 573, 575, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 600, 602, 603, 604, 606, 607, 608, 609, 613, 622, 623, 626, 628, 629, 630, 632, 633, 634, 644, 649, 651, 652, 666, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 735, 737, 738, 740, 741, 743, 744, 746, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 836, 837, 842, 846, 847, 848, 854, 855, 858, 859, 861, 862, 863, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 894, 895, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 934, 935, 938, 939, 940, 959, 970], "arrai": [0, 3, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 144, 145, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 169, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 207, 208, 209, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 245, 246, 247, 249, 250, 251, 256, 258, 261, 263, 264, 266, 270, 275, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 306, 310, 312, 316, 317, 322, 323, 325, 326, 327, 328, 331, 332, 335, 336, 338, 339, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 387, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 420, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 559, 560, 561, 563, 564, 565, 568, 569, 570, 572, 573, 575, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 597, 599, 600, 601, 602, 603, 604, 606, 607, 609, 612, 613, 614, 616, 617, 622, 623, 626, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 642, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 775, 776, 777, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 808, 809, 810, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 838, 848, 849, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 943, 945, 959, 967, 970], "2": [0, 3, 17, 18, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 114, 118, 121, 125, 126, 127, 129, 130, 131, 132, 144, 155, 157, 158, 159, 160, 166, 169, 170, 193, 194, 197, 205, 208, 215, 216, 218, 221, 236, 240, 241, 244, 247, 248, 249, 250, 251, 275, 291, 292, 294, 306, 308, 310, 317, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 349, 352, 353, 356, 361, 364, 365, 368, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 410, 413, 418, 419, 420, 421, 426, 429, 430, 433, 446, 449, 450, 453, 466, 469, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 568, 569, 572, 573, 575, 578, 585, 588, 589, 590, 591, 592, 593, 607, 622, 623, 628, 634, 635, 636, 637, 638, 639, 671, 674, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 705, 707, 708, 711, 712, 714, 716, 718, 722, 724, 725, 727, 728, 730, 735, 737, 741, 742, 743, 744, 746, 750, 751, 752, 756, 757, 760, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 815, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 929, 930, 933, 940], "0": [0, 3, 18, 28, 29, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 50, 51, 56, 57, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 127, 129, 130, 131, 132, 155, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 185, 186, 187, 199, 200, 202, 203, 204, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 244, 247, 249, 250, 251, 258, 275, 276, 279, 282, 284, 288, 291, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 306, 310, 313, 315, 316, 320, 322, 323, 324, 326, 327, 328, 331, 332, 335, 336, 339, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 369, 372, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 419, 420, 421, 430, 433, 450, 453, 454, 457, 458, 461, 466, 469, 490, 491, 492, 495, 497, 500, 501, 504, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 568, 569, 572, 573, 575, 577, 578, 579, 585, 588, 589, 592, 593, 598, 607, 613, 616, 617, 622, 628, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 657, 658, 659, 660, 671, 672, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 705, 707, 735, 737, 741, 743, 744, 745, 746, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 797, 798, 801, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 823, 828, 830, 836, 848, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 889, 896, 897, 900, 901, 904, 905, 908, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 929, 930, 933, 940, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982], "print": [0, 3, 4, 5, 11, 17, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 114, 121, 127, 129, 130, 131, 155, 157, 158, 159, 160, 161, 164, 166, 170, 193, 194, 197, 205, 208, 215, 216, 218, 221, 233, 235, 236, 240, 241, 244, 247, 248, 249, 250, 251, 259, 260, 275, 292, 306, 307, 308, 309, 310, 312, 315, 319, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 357, 360, 361, 364, 365, 368, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 410, 413, 418, 419, 420, 421, 426, 429, 430, 433, 446, 449, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 568, 569, 577, 578, 585, 588, 589, 590, 591, 592, 593, 596, 614, 622, 623, 628, 629, 630, 634, 635, 636, 638, 639, 671, 672, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 705, 707, 722, 724, 735, 737, 741, 743, 744, 746, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 776, 777, 786, 789, 790, 793, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 815, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 917, 920, 921, 924, 929, 930, 933, 940], "function": [0, 3, 4, 5, 13, 18, 20, 21, 22, 23, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 124, 126, 128, 129, 130, 131, 142, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 179, 180, 181, 183, 185, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 202, 203, 205, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 225, 227, 228, 230, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 943, 945, 948, 949, 950, 975, 978, 980], "py": [0, 3, 4, 18, 112, 113, 117, 118, 122, 123, 125, 127, 129, 131, 132, 859, 860, 864], "noqa": [0, 3, 4, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 361, 364, 381, 384, 385, 388, 393, 396, 450, 453, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 684, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 896, 901, 904], "The": [0, 3, 4, 12, 13, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 143, 155, 156, 157, 160, 166, 167, 168, 170, 171, 172, 188, 191, 202, 203, 223, 227, 228, 232, 241, 242, 243, 244, 252, 257, 259, 260, 262, 265, 270, 274, 275, 282, 283, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 560, 566, 568, 571, 572, 580, 581, 587, 589, 592, 602, 603, 604, 606, 607, 608, 609, 611, 616, 617, 618, 619, 620, 623, 624, 625, 633, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 666, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 811, 824, 827, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 864, 871, 872, 873, 874, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979], "set_backend": [0, 3, 4, 11, 117, 118, 119, 122, 241, 259, 260, 275, 313, 560, 622, 940], "ha": [0, 3, 4, 13, 14, 15, 18, 68, 69, 113, 114, 117, 118, 119, 122, 123, 127, 129, 131, 132, 143, 144, 170, 205, 208, 275, 291, 322, 323, 326, 492, 495, 509, 512, 684, 708, 711, 731, 732, 734, 735, 737, 744, 746, 772, 786, 789, 812, 815, 876, 877, 878, 882, 884, 896, 905, 908, 913, 916, 917, 920, 921, 924, 925, 928], "over": [0, 3, 13, 15, 17, 64, 65, 68, 69, 109, 110, 113, 114, 118, 124, 129, 144, 684, 712, 714, 741, 743, 747, 749, 750, 752, 854, 855, 858, 859, 865, 867, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 973, 974], "ani": [0, 3, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 62, 63, 64, 65, 68, 69, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 275, 317, 322, 323, 326, 336, 339, 341, 344, 385, 388, 402, 405, 418, 421, 430, 433, 450, 453, 501, 504, 533, 536, 537, 540, 546, 550, 560, 561, 564, 581, 582, 583, 584, 585, 588, 599, 606, 607, 608, 609, 624, 625, 634, 644, 671, 674, 681, 683, 684, 685, 688, 696, 698, 772, 806, 809, 832, 833, 834, 835, 836, 842, 846, 854, 855, 858, 859, 865, 867, 876, 878, 882, 896, 901, 904, 929, 930, 933, 940], "pass": [0, 3, 19, 64, 65, 68, 69, 70, 71, 72, 109, 110, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 129, 144, 241, 252, 275, 282, 316, 322, 353, 356, 560, 571, 604, 634, 669, 832, 833, 834, 951, 952, 971, 972, 975, 979, 981, 982], "jax": [0, 3, 4, 5, 14, 15, 18, 19, 118, 122, 123, 124, 125, 127, 129, 132, 144, 634, 649, 651, 876, 877, 878, 882, 884, 940], "get_backend": [0, 117, 118], "specifi": [0, 4, 68, 69, 111, 116, 117, 122, 123, 124, 125, 127, 130, 131, 132, 170, 171, 172, 179, 193, 199, 200, 202, 203, 215, 216, 223, 227, 228, 232, 233, 235, 241, 244, 246, 275, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 310, 312, 315, 316, 317, 322, 513, 516, 560, 566, 578, 588, 589, 592, 599, 632, 684, 696, 698, 712, 714, 741, 743, 744, 746, 747, 749, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 790, 793, 806, 809, 812, 815, 816, 819, 828, 831, 836, 841, 843, 844, 850, 851, 852, 853, 871, 872, 873, 876, 877, 878, 882, 884, 885, 886, 889, 896, 897, 900, 913, 916, 921, 924, 929, 930, 933, 935, 938], "isn": [0, 4, 18, 130, 144], "t": [0, 4, 14, 15, 17, 18, 19, 20, 64, 65, 109, 110, 114, 122, 127, 129, 130, 131, 132, 144, 560, 569, 671, 680, 681], "associ": [0, 4, 18, 117, 119, 144, 322, 336, 339, 492, 495, 684, 716, 718, 725, 727, 753, 755], "option": [0, 4, 17, 18, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 109, 110, 112, 113, 114, 117, 121, 122, 123, 124, 125, 127, 132, 144, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 252, 253, 254, 255, 262, 274, 275, 291, 315, 316, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 566, 572, 573, 575, 578, 579, 580, 582, 583, 584, 586, 588, 589, 592, 600, 611, 613, 616, 617, 624, 625, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 842, 847, 848, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 875, 876, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "str": [0, 4, 23, 24, 25, 68, 69, 122, 123, 167, 168, 170, 205, 208, 241, 242, 252, 253, 254, 257, 258, 261, 262, 263, 264, 267, 268, 269, 274, 275, 288, 291, 292, 294, 297, 298, 299, 300, 316, 560, 566, 580, 582, 583, 584, 611, 616, 617, 671, 672, 674, 676, 677, 678, 684, 728, 730, 832, 833, 834, 835, 836, 842, 896, 897, 900], "we": [0, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 64, 65, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 143, 144, 634, 644, 940, 946], "want": [0, 4, 14, 16, 17, 18, 64, 65, 109, 110, 116, 130, 131, 132, 144], "retriev": [0, 4, 18, 560, 566], "e": [0, 4, 14, 15, 16, 18, 20, 111, 121, 130, 144, 169, 170, 205, 208, 241, 243, 266, 275, 288, 322, 323, 326, 353, 356, 369, 372, 377, 380, 385, 388, 410, 413, 418, 421, 422, 425, 434, 437, 454, 457, 462, 465, 490, 491, 497, 500, 509, 512, 513, 516, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 684, 690, 692, 708, 711, 716, 718, 725, 727, 732, 734, 735, 737, 750, 752, 772, 816, 819, 859, 864, 865, 867, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928], "one": [0, 4, 14, 15, 17, 18, 68, 69, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 114, 117, 120, 121, 122, 124, 125, 126, 129, 130, 132, 144, 170, 171, 172, 205, 208, 241, 245, 247, 250, 275, 301, 302, 303, 304, 316, 323, 327, 336, 340, 560, 561, 563, 564, 565, 589, 593, 610, 613, 616, 617, 684, 685, 689, 708, 711, 712, 714, 722, 724, 728, 730, 747, 749, 750, 752, 772, 773, 777, 786, 789, 790, 793, 806, 809, 810, 812, 815, 861, 863, 871, 872, 874, 876, 877, 878, 882, 883, 884, 896, 897, 900, 940], "default": [0, 4, 18, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 113, 114, 117, 118, 121, 122, 123, 125, 131, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 253, 254, 255, 256, 275, 282, 283, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 311, 313, 314, 315, 316, 317, 320, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 564, 566, 572, 573, 575, 578, 579, 582, 583, 584, 586, 587, 588, 589, 592, 597, 598, 599, 600, 601, 604, 605, 606, 607, 609, 610, 611, 613, 615, 616, 617, 620, 622, 624, 625, 632, 633, 634, 635, 638, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 849, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "torch": [0, 4, 11, 18, 112, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 167, 168, 241, 259, 260, 275, 313, 560, 622, 772, 786, 789, 940], "tensorflow": [0, 4, 11, 14, 15, 18, 19, 122, 123, 124, 125, 127, 132, 144, 940], "mxnet": [0, 4, 14, 19, 122, 123, 124, 127, 132, 940], "either": [0, 4, 11, 17, 18, 20, 68, 69, 113, 114, 117, 118, 121, 122, 123, 127, 129, 130, 144, 170, 188, 191, 322, 336, 339, 353, 356, 438, 441, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 513, 516, 521, 524, 525, 528, 546, 550, 560, 581, 606, 610, 611, 684, 708, 711, 832, 833, 834, 835, 896, 913, 916, 921, 924, 959, 970, 971, 972], "doesn": [0, 4, 17, 20, 114, 122, 127, 144], "matter": [0, 4, 13, 114], "been": [0, 4, 18, 113, 117, 118, 121, 122, 123, 125, 127, 143, 144, 275, 291, 560, 582, 583, 584, 859, 860], "ivy_np": [0, 4], "us": [0, 4, 11, 15, 18, 19, 34, 35, 64, 65, 68, 69, 70, 71, 72, 79, 80, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 143, 144, 155, 157, 158, 159, 160, 161, 164, 166, 169, 241, 257, 275, 282, 283, 307, 311, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 341, 344, 361, 364, 381, 384, 393, 396, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 560, 588, 595, 596, 610, 616, 617, 618, 619, 624, 625, 634, 635, 638, 640, 642, 653, 655, 657, 659, 671, 677, 679, 680, 682, 683, 684, 693, 695, 696, 698, 712, 714, 756, 757, 760, 772, 786, 789, 790, 793, 798, 801, 806, 809, 820, 823, 832, 833, 834, 835, 836, 837, 839, 845, 846, 847, 849, 854, 855, 858, 871, 872, 873, 874, 876, 877, 896, 897, 900, 929, 930, 933, 940, 959, 967, 970, 971, 972, 973, 974, 975, 977, 978], "ivy_jax": [0, 4], "subsequ": [0, 5, 17, 114, 116, 117, 120, 124, 125, 131], "call": [0, 5, 11, 14, 20, 70, 71, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 275, 316, 560, 615, 620, 631, 634, 644, 836, 837, 842, 846, 847, 959, 970, 971, 972, 975, 979], "nativ": [0, 5, 23, 25, 26, 27, 68, 69, 122, 124, 129, 130, 170, 210, 213, 241, 242, 243, 252, 275, 288, 289, 290, 291, 292, 311, 318, 321, 560, 604, 606, 609, 951, 952], "native_arrai": [0, 5, 11, 28, 29, 36, 37, 73, 74, 81, 82, 155, 157, 158, 159, 160, 161, 164, 166, 170, 205, 208, 241, 247, 250, 275, 294, 310, 322, 323, 326, 341, 344, 361, 364, 381, 384, 385, 388, 418, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 533, 536, 537, 540, 551, 555, 560, 561, 562, 563, 564, 565, 569, 577, 578, 585, 588, 589, 592, 623, 628, 629, 630, 634, 635, 638, 671, 674, 677, 678, 683, 684, 690, 692, 693, 695, 696, 698, 741, 743, 756, 757, 760, 767, 770, 772, 773, 776, 786, 789, 790, 793, 798, 801, 811, 820, 823, 854, 855, 858, 859, 860, 871, 872, 873, 874, 875, 876, 877, 878, 882, 896, 897, 900, 901, 904, 929, 930, 933], "1": [0, 5, 11, 14, 15, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 114, 117, 121, 124, 125, 126, 127, 129, 130, 131, 132, 144, 155, 157, 158, 159, 160, 166, 170, 171, 172, 173, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 236, 240, 241, 244, 247, 248, 249, 250, 251, 258, 275, 278, 281, 282, 286, 291, 292, 294, 296, 300, 304, 306, 309, 310, 317, 322, 323, 324, 325, 326, 328, 331, 332, 335, 336, 337, 338, 339, 340, 341, 344, 353, 356, 361, 364, 365, 368, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 419, 420, 421, 426, 429, 430, 433, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 490, 491, 497, 500, 501, 504, 509, 512, 517, 520, 521, 524, 525, 528, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 568, 569, 577, 578, 585, 588, 589, 590, 591, 592, 593, 607, 613, 616, 617, 622, 623, 625, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 705, 707, 716, 718, 722, 724, 732, 734, 735, 737, 741, 743, 744, 746, 747, 748, 749, 750, 752, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 820, 823, 836, 848, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 904, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "type": [0, 5, 11, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 274, 275, 288, 289, 290, 291, 292, 294, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 569, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 602, 603, 604, 606, 607, 608, 609, 613, 616, 617, 618, 619, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970], "ndarrai": [0, 5, 120, 122, 123, 124, 125, 129, 170, 174, 177, 210, 213, 560, 629], "Or": [0, 5, 130], "jaxlib": [0, 5, 17, 122, 123, 125, 129], "xla_extens": [0, 5, 122, 123, 125, 129], "devicearrai": [0, 5, 129], "try_import_ivy_jax": 0, "warn": [0, 6, 7, 8, 9, 10], "fals": [0, 6, 7, 8, 9, 10, 23, 24, 25, 26, 27, 36, 37, 44, 45, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 121, 124, 130, 131, 132, 161, 163, 165, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 244, 247, 249, 250, 251, 256, 275, 291, 292, 303, 307, 308, 311, 316, 319, 321, 322, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 364, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 481, 482, 484, 485, 486, 488, 492, 494, 496, 497, 499, 501, 503, 504, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 560, 561, 562, 563, 564, 565, 568, 569, 573, 574, 578, 581, 585, 587, 589, 591, 593, 597, 604, 606, 607, 609, 610, 622, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 684, 685, 686, 687, 688, 689, 708, 710, 712, 713, 714, 735, 737, 750, 751, 752, 757, 759, 761, 762, 764, 766, 767, 769, 771, 772, 773, 775, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 811, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 849, 855, 857, 859, 860, 865, 866, 868, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 951, 952, 971, 972, 975, 976, 977, 978, 979, 980], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 118], "unset": [0, 11, 118, 127, 129], "adjust": [0, 11, 896, 917, 920, 925, 928], "dict": [0, 11, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 121, 130, 131, 275, 282, 283, 291, 294, 297, 298, 299, 300, 560, 566, 582, 583, 584, 836, 838, 839, 842, 845, 848, 849], "previous": [0, 11, 17, 20, 116, 117, 127, 560, 571], "otherwis": [0, 11, 23, 24, 25, 26, 27, 68, 69, 120, 122, 123, 125, 127, 129, 170, 171, 172, 241, 244, 247, 250, 253, 254, 255, 275, 291, 322, 434, 437, 438, 441, 442, 445, 560, 570, 631, 634, 649, 651, 666, 684, 685, 688, 693, 695, 747, 749, 750, 752, 832, 833, 834, 836, 849, 871, 872, 873, 875, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "implement": [0, 11, 19, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 241, 244, 266, 275, 317, 322, 323, 326, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 353, 356, 389, 392, 393, 396, 410, 413, 414, 417, 454, 457, 458, 461, 462, 465, 466, 469, 492, 495, 509, 512, 513, 516, 525, 528, 529, 532, 546, 550, 551, 555, 684, 699, 701, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 940], "wa": [0, 11, 14, 68, 69, 114, 127, 129, 560, 631, 836, 849, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "last": [0, 11, 15, 18, 68, 69, 114, 118, 144, 155, 160, 275, 291, 671, 681, 684, 690, 692, 696, 698, 712, 714, 744, 746, 747, 749, 756, 762, 765, 767, 770, 772, 790, 793, 806, 809, 811, 816, 819, 885, 886, 889, 891, 894, 929, 930, 933, 935, 938, 959, 969], "henc": [0, 11, 876, 877, 878, 882, 884], "here": [0, 11, 17, 18, 19, 112, 114, 121, 125, 127, 128, 129, 130, 131, 132, 143, 144], "tensor": [0, 11, 13, 68, 69, 112, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 170, 199, 200, 202, 203, 241, 256, 322, 361, 364, 490, 491, 560, 613, 616, 617, 671, 679, 681, 684, 741, 743, 772, 786, 789, 802, 805, 811, 859, 860, 871, 874, 940, 959, 967, 969], "howev": [0, 11, 14, 17, 19, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 129, 130, 131, 132, 144], "befor": [0, 11, 17, 18, 19, 68, 69, 113, 116, 120, 122, 123, 124, 127, 130, 144, 275, 316, 322, 556, 559, 671, 682, 683, 832, 833, 834, 836, 848, 876, 877, 878, 882, 884, 896, 913, 916, 921, 924], "becom": [0, 11, 13, 15, 18, 114, 121, 127, 132, 144, 772, 773, 776], "swap": [0, 11, 772, 820, 823], "python": [0, 11, 12, 13, 14, 17, 18, 20, 127, 129, 130, 144, 170, 171, 172, 275, 311, 321, 322, 513, 516, 940, 946], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 23, 24, 25, 26, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 68, 69, 71, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 111, 115, 117, 118, 119, 120, 123, 125, 126, 129, 132, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 944, 945, 946, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 982, 983, 985], "op": [0, 11, 112, 127, 144], "eagertensor": [0, 11], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 24, 25, 26, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 68, 69, 71, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 944, 945, 946, 949, 950, 952, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 982, 983, 985], "backend": [3, 4, 5, 11, 13, 18, 19, 23, 25, 27, 68, 69, 111, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 129, 132, 241, 259, 260, 262, 274, 275, 307, 309, 319, 560, 601, 604, 605, 611, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 669, 940, 946, 951, 952, 975, 976, 977, 978, 979, 980], "ml": [12, 14, 15, 16, 126, 127, 128, 130, 131, 132, 143, 940, 946], "explos": [12, 14, 940], "A": [12, 13, 14, 15, 20, 68, 69, 70, 71, 72, 111, 116, 117, 121, 122, 123, 127, 130, 144, 170, 185, 186, 210, 213, 275, 282, 283, 316, 322, 505, 508, 560, 596, 628, 684, 722, 724, 731, 732, 734, 735, 737, 772, 811, 816, 819, 836, 837, 839, 841, 843, 844, 845, 846, 847, 850, 851, 852, 853, 896, 897, 900, 929, 930, 933, 935, 938, 940, 981, 982], "huge": [12, 14, 130, 940], "number": [12, 13, 17, 68, 69, 70, 71, 72, 114, 121, 123, 124, 127, 130, 132, 167, 168, 169, 170, 171, 172, 174, 177, 185, 186, 199, 200, 202, 203, 205, 208, 210, 213, 241, 245, 257, 258, 261, 263, 264, 266, 275, 308, 309, 310, 322, 336, 339, 353, 356, 385, 388, 418, 421, 422, 425, 490, 491, 492, 495, 509, 512, 513, 516, 517, 520, 521, 524, 556, 559, 560, 561, 564, 587, 596, 597, 612, 630, 633, 671, 682, 684, 696, 698, 699, 701, 716, 718, 731, 735, 737, 747, 749, 772, 773, 776, 782, 785, 794, 797, 798, 801, 806, 809, 811, 816, 819, 824, 827, 828, 831, 832, 833, 834, 835, 859, 860, 869, 871, 874, 876, 877, 878, 882, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970], "tool": [12, 15, 18, 128, 132, 143, 144, 940], "have": [12, 13, 14, 15, 17, 18, 19, 20, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 143, 144, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 245, 246, 258, 275, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 582, 583, 584, 586, 589, 592, 600, 613, 616, 617, 634, 649, 651, 666, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940], "explod": [12, 13, 940], "onto": [12, 13, 275, 301, 302, 836, 842, 848, 940], "scene": [12, 13, 111, 126, 128, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 940], "b": [12, 15, 16, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 114, 117, 118, 121, 126, 127, 128, 130, 131, 132, 142, 241, 247, 249, 250, 251, 275, 294, 322, 323, 325, 326, 327, 336, 338, 339, 340, 341, 344, 361, 364, 381, 384, 385, 387, 388, 393, 396, 418, 420, 421, 430, 433, 450, 453, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 549, 550, 551, 552, 554, 555, 560, 561, 563, 564, 565, 568, 569, 577, 578, 585, 588, 589, 591, 592, 593, 630, 634, 635, 637, 638, 639, 671, 674, 677, 678, 683, 684, 685, 687, 688, 689, 690, 692, 693, 695, 696, 698, 722, 724, 732, 734, 741, 743, 753, 755, 756, 757, 760, 772, 773, 775, 776, 777, 786, 789, 790, 793, 798, 801, 806, 808, 809, 810, 816, 819, 820, 823, 854, 855, 858, 859, 861, 863, 864, 865, 867, 871, 873, 874, 875, 876, 878, 879, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 929, 930, 933, 940, 946], "why": [12, 14, 18, 121, 124, 125, 129, 940], "unifi": [12, 14, 68, 69, 120, 127, 144, 275, 301, 302, 303, 304, 316, 940], "should": [12, 14, 17, 18, 19, 20, 68, 69, 70, 71, 72, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 131, 167, 168, 170, 205, 208, 223, 227, 228, 232, 241, 246, 275, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 410, 413, 414, 417, 418, 421, 434, 437, 438, 441, 442, 445, 446, 449, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 571, 604, 613, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 705, 707, 708, 711, 716, 718, 722, 724, 725, 727, 728, 730, 732, 734, 735, 737, 741, 743, 744, 746, 747, 749, 750, 752, 772, 802, 805, 859, 870, 871, 872, 873, 876, 877, 878, 882, 884, 896, 897, 900, 901, 904, 905, 908, 913, 916, 917, 920, 921, 924, 925, 928, 940], "them": [12, 13, 14, 15, 116, 118, 120, 121, 127, 129, 130, 131, 144, 940], "c": [12, 14, 15, 16, 17, 97, 98, 111, 114, 117, 121, 126, 127, 128, 130, 144, 322, 501, 504, 560, 568, 569, 577, 630, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 677, 772, 816, 819, 861, 863, 871, 874, 896, 897, 900, 917, 920, 925, 928, 940, 946], "standard": [12, 111, 112, 113, 115, 116, 120, 124, 125, 144, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 258, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 450, 453, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 684, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 859, 864, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 917, 920, 925, 928, 929, 930, 933, 940, 946, 973, 974], "re": [12, 13, 14, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 144, 275, 316, 560, 582, 684, 741, 743, 772, 806, 809, 871, 875, 940], "collabor": [12, 13, 14, 940], "consortium": [12, 14, 940, 946], "data": [12, 14, 68, 69, 70, 71, 72, 111, 112, 113, 117, 119, 121, 123, 124, 125, 129, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 242, 243, 244, 246, 247, 250, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 270, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 288, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 568, 569, 606, 607, 609, 626, 634, 649, 651, 669, 671, 680, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 732, 734, 735, 737, 741, 743, 744, 746, 747, 749, 750, 752, 772, 786, 789, 790, 793, 794, 797, 802, 805, 806, 809, 812, 815, 816, 819, 859, 870, 871, 872, 873, 874, 885, 886, 889, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 946, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970], "api": [12, 13, 17, 18, 111, 113, 114, 116, 117, 119, 120, 122, 123, 124, 125, 126, 128, 130, 144, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 450, 453, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 684, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933, 940, 946], "open": [13, 14, 15, 16, 17, 20, 113, 143, 170, 171, 172, 859, 861, 862, 865, 867, 940], "project": [13, 14, 15, 17, 18, 20, 112, 118, 129, 131, 143, 144, 859, 860, 864], "grown": 13, "consider": [13, 114, 125], "recent": [13, 14, 17, 18], "year": [13, 15, 144, 940], "especi": [13, 17], "deep": [13, 16, 18, 19, 68, 69, 126, 130, 940], "learn": [13, 14, 17, 19, 111, 117, 126, 132, 143, 322, 426, 429, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 832, 833, 834, 835, 940, 975, 976, 977, 978, 979, 980], "can": [13, 14, 15, 16, 17, 18, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 170, 174, 177, 210, 213, 241, 247, 250, 275, 314, 315, 316, 684, 705, 707, 772, 802, 805, 859, 861, 862, 940, 946], "seen": [13, 14, 114, 129, 130], "rapidli": 13, "increas": [13, 275, 296, 300, 304, 772, 782, 785, 828, 831, 836, 848], "github": [13, 18, 19, 113, 116], "repo": [13, 14, 15, 17, 18, 115, 127, 129, 130, 131, 132, 143, 940, 946], "contain": [13, 17, 18, 19, 20, 23, 26, 27, 36, 37, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 122, 124, 125, 126, 127, 128, 131, 132, 144, 155, 158, 159, 161, 164, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 275, 293, 294, 297, 306, 310, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 562, 564, 566, 569, 572, 573, 575, 577, 578, 585, 588, 589, 592, 599, 608, 628, 629, 630, 634, 635, 638, 640, 645, 649, 653, 657, 661, 671, 674, 677, 678, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 782, 786, 789, 790, 793, 794, 797, 798, 801, 802, 806, 809, 811, 812, 816, 820, 823, 824, 828, 832, 833, 834, 835, 836, 849, 854, 855, 858, 859, 860, 861, 864, 865, 867, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 889, 891, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 975, 979, 981, 982], "term": [13, 18, 121, 671, 681, 959, 969], "time": [13, 14, 15, 17, 18, 19, 116, 117, 121, 122, 125, 127, 130, 132, 144, 634, 640, 642, 653, 655, 671, 681, 772, 824, 827, 832, 833, 834, 835, 871, 872, 873, 876, 877, 878, 882, 959, 970, 971, 972], "These": [13, 14, 15, 18, 113, 114, 116, 117, 121, 122, 124, 125, 127, 128, 130, 131, 132, 144, 684, 699, 701, 940, 946], "ar": [13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 145, 153, 170, 171, 172, 275, 282, 283, 306, 310, 312, 316, 322, 389, 392, 478, 481, 482, 485, 517, 520, 525, 528, 546, 550, 560, 561, 564, 568, 569, 570, 594, 600, 601, 605, 612, 614, 626, 671, 680, 684, 690, 692, 708, 711, 712, 714, 716, 718, 725, 727, 735, 737, 738, 740, 747, 749, 772, 773, 776, 790, 793, 806, 809, 836, 838, 842, 848, 859, 864, 865, 867, 871, 872, 873, 874, 876, 877, 940, 981, 982], "written": [13, 17, 112, 113, 120, 124, 125, 127, 129, 132, 144], "mani": [13, 14, 15, 17, 18, 19, 68, 69, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 144, 772, 811], "differ": [13, 14, 15, 17, 18, 68, 69, 70, 71, 72, 111, 112, 113, 114, 116, 117, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 144, 241, 258, 275, 293, 294, 297, 298, 322, 336, 339, 492, 495, 541, 545, 671, 680, 772, 816, 819, 896, 913, 916, 921, 924, 940], "while": [13, 14, 17, 18, 68, 69, 70, 71, 72, 114, 118, 124, 131, 132, 144, 322, 478, 481, 482, 485, 876, 877, 896, 905, 908], "thi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 161, 162, 163, 165, 170, 171, 172, 174, 175, 177, 179, 180, 181, 183, 185, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 202, 203, 205, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 225, 227, 228, 230, 232, 233, 235, 236, 238, 240, 241, 247, 248, 249, 250, 251, 275, 296, 300, 304, 311, 316, 321, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 361, 364, 377, 380, 381, 384, 385, 386, 387, 388, 393, 396, 414, 417, 418, 419, 420, 421, 450, 453, 478, 481, 482, 485, 501, 504, 513, 516, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 565, 587, 588, 589, 590, 591, 593, 604, 615, 620, 634, 635, 636, 637, 639, 640, 642, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 669, 671, 674, 680, 683, 684, 685, 686, 687, 688, 689, 693, 695, 696, 698, 712, 714, 731, 772, 773, 774, 775, 777, 786, 789, 790, 793, 802, 805, 806, 807, 808, 809, 810, 816, 819, 836, 842, 848, 849, 854, 855, 858, 861, 863, 871, 872, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 889, 896, 901, 904, 905, 908, 917, 920, 925, 928, 929, 930, 933, 940, 946, 971, 972, 975, 976, 977, 978, 979, 980], "wonder": [13, 15, 129], "thing": [13, 14, 15, 17, 18, 19, 118, 129, 130], "research": [13, 143], "develop": [13, 14, 15, 16, 17, 18, 19, 143, 144, 940], "also": [13, 14, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 161, 162, 163, 165, 170, 171, 172, 174, 175, 177, 179, 180, 181, 183, 185, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 202, 203, 205, 208, 210, 211, 215, 216, 218, 219, 221, 223, 225, 227, 228, 230, 232, 233, 235, 236, 238, 240, 241, 247, 248, 249, 250, 251, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 361, 364, 381, 384, 385, 386, 387, 388, 393, 396, 418, 419, 420, 421, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 565, 588, 589, 590, 591, 593, 604, 634, 635, 636, 637, 639, 640, 642, 671, 674, 680, 683, 684, 685, 686, 687, 688, 689, 693, 695, 696, 698, 772, 773, 774, 775, 777, 786, 789, 790, 793, 806, 807, 808, 809, 810, 832, 833, 834, 835, 836, 837, 838, 846, 847, 848, 854, 855, 858, 861, 863, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933, 959, 969], "consid": [13, 14, 68, 69, 112, 117, 128, 129, 130, 322, 478, 481, 482, 485, 876, 877, 878, 882, 884], "speed": 13, "evolv": 13, "sharabl": 13, "code": [13, 14, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 83, 84, 111, 113, 114, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 155, 157, 158, 159, 160, 161, 164, 166, 275, 294, 317, 322, 381, 384, 537, 540, 634, 635, 637, 638, 639, 671, 677, 678, 876, 877, 878, 882, 885, 886, 889, 896, 897, 900, 940, 946], "significantli": 13, "hinder": [13, 125], "librari": [13, 14, 15, 127, 132, 142, 144, 275, 317, 322, 414, 417, 478, 481, 482, 485, 684, 699, 701, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 940], "outdat": 13, "month": 13, "rigor": 13, "maintain": [13, 18, 885, 886, 889, 891, 894], "against": [13, 68, 69, 116, 144, 241, 245, 684, 708, 711, 712, 714, 716, 718, 725, 727, 871, 872], "newest": 13, "version": [13, 14, 15, 17, 113, 127, 129, 684, 699, 701, 940], "For": [13, 14, 15, 17, 18, 19, 20, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 170, 171, 172, 205, 208, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 634, 649, 651, 669, 684, 735, 737, 744, 746, 772, 773, 776, 816, 819, 876, 877, 878, 882, 884, 896, 901, 904, 909, 912, 921, 924, 951, 952], "softwar": [13, 14, 17, 18], "pipelin": [13, 120, 132], "where": [13, 14, 15, 16, 17, 18, 19, 20, 68, 69, 70, 71, 113, 117, 118, 120, 121, 122, 123, 124, 127, 130, 131, 132, 144, 170, 193, 194, 197, 205, 208, 322, 353, 356, 410, 413, 462, 465, 492, 495, 509, 512, 560, 600, 604, 613, 684, 699, 701, 716, 718, 725, 727, 728, 730, 735, 737, 738, 740, 744, 746, 747, 749, 772, 773, 776, 782, 785, 786, 789, 794, 797, 816, 819, 828, 831, 836, 837, 847, 859, 860, 871, 874, 896, 917, 920, 925, 928, 929, 930, 933, 935, 938, 940], "rapid": [13, 14, 17], "prototyp": 13, "vital": [13, 132], "signific": [13, 14, 144], "bottleneck": 13, "As": [13, 18, 64, 65, 109, 110, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 144, 876, 877, 878, 882, 884], "new": [13, 14, 15, 16, 17, 18, 19, 20, 68, 69, 111, 112, 113, 114, 116, 119, 121, 122, 124, 126, 129, 132, 143, 170, 179, 188, 191, 193, 194, 197, 215, 216, 218, 221, 233, 235, 236, 240, 241, 270, 322, 357, 360, 462, 465, 505, 508, 560, 582, 583, 584, 587, 588, 589, 592, 616, 617, 618, 619, 624, 625, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 772, 786, 789, 802, 805, 816, 819, 836, 841, 852, 853, 854, 855, 858, 940, 951, 952, 959, 969, 973, 974, 975, 976, 977, 978, 979, 980], "futur": [13, 15, 17, 18, 129, 144, 684, 699, 701], "avail": [13, 17, 18, 68, 69, 113, 123, 144, 275, 291, 307, 308, 309, 319, 560, 583], "specif": [13, 19, 68, 69, 117, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 143, 144, 241, 266, 275, 314, 317, 322, 478, 481, 482, 485, 560, 582, 583, 584, 611, 684, 699, 701, 741, 743, 772, 816, 819, 832, 833, 834, 835, 859, 860, 896, 901, 904, 905, 908, 909, 912, 940, 943, 945, 946, 971, 972], "quickli": [13, 15, 17, 18, 130, 131], "obsolet": [13, 15], "user": [13, 14, 17, 18, 20, 111, 116, 118, 121, 124, 126, 144, 959, 970, 971, 972], "constantli": 13, "invent": 13, "wheel": 13, "our": [13, 14, 16, 17, 18, 64, 65, 109, 110, 114, 121, 126, 129, 130, 131, 132, 144, 940], "desir": [13, 68, 69, 241, 244, 247, 250, 275, 317, 560, 600, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970], "provid": [13, 17, 18, 68, 69, 113, 114, 117, 120, 121, 122, 123, 124, 125, 127, 131, 143, 144, 167, 168, 170, 205, 208, 241, 253, 254, 255, 262, 266, 274, 275, 291, 560, 581, 613, 617, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 684, 747, 749, 772, 790, 793, 816, 819, 871, 872, 896, 917, 920, 925, 928, 929, 930, 933, 935, 938, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 975, 976, 977, 978, 979, 980], "simultan": [13, 15], "all": [13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 62, 63, 64, 65, 68, 69, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 145, 153, 167, 168, 170, 171, 172, 223, 227, 228, 232, 275, 282, 306, 312, 560, 561, 564, 568, 569, 594, 614, 629, 671, 681, 684, 732, 734, 741, 743, 750, 752, 772, 790, 793, 806, 809, 832, 833, 834, 835, 836, 837, 838, 847, 848, 849, 859, 860, 865, 867, 929, 940, 943, 945], "modern": [13, 14], "simpl": [13, 17, 18, 112, 113, 114, 116, 117, 120, 121, 122, 123, 124, 127, 129, 131, 132, 144, 560, 585], "scalabl": [13, 127], "manner": [13, 23, 26, 27, 68, 69, 112, 113, 123, 130, 143, 144, 836, 848], "must": [13, 15, 17, 18, 19, 68, 69, 70, 71, 72, 112, 113, 114, 117, 120, 121, 122, 123, 125, 127, 131, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 245, 246, 275, 301, 302, 303, 304, 316, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 582, 583, 584, 586, 589, 592, 600, 613, 616, 617, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 975, 979], "determin": [13, 68, 69, 113, 117, 121, 122, 123, 241, 247, 250, 252, 257, 262, 263, 264, 274, 275, 307, 308, 309, 319, 322, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 389, 392, 393, 396, 397, 400, 410, 413, 414, 417, 434, 437, 438, 441, 442, 445, 454, 457, 458, 461, 466, 469, 470, 473, 486, 489, 492, 495, 509, 512, 513, 516, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 560, 561, 564, 568, 569, 599, 601, 605, 606, 607, 608, 609, 626, 633, 634, 649, 651, 671, 682, 684, 685, 688, 690, 692, 693, 695, 696, 698, 705, 707, 708, 711, 716, 718, 722, 724, 725, 727, 731, 732, 734, 744, 746, 747, 749, 750, 752, 832, 833, 834, 835, 876, 877, 878, 882, 884, 929, 930, 933, 935, 938], "exactli": [13, 15, 114, 121, 123, 940, 946], "common": [13, 19, 68, 69, 114, 117, 119, 121, 123, 144], "ground": [13, 116], "li": 13, "between": [13, 68, 69, 70, 71, 72, 114, 116, 117, 120, 121, 125, 126, 128, 129, 130, 132, 143, 170, 171, 172, 241, 258, 322, 353, 356, 509, 512, 756, 757, 760, 762, 765, 767, 770, 772, 786, 789, 816, 819, 836, 842, 859, 861, 862, 876, 877, 878, 882, 884, 940, 975, 977], "find": [13, 17, 18, 68, 69, 127, 130, 876, 877, 878, 882, 884, 940], "exist": [13, 14, 17, 19, 20, 68, 69, 70, 71, 113, 114, 115, 116, 117, 118, 119, 124, 127, 144, 560, 581, 975, 979], "essenti": [13, 14, 19, 114, 117, 123], "order": [13, 17, 18, 20, 68, 69, 70, 71, 72, 113, 114, 118, 120, 121, 122, 123, 125, 129, 130, 132, 144, 322, 353, 356, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 684, 699, 701, 712, 714, 735, 737, 738, 740, 750, 752, 772, 790, 793, 832, 833, 834, 871, 874, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 981, 982], "design": [13, 14, 111, 124, 127, 129, 144], "univers": 13, "abstract": [13, 121, 131, 144, 275, 287, 975, 979], "In": [13, 15, 17, 18, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 275, 311, 317, 318, 321, 322, 336, 339, 492, 495, 513, 516, 560, 566, 604, 772, 802, 805, 859, 865, 867, 940], "search": [13, 17, 23, 26, 27, 55, 68, 69, 100, 112, 114, 116, 872, 873, 874, 875], "languag": [13, 15, 127], "first": [13, 14, 17, 18, 20, 114, 117, 120, 121, 125, 127, 129, 130, 132, 167, 168, 170, 199, 200, 202, 203, 241, 265, 270, 275, 291, 303, 322, 336, 339, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 402, 405, 422, 425, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 541, 545, 560, 568, 634, 644, 684, 690, 692, 696, 698, 699, 701, 708, 711, 722, 724, 728, 730, 735, 737, 741, 743, 747, 749, 772, 778, 781, 806, 809, 816, 819, 820, 823, 832, 833, 834, 835, 836, 837, 846, 847, 859, 870, 871, 872, 873, 876, 877, 878, 882, 959, 970, 971, 972, 975, 979], "see": [13, 16, 17, 18, 19, 115, 117, 121, 123, 125, 129, 130, 143, 144, 170, 171, 172, 188, 191, 199, 200, 202, 203, 241, 246, 266, 322, 336, 339, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 414, 417, 446, 449, 470, 473, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 541, 545, 684, 716, 718, 725, 727, 732, 734, 747, 749, 750, 752, 871, 873, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940], "clear": [13, 14, 15, 18, 19, 114, 116, 122, 123, 127, 129, 275, 290], "front": [13, 126, 127, 130, 940, 946], "runner": 13, "look": [13, 17, 18, 20, 112, 114, 117, 118, 121, 122, 123, 125, 127, 129, 131, 132, 940], "littl": [13, 129], "deeper": [13, 18, 111, 126, 275, 296, 300, 304, 836, 847, 848], "follow": [13, 14, 17, 18, 19, 20, 68, 69, 112, 113, 114, 116, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 144, 241, 261, 275, 316, 322, 513, 516, 560, 602, 603, 604, 624, 625, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 682, 683, 684, 728, 730, 750, 752, 836, 842, 848, 876, 877, 878, 882, 884, 940, 959, 969, 975, 979], "same": [13, 15, 17, 18, 20, 23, 24, 25, 68, 69, 112, 114, 116, 117, 120, 121, 123, 124, 125, 127, 129, 131, 132, 170, 171, 172, 180, 183, 194, 197, 205, 208, 218, 221, 223, 227, 228, 232, 236, 240, 241, 244, 245, 246, 275, 282, 283, 316, 322, 323, 326, 336, 339, 365, 368, 385, 388, 418, 421, 492, 495, 513, 516, 517, 520, 521, 524, 556, 559, 560, 586, 588, 589, 592, 613, 616, 617, 634, 649, 651, 666, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 719, 721, 725, 727, 728, 730, 732, 734, 735, 737, 744, 746, 747, 749, 772, 778, 781, 790, 793, 794, 797, 806, 809, 812, 815, 816, 819, 832, 833, 834, 836, 849, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 921, 924, 925, 928, 940, 959, 960, 961, 962, 963, 964, 965, 966], "core": [13, 17, 19, 123, 127, 132, 275, 308, 940], "principl": 13, "oper": [13, 17, 19, 68, 69, 70, 71, 113, 114, 117, 120, 121, 123, 124, 130, 131, 170, 199, 200, 202, 203, 241, 266, 322, 336, 339, 377, 380, 381, 384, 430, 433, 497, 500, 501, 504, 513, 516, 537, 540, 560, 570, 582, 583, 584, 626, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 672, 673, 674, 675, 676, 677, 678, 680], "expos": [13, 127, 131, 560, 576], "almost": [13, 18, 121, 128, 130], "ident": [13, 15, 68, 69, 117, 119, 121, 129, 130, 144, 275, 306, 836, 849, 940], "uniqu": [13, 117, 121, 144, 275, 282, 283, 832, 833, 834, 835, 836, 842, 876, 877, 878, 882, 883, 884], "syntax": [13, 14], "There": [13, 17, 18, 114, 117, 120, 121, 122, 127, 130, 144], "onli": [13, 16, 17, 18, 68, 69, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 142, 144, 275, 312, 322, 478, 481, 482, 485, 684, 708, 711, 728, 730, 772, 790, 793, 836, 837, 838, 846, 847, 871, 872, 873, 896, 905, 908, 940, 975, 976, 977, 978, 979, 980], "so": [13, 14, 17, 18, 21, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 112, 113, 114, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 144, 145, 153, 161, 162, 163, 165, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 561, 562, 563, 565, 589, 590, 591, 593, 635, 636, 637, 639, 685, 686, 687, 689, 773, 774, 775, 777, 806, 807, 808, 810, 836, 837, 847, 861, 863, 878, 879, 880, 881, 940], "wai": [13, 14, 17, 118, 124, 129, 130, 131, 132, 144], "manipul": [13, 49, 94, 112, 132, 143, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831], "unsurprisingli": [13, 114], "fundament": [13, 121, 127], "consist": [13, 68, 69, 120, 124, 275, 304, 684, 699, 701, 896, 897, 900, 971, 972], "each": [13, 14, 15, 18, 19, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 132, 143, 144, 155, 158, 159, 161, 164, 170, 205, 208, 241, 245, 275, 282, 283, 293, 294, 295, 296, 297, 298, 299, 303, 316, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 564, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 688, 690, 692, 693, 695, 699, 701, 708, 711, 716, 718, 719, 721, 725, 727, 732, 734, 735, 737, 772, 782, 785, 798, 801, 806, 809, 811, 816, 819, 824, 827, 828, 831, 836, 842, 849, 859, 860, 871, 874, 876, 877, 878, 882, 896, 897, 900, 940, 946, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "veri": [13, 14, 17, 18, 112, 114, 116, 117, 121, 123, 124, 125, 128, 130, 131, 132, 144, 940], "similar": [13, 112, 121, 122, 123, 130, 144, 322, 513, 516, 671, 682, 959, 970], "convent": [13, 143, 684, 708, 711, 896, 897, 900], "those": [13, 17, 18, 19, 68, 69, 121, 127, 132, 170, 171, 172, 634, 669, 684, 728, 730, 735, 737, 772, 773, 776], "introduc": [13, 121, 130, 772, 806, 809, 876, 877], "2006": 13, "layer": [13, 43, 88, 112, 113, 127, 128, 131, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 854, 855, 858, 940, 953, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "therefor": [13, 18, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 131, 144, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 385, 388, 418, 421, 501, 504, 533, 536, 537, 540, 546, 550, 560, 588, 671, 674, 683, 684, 685, 688, 696, 698, 772, 806, 809, 854, 855, 858, 876, 878, 882, 896, 901, 904, 929, 930, 933], "present": [13, 18, 68, 69, 115, 121, 122, 123, 124, 125, 127], "itself": [13, 17, 18, 121, 124, 125, 131, 143, 144, 560, 566, 836, 848], "cut": 13, "cloth": 13, "adher": [13, 14, 113, 115, 127, 132], "semant": [13, 127, 132, 322, 513, 516], "round": [13, 14, 15, 17, 18, 19, 20, 34, 35, 79, 80, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 322, 336, 339, 385, 388, 418, 421, 422, 425, 492, 495, 533, 536, 556, 559, 940], "up": [13, 14, 15, 16, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 143, 144], "hopefulli": [13, 14, 15, 17, 18, 19, 20, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143], "paint": [13, 127], "pictur": [13, 127], "how": [13, 15, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 143, 144, 940, 946, 959, 970, 971, 972], "pleas": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 940], "check": [13, 14, 15, 17, 18, 23, 24, 25, 26, 27, 68, 69, 121, 126, 127, 129, 130, 131, 132, 143, 241, 252, 259, 260, 262, 274, 275, 311, 321, 560, 570, 585, 599, 606, 607, 608, 609, 626, 633, 634, 649, 651, 684, 699, 701, 836, 837, 846, 847, 848, 940], "out": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 79, 80, 81, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 275, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 572, 573, 574, 575, 577, 578, 579, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 600, 613, 616, 617, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 959, 967], "discuss": [13, 14, 15, 16, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 940], "faq": [13, 14, 15, 127, 129, 130, 131, 132, 143], "reach": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 275, 296, 300, 304, 836, 848], "discord": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 940], "you": [13, 14, 15, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 940, 946], "question": [13, 14, 15, 17, 18, 114, 116, 127, 129, 130, 131, 132, 143, 144, 940], "With": [14, 15, 17, 36, 37, 38, 39, 56, 57, 68, 69, 70, 71, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 101, 102, 114, 116, 127, 155, 157, 158, 159, 160, 161, 164, 166, 170, 205, 208, 241, 247, 250, 275, 294, 310, 322, 323, 326, 327, 336, 339, 340, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 550, 551, 552, 555, 560, 561, 562, 563, 564, 565, 569, 577, 578, 585, 588, 589, 592, 593, 623, 628, 629, 630, 634, 635, 636, 638, 671, 674, 677, 678, 683, 684, 685, 688, 689, 690, 692, 693, 695, 696, 698, 712, 714, 741, 743, 756, 757, 760, 767, 770, 772, 773, 776, 777, 786, 789, 790, 793, 798, 801, 806, 809, 810, 811, 820, 823, 854, 855, 858, 859, 860, 861, 863, 864, 865, 867, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 929, 930, 933], "central": 14, "goal": [14, 19], "being": [14, 15, 17, 18, 68, 69, 114, 116, 119, 120, 121, 122, 123, 124, 125, 127, 130, 143, 144, 170, 171, 172, 560, 615, 620, 876, 883, 940], "would": [14, 17, 18, 20, 111, 113, 114, 116, 118, 119, 120, 121, 124, 125, 126, 127, 129, 131, 132, 144, 155, 160, 275, 317, 940], "entir": [14, 15, 18, 68, 69, 114, 115, 116, 120, 121, 124, 129, 130, 131, 132, 144, 275, 316, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 959, 968], "forgiven": 14, "rais": [14, 18, 68, 69, 124, 127, 129, 241, 246, 322, 410, 413, 509, 512, 560, 570, 595, 604, 618, 625, 631, 684, 708, 711, 715, 747, 749, 772, 812, 815, 816, 819, 871, 874, 896, 901, 904, 909, 912, 929, 930, 933, 935, 938, 971, 972, 975, 979], "an": [14, 15, 17, 18, 19, 20, 23, 26, 27, 64, 65, 68, 69, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 155, 158, 159, 161, 164, 169, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 245, 246, 247, 250, 258, 263, 264, 266, 275, 294, 298, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 571, 572, 573, 575, 577, 586, 587, 588, 600, 604, 606, 607, 608, 609, 629, 630, 631, 634, 649, 651, 666, 668, 669, 671, 674, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 715, 716, 718, 719, 721, 725, 727, 728, 730, 731, 732, 734, 735, 737, 744, 746, 747, 749, 750, 752, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 836, 842, 854, 855, 858, 859, 861, 862, 870, 871, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 951, 952, 971, 972, 975, 976, 977, 979], "eyebrow": 14, "somehow": 14, "pytorch": [14, 15, 19, 117, 122, 123, 124, 125, 127, 129, 132, 144, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 940, 975, 976, 977, 978, 979, 980], "other": [14, 17, 18, 68, 69, 70, 71, 112, 113, 114, 116, 117, 120, 121, 124, 127, 129, 131, 132, 142, 143, 144, 167, 168, 170, 171, 172, 322, 414, 417, 560, 561, 564, 566, 634, 644, 859, 865, 867, 876, 883, 896, 917, 920, 925, 928, 940], "strong": [14, 144], "industri": 14, "back": [14, 120, 126, 127, 129, 144, 940, 946, 971, 972, 975, 979], "momentum": 14, "won": [14, 15, 18, 132], "ad": [14, 17, 18, 19, 109, 110, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 127, 131, 144, 560, 624, 625, 684, 699, 701, 772, 786, 789, 981, 982], "just": [14, 15, 17, 18, 113, 114, 116, 117, 124, 127, 129, 130, 144, 896, 897, 900, 959, 968], "make": [14, 15, 17, 18, 19, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 275], "problem": [14, 18, 120, 129], "even": [14, 15, 17, 18, 113, 117, 122, 123, 125, 129, 130, 131, 132, 144, 322, 509, 512, 517, 520], "wors": 14, "rather": [14, 68, 69, 112, 113, 116, 121, 132, 144, 170, 171, 172, 275, 316, 560, 606, 607, 609, 634, 649, 651], "funni": 14, "comic": 14, "strip": 14, "easi": [14, 17, 18, 117, 121], "feasibl": 14, "space": [14, 170, 171, 172, 199, 200, 202, 203, 560, 587], "case": [14, 17, 18, 19, 23, 26, 27, 68, 69, 70, 71, 72, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 144, 170, 205, 208, 275, 311, 318, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 381, 384, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 560, 604, 616, 617, 684, 712, 714, 772, 802, 805, 836, 839, 845, 896, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928, 959, 970, 971, 972, 975, 979], "unlik": [14, 114, 121, 275], "charger": 14, "charact": 14, "encod": [14, 130, 560, 587], "instant": [14, 940], "messag": [14, 18, 127, 129, 984, 985], "much": [14, 18, 112, 120, 121, 124, 127, 129, 130], "doe": [14, 18, 20, 68, 69, 111, 112, 113, 114, 116, 117, 118, 122, 124, 125, 127, 129, 130, 144, 322, 381, 384, 560, 604, 772, 811], "mandat": [14, 116, 124], "adopt": [14, 18, 120], "continu": [14, 15, 115, 116, 144], "own": [14, 15, 17, 113, 127, 144], "signatur": [14, 112, 113, 114, 121, 122, 123, 124, 125, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 684, 696, 698, 772, 786, 789, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904], "replac": [14, 18, 20, 68, 69, 114, 116, 119, 121, 122, 123, 127, 129, 132, 144, 560, 616, 617, 772, 773, 776, 859, 860], "your": [14, 15, 16, 17, 19, 20, 112, 113, 130, 131, 144, 940], "10": [14, 17, 20, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 121, 127, 129, 130, 170, 193, 202, 203, 204, 275, 322, 361, 364, 365, 368, 393, 396, 430, 433, 450, 453, 458, 461, 533, 536, 560, 578, 588, 615, 620, 634, 653, 654, 655, 656, 671, 677, 684, 693, 695, 696, 698, 722, 724, 741, 743, 772, 790, 793, 798, 801, 811, 854, 855, 858, 859, 860, 861, 862, 863, 871, 874, 876, 877, 896, 897, 900, 901, 904, 975, 977], "100": [14, 15, 97, 98, 130, 131, 132, 144, 322, 533, 536, 861, 863, 940], "despit": [14, 121, 123], "distinct": [14, 113, 121, 124, 126, 876, 877, 878, 882, 884, 940], "still": [14, 68, 69, 113, 116, 122, 129, 131, 144, 940], "believ": [14, 18], "share": [14, 68, 69, 114, 116, 117, 118, 121, 127, 241, 270], "bring": [14, 127, 128], "benefit": [14, 15, 17, 18, 120, 121, 124, 129, 130, 144], "unrel": [14, 18], "what": [14, 15, 18, 111, 113, 114, 119, 121, 125, 126, 127, 129, 130, 131, 132, 143, 144, 940], "again": [14, 15, 18, 112, 114, 121, 124, 130, 132, 144], "contrari": 14, "bumpi": 14, "road": 14, "allud": [14, 130], "most": [14, 17, 18, 68, 69, 112, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 144, 684, 699, 701], "technologi": 14, "sector": [14, 322, 332, 335, 345, 348, 357, 360], "full": [14, 15, 18, 70, 71, 113, 122, 125, 127, 144, 170, 241, 258, 322, 430, 433, 450, 453, 671, 677, 684, 728, 730, 732, 734, 735, 737, 854, 855, 858], "success": 14, "reason": [14, 18, 112, 114, 117, 120, 121, 122, 124, 127, 129, 322, 513, 516], "build": [14, 16, 17, 117, 126, 128, 131, 132, 144, 876, 877, 878, 882, 884, 940, 959, 970, 971, 972], "custom": [14, 131], "comput": [14, 15, 17, 68, 69, 117, 121, 127, 130, 144, 275, 316, 322, 336, 339, 361, 364, 373, 376, 381, 384, 402, 405, 406, 409, 426, 429, 430, 433, 446, 449, 450, 453, 474, 477, 478, 481, 482, 485, 486, 489, 492, 495, 497, 500, 501, 504, 560, 572, 573, 575, 578, 579, 634, 635, 638, 640, 642, 644, 645, 647, 653, 655, 657, 659, 661, 663, 666, 668, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 688, 690, 692, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 728, 730, 731, 732, 734, 735, 737, 747, 749, 750, 752, 756, 757, 760, 762, 765, 767, 770, 836, 842, 876, 877, 878, 882, 884, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928], "thank": [14, 130], "interoper": 14, "compon": [14, 127], "bio": [14, 17], "hardwar": [14, 17], "initi": [14, 18, 68, 69, 70, 71, 72, 118, 122, 123, 275, 671, 681, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 975, 979], "pcie": 14, "interfac": [14, 132, 144], "motherboard": 14, "raid": 14, "storag": [14, 130], "virtual": [14, 18, 20], "bluetooth": 14, "wireless": 14, "exchang": 14, "btx": 14, "form": [14, 16, 23, 24, 25, 26, 27, 68, 69, 117, 131, 132, 170, 174, 177, 210, 213, 223, 227, 228, 232, 560, 566, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 716, 718, 719, 721, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746, 836, 838, 848], "factor": [14, 275, 282, 314, 315, 316, 634, 635, 638, 640, 642, 653, 655, 657, 659, 671, 672, 673, 674, 675, 676, 677, 678, 684, 685, 688, 959, 960, 961, 962, 963, 964, 965, 966, 975, 976, 977, 978], "sata": 14, "connect": [14, 17, 131, 132, 959, 969, 970], "host": [14, 144], "bu": 14, "adapt": [14, 634, 657, 659, 975, 978], "devic": [14, 18, 28, 29, 33, 68, 69, 73, 74, 78, 97, 98, 111, 112, 117, 119, 122, 129, 130, 144, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 560, 588, 589, 592, 613, 616, 617, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 951, 952, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "html": [14, 20, 113, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 684, 696, 698, 772, 786, 789, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904], "enabl": [14, 17, 18, 68, 69, 70, 71, 72, 116, 117, 120, 121, 124, 126, 127, 128, 130, 132, 144], "anyon": [14, 16, 144], "websit": 14, "tcp": 14, "ip": 14, "node": [14, 68, 69, 121, 836, 837, 846, 847], "commun": [14, 16, 18, 19, 144, 940, 946], "network": [14, 117, 121, 127, 131, 143, 671, 680, 940, 948, 959, 971, 972], "smtp": 14, "possibl": [14, 16, 17, 18, 19, 113, 114, 116, 121, 122, 124, 127, 130, 143, 144, 560, 610, 896, 901, 904, 909, 912], "send": 14, "gmail": 14, "outlook": 14, "pop": 14, "u": [14, 16, 17, 18, 116, 121, 124, 131, 144, 684, 685, 688, 735, 737, 940], "email": 14, "ieee": [14, 169, 241, 258, 322, 336, 339, 414, 417, 492, 495, 513, 516, 533, 536], "754": [14, 169, 241, 258, 322, 336, 339, 414, 417, 492, 495, 513, 516, 533, 536], "allow": [14, 127, 144, 170, 199, 200, 202, 203, 560, 610, 971, 972], "calcul": [14, 68, 69, 70, 71, 72, 113, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 389, 392, 393, 396, 397, 400, 410, 413, 414, 417, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 492, 495, 509, 512, 525, 528, 529, 532, 533, 536, 541, 545, 546, 550, 551, 555, 756, 757, 760, 762, 765, 767, 770, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928], "live": [14, 15], "depend": [14, 17, 18, 113, 119, 121, 122, 127, 144, 241, 244, 322, 323, 326, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 353, 356, 389, 392, 393, 396, 410, 413, 414, 417, 454, 457, 458, 461, 462, 465, 466, 469, 509, 512, 525, 528, 529, 532, 546, 550, 551, 555, 684, 699, 701, 728, 730, 732, 734, 735, 737, 871, 875, 885, 886, 889, 891, 894], "did": [14, 19, 132], "aris": [14, 144], "until": [14, 18, 144, 940], "substanti": [14, 18, 116, 120], "innov": 14, "growth": 14, "usag": [14, 127, 275, 316], "relev": [14, 17, 19, 114, 121, 122, 130, 975, 976, 977, 978, 979, 980], "area": [14, 124, 142, 322, 332, 335, 345, 348, 357, 360, 940], "necess": 14, "parti": [14, 144], "could": [14, 15, 17, 18, 114, 116, 121, 122, 124, 127, 129, 130, 131, 876, 877, 878, 882, 884], "easili": [14, 18, 130, 131, 132, 144, 940], "engag": [14, 16, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "regard": [14, 121, 275], "effect": [14, 113, 120, 121, 125, 144, 170, 205, 208, 634, 661, 663, 896, 917, 920, 925, 928], "2015": 14, "sinc": [14, 17, 18, 144], "alongsid": 14, "machin": [14, 17, 117, 143, 241, 258, 261, 322, 426, 429, 684, 716, 718, 725, 727], "given": [14, 15, 17, 18, 19, 20, 68, 69, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 131, 132, 143, 170, 171, 172, 179, 199, 200, 202, 203, 275, 305, 311, 313, 314, 315, 316, 318, 321, 560, 578, 579, 589, 592, 616, 617, 632, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 672, 673, 674, 675, 676, 677, 678, 684, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 786, 789, 790, 793, 798, 801, 806, 809, 811, 824, 827, 836, 843, 844, 859, 861, 862, 864, 865, 867, 870, 885, 891, 894, 951, 952], "frame": [14, 143], "less": [14, 18, 34, 35, 68, 69, 79, 80, 114, 121, 125, 126, 127, 322, 328, 331, 332, 335, 341, 344, 353, 356, 385, 388, 454, 457, 458, 461, 466, 469, 509, 512, 513, 516, 521, 524, 533, 536, 684, 716, 718, 725, 727, 750, 752, 859, 865, 867, 896, 925, 928], "matur": [14, 144], "state": [14, 113, 125, 126, 127, 128, 130, 143, 322, 492, 495, 671, 681, 940, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "than": [14, 18, 68, 69, 112, 114, 116, 121, 124, 127, 130, 131, 132, 144, 170, 171, 172, 241, 258, 275, 316, 322, 328, 331, 332, 335, 341, 344, 353, 356, 369, 372, 377, 380, 385, 388, 418, 421, 422, 425, 454, 457, 458, 461, 466, 469, 490, 509, 512, 513, 516, 521, 524, 533, 536, 556, 559, 560, 606, 607, 609, 634, 649, 651, 684, 690, 692, 708, 711, 716, 718, 725, 727, 750, 752, 772, 773, 776, 790, 793, 812, 815, 859, 865, 867, 876, 877, 878, 882, 884, 896, 913, 916, 917, 920, 921, 924, 925, 928], "preced": [14, 131], "mention": [14, 17, 18, 114, 117, 124, 125], "aros": 14, "70": [14, 684, 722, 724, 896, 897, 900], "80": [14, 684, 722, 724, 896, 897, 900], "90": [14, 97, 98, 322, 381, 384, 517, 520, 684, 722, 724, 861, 863, 896, 897, 900], "effort": [14, 16, 144], "stage": [14, 16, 18, 20, 111, 940], "complet": [14, 18, 19, 68, 69, 120, 121, 129, 130, 684, 728, 730], "natur": [14, 114, 120, 121, 143, 322, 410, 413, 454, 457, 462, 465, 684, 731], "like": [14, 17, 18, 20, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 634, 649, 651, 859, 865, 867, 940], "certainli": 14, "mission": [14, 940], "creat": [14, 16, 17, 18, 20, 68, 69, 122, 123, 124, 127, 128, 131, 142, 143, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 193, 194, 197, 199, 200, 202, 203, 210, 213, 215, 216, 218, 221, 233, 235, 236, 240, 275, 282, 283, 560, 588, 589, 592, 613, 616, 617, 628, 634, 668, 859, 860, 861, 862, 865, 867, 940, 946, 951, 952, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "At": [14, 19], "process": [14, 15, 16, 17, 18, 20, 117, 121, 127, 132, 275, 282, 283, 311, 321], "ourselv": 14, "lead": [14, 15, 68, 69, 70, 71, 72, 144, 684, 728, 730, 735, 737], "quansight": 14, "compani": 14, "made": [14, 18, 19, 121, 124, 127, 129], "organ": [14, 112, 117, 120, 121], "panda": 14, "scipi": 14, "conda": [14, 17, 20], "dask": [14, 876, 877, 878, 882, 884], "apach": 14, "onnx": 14, "scikit": 14, "jupyt": 14, "aw": 14, "cupi": 14, "net": [14, 15, 127, 132], "sympi": 14, "rai": [14, 322, 353, 356], "modin": 14, "spyder": 14, "includ": [14, 18, 19, 68, 69, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 143, 144, 170, 171, 172, 174, 177, 210, 213, 560, 599, 633, 684, 750, 752, 836, 837, 859, 865, 867, 871, 873, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 943, 945, 959, 969, 970, 973, 974], "member": [14, 18], "googl": [14, 940], "octoml": 14, "einop": [14, 68, 69, 560, 582, 583, 584], "further": [14, 15, 18, 20, 114, 120, 126, 130, 131, 940], "sponsor": 14, "lg": 14, "electron": 14, "microsoft": 14, "d": [14, 15, 16, 17, 97, 98, 111, 121, 130, 560, 569, 577, 671, 672, 673, 674, 675, 676, 677, 678, 684, 696, 698, 722, 724, 861, 863, 940, 946], "shaw": 14, "co": [14, 34, 35, 79, 80, 127, 143, 322, 560, 587, 940], "intel": 14, "togeth": [14, 68, 69, 120, 121, 131, 132, 144, 981, 982], "major": [14, 122, 123, 144, 871, 874], "involv": [14, 16, 20, 111, 122, 132, 241, 266, 322, 336, 339, 492, 495, 940, 946], "anoth": [14, 17, 18, 68, 69, 117, 121, 122, 129, 132, 170, 188, 191, 241, 245, 247, 250], "promis": 14, "sign": [14, 17, 34, 35, 79, 80, 128, 132, 170, 171, 172, 322, 323, 326, 336, 339, 353, 356, 377, 380, 492, 495, 513, 516, 684, 731, 876, 877, 878, 882, 884, 896, 913, 916, 921, 924], "pursuit": 14, "unif": [14, 16, 129, 940, 946], "clearli": [14, 19, 114], "lot": [14, 15, 119, 129, 144], "thought": [14, 17, 18, 125], "care": [14, 18, 132], "attent": [14, 18, 120, 121, 671, 682, 683, 959, 970], "gone": [14, 126], "simplifi": [14, 127, 128, 129, 131], "compat": [14, 125, 144, 241, 246, 322, 336, 339, 353, 356, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 402, 405, 422, 425, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 541, 545, 684, 716, 718, 725, 727, 732, 734, 741, 743, 747, 749, 750, 752, 772, 802, 805, 871, 873, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940], "excit": [14, 16, 111, 940], "complianc": 14, "hope": [14, 144], "due": [14, 17, 121, 124, 322, 492, 495], "suit": [14, 17, 111, 115, 116, 130, 143], "some": [14, 15, 17, 18, 19, 68, 69, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 143, 144, 322, 414, 417, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 669, 671, 679, 940, 959, 967], "motiv": [14, 129], "great": [14, 15, 116, 127, 129], "convinc": 14, "celebr": 14, "encourag": [14, 143, 144, 940, 946], "foundat": 14, "point": [15, 18, 113, 114, 120, 124, 125, 127, 129, 130, 143, 169, 170, 171, 172, 179, 185, 186, 193, 215, 216, 233, 235, 241, 244, 258, 263, 266, 322, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 410, 413, 414, 417, 418, 421, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 684, 685, 688, 693, 695, 699, 701, 702, 704, 705, 707, 716, 718, 725, 727, 728, 730, 732, 734, 735, 737, 750, 752, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928], "mai": [15, 17, 18, 121, 129, 131, 170, 171, 172, 188, 191, 275, 317, 322, 402, 405, 430, 433, 450, 453, 478, 481, 482, 485, 560, 581, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912], "ask": [15, 127, 129, 144, 940], "perfectli": 15, "happi": [15, 17, 144], "abund": 15, "better": [15, 111, 126, 129, 130, 131], "ll": [15, 16, 18, 114, 121, 124, 130], "give": [15, 17, 18, 111, 113, 114, 118, 125, 129, 772, 802, 805], "two": [15, 70, 71, 113, 114, 116, 120, 121, 126, 130, 132, 170, 171, 172, 185, 186, 205, 208, 223, 227, 228, 232, 241, 265, 270, 322, 377, 380, 517, 520, 560, 568, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 744, 746, 747, 749, 772, 820, 823, 876, 877, 878, 882, 883, 884, 940], "streamlin": 15, "workflow": [15, 18, 130, 142, 940], "save": [15, 68, 69, 144, 560, 621, 971, 972], "week": [15, 18, 19, 940], "let": [15, 113, 114, 121, 122, 123, 127, 129, 130, 131, 132, 896, 905, 908, 917, 920, 921, 924, 925, 928, 940], "sai": [15, 17, 119, 129], "deepmind": 15, "releas": [15, 17, 19, 940], "awesom": 15, "paper": 15, "love": 15, "choic": [15, 17, 124, 130, 896, 917, 920, 925, 928], "perceiverio": 15, "happen": [15, 17, 18, 130], "slew": 15, "rush": 15, "f": [15, 20, 111, 121, 127, 130, 132, 322, 426, 429, 560, 601, 605], "g": [15, 111, 121, 144, 241, 243, 266, 275, 288, 859, 864, 865, 867, 876, 877, 878, 882, 884, 896, 901, 904, 909, 912, 913, 916, 921, 924], "inevit": 15, "deviat": [15, 854, 855, 858, 859, 864, 896, 917, 920, 973, 974], "origin": [15, 68, 69, 70, 71, 72, 118, 119, 122, 127, 129, 322, 353, 356, 684, 712, 714, 772, 802, 805, 806, 809], "often": [15, 117, 144], "erron": 15, "train": [15, 117, 121, 123, 130, 131, 132, 142, 143, 144, 634, 635, 638, 640, 642, 653, 655, 940], "poor": 15, "converg": 15, "perform": [15, 68, 69, 112, 114, 116, 117, 118, 120, 121, 123, 124, 125, 127, 130, 144, 155, 160, 170, 199, 200, 202, 203, 275, 560, 578, 582, 583, 584, 602, 603, 604, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 679, 681, 684, 735, 737, 832, 833, 834, 835, 836, 843, 844, 929, 930, 933, 935, 938], "issu": [15, 16, 19, 127, 129, 131, 144], "etc": [15, 17, 18, 19, 64, 65, 68, 69, 109, 110, 112, 114, 116, 120, 121, 122, 125, 127, 129, 130, 144, 170, 199, 200, 202, 203, 560, 588, 589, 592, 613, 616, 617, 859, 860, 861, 862, 865, 867, 876, 877, 878, 882, 884, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "publish": [15, 144], "manag": [15, 16, 124, 144, 275], "get": [15, 16, 17, 19, 68, 69, 111, 117, 122, 123, 124, 127, 128, 129, 130, 131, 241, 256, 257, 258, 261, 275, 282, 283, 291, 292, 305, 306, 311, 315, 318, 321, 560, 567, 594, 595, 596, 615, 940, 946, 959, 968], "work": [15, 17, 18, 19, 111, 116, 121, 122, 123, 126, 127, 128, 129, 131, 132, 940, 946], "repositori": [15, 17, 18, 20, 115], "pull": [15, 16, 17, 20, 112, 144], "request": [15, 16, 112, 275, 308], "confus": [15, 124], "do": [15, 17, 18, 19, 68, 69, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 322, 513, 516, 560, 604, 634, 649, 651, 669, 836, 837, 846, 847, 848], "don": [15, 17, 18, 19, 64, 65, 109, 110, 122, 131, 144], "expect": [15, 144, 560, 567, 940], "codebas": [15, 16, 111, 112, 124, 126, 275, 314, 315, 940], "total": [15, 16, 18, 68, 69, 70, 71, 72, 114, 116, 123, 130, 131, 144, 275, 318, 871, 874, 896, 917, 920, 925, 928], "hour": 15, "spent": 15, "spin": 15, "off": [15, 126, 684, 696, 698, 744, 746], "test": [15, 17, 19, 111, 114, 144, 241, 263, 264, 322, 434, 437, 438, 441, 442, 445, 929, 930, 933, 935, 938], "error": [15, 17, 68, 69, 116, 120, 123, 125, 129, 144, 155, 156, 275, 322, 406, 409, 896, 901, 904, 909, 912, 971, 972, 975, 979], "iter": [15, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 121, 127, 130, 167, 168, 275, 294, 295, 297, 298, 299, 300, 303, 316, 560, 561, 564, 617, 622, 772, 782, 785, 798, 801, 811, 824, 827, 828, 831, 836, 837, 838, 842, 846, 847, 848], "address": [15, 18, 19, 120, 127], "sake": 15, "singl": [15, 18, 68, 69, 112, 114, 116, 117, 119, 121, 124, 125, 127, 130, 131, 132, 144, 275, 282, 283, 301, 302, 303, 304, 560, 630, 633, 859, 864, 865, 867, 876, 877], "multipl": [15, 18, 68, 69, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 114, 117, 121, 144, 322, 336, 340, 492, 495, 560, 561, 563, 564, 565, 589, 593, 610, 684, 685, 688, 689, 705, 707, 772, 773, 776, 777, 806, 809, 810, 811, 854, 855, 858, 861, 863, 871, 872, 873, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 959, 969], "line": [15, 17, 114, 120, 128, 129, 130, 131, 142, 940, 946], "convert": [15, 23, 24, 25, 26, 27, 68, 69, 120, 127, 144, 145, 153, 170, 174, 177, 210, 213, 241, 242, 243, 275, 288, 289, 290, 291, 311, 318, 321, 560, 623, 629, 630, 684, 753, 755, 836, 838, 848, 849, 952], "directli": [15, 18, 112, 113, 117, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 143, 144, 836, 848], "graph": [15, 117, 121, 128, 144, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 876, 877, 878, 882, 884, 971, 972], "guarante": [15, 120, 144, 876, 877], "turn": [15, 114, 121], "4": [15, 20, 34, 35, 44, 45, 48, 49, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 118, 121, 127, 129, 130, 131, 132, 155, 157, 158, 160, 170, 194, 197, 205, 208, 218, 221, 236, 240, 241, 247, 249, 250, 251, 275, 294, 310, 322, 323, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 353, 356, 361, 364, 381, 384, 385, 387, 388, 393, 396, 418, 420, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 549, 550, 551, 552, 554, 555, 560, 569, 578, 587, 588, 589, 591, 592, 593, 623, 628, 634, 635, 637, 638, 639, 671, 674, 675, 676, 678, 681, 683, 684, 685, 686, 688, 690, 692, 693, 695, 696, 698, 705, 707, 716, 718, 722, 724, 741, 743, 744, 746, 756, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 808, 809, 810, 811, 820, 823, 854, 855, 858, 859, 860, 861, 863, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 929, 930, 933, 940, 975, 976, 977, 978, 980], "step": [15, 17, 18, 20, 38, 39, 68, 69, 73, 74, 83, 84, 114, 118, 120, 121, 122, 123, 127, 130, 131, 132, 143, 170, 171, 172, 173, 199, 200, 202, 203, 275, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 653, 654, 655, 656, 657, 659, 661, 663, 832, 833, 834, 835, 940, 975, 976, 977, 978, 979, 980], "take": [15, 16, 17, 18, 113, 114, 116, 121, 122, 123, 127, 129, 131, 132, 144, 322, 381, 384, 940, 946], "few": [15, 18, 19, 117, 121, 122, 123, 124, 128, 129, 130, 131, 142, 940, 946], "second": [15, 17, 114, 124, 129, 241, 265, 270, 275, 303, 322, 336, 339, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 402, 405, 422, 425, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 541, 545, 560, 568, 615, 620, 634, 635, 638, 640, 642, 653, 655, 684, 690, 692, 696, 698, 699, 701, 708, 711, 722, 724, 728, 730, 735, 737, 741, 743, 747, 749, 772, 816, 819, 820, 823, 832, 834, 876, 877, 878, 882, 975, 976, 977], "automat": [15, 17, 18, 117, 121, 125, 126, 127, 128, 131, 132, 940], "convers": [15, 24, 25, 26, 27, 68, 69, 126, 128, 132, 143, 144, 940, 946], "everyon": [15, 16, 18, 144], "regardless": [15, 16, 68, 69, 129, 132, 167, 168], "wouldn": 15, "nice": [15, 116], "write": [15, 18, 19, 20, 68, 69, 111, 112, 113, 114, 116, 117, 118, 124, 127, 129, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 275, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 579, 582, 583, 584, 586, 588, 589, 592, 600, 613, 616, 617, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 875, 876, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "onc": [15, 17, 18, 121, 122, 123, 127, 130, 144, 275, 316, 684, 705, 707, 735, 737, 859, 860], "know": [15, 18, 876, 877, 878, 882, 884], "among": [15, 68, 69, 116], "frantic": 15, "port": 15, "lucid": 15, "honk": 15, "improv": [15, 18, 117, 127], "understand": [15, 17, 18, 19, 20, 111, 113, 114, 115, 125, 126], "pattern": [15, 68, 69, 113, 122, 560, 582, 583, 584], "hasn": 15, "chang": [15, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 115, 116, 121, 127, 131, 144, 161, 162, 163, 165, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 275, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 561, 562, 563, 565, 589, 590, 591, 593, 635, 636, 637, 639, 684, 685, 686, 687, 689, 690, 692, 772, 773, 774, 775, 777, 802, 805, 806, 807, 808, 810, 836, 838, 848, 861, 863, 878, 879, 880, 881, 940, 946], "now": [15, 17, 20, 68, 69, 112, 119, 121, 122, 125, 129, 130, 132, 143, 144, 959, 970, 971, 972], "spend": 15, "torchvis": 15, "probabl": [15, 671, 679, 859, 860, 959, 967], "sonnet": 15, "about": [15, 17, 18, 115, 126, 127, 131, 132, 144, 241, 258, 261], "next": [15, 17, 18, 19, 20, 113, 114, 118, 119, 129, 130, 241, 258, 940, 971, 972, 975, 976, 977, 978, 979, 980], "everyth": [15, 18, 19, 128, 144], "zero": [15, 68, 69, 70, 71, 114, 120, 121, 122, 123, 125, 127, 130, 131, 155, 157, 158, 170, 179, 185, 186, 205, 208, 223, 227, 228, 232, 236, 240, 241, 244, 322, 336, 339, 341, 344, 369, 372, 393, 396, 414, 417, 418, 421, 478, 481, 482, 485, 490, 491, 492, 495, 497, 500, 501, 504, 509, 512, 513, 516, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 578, 613, 616, 617, 634, 635, 638, 640, 642, 653, 655, 657, 659, 671, 679, 684, 685, 688, 693, 695, 708, 711, 716, 718, 725, 727, 747, 749, 750, 752, 772, 786, 789, 790, 793, 798, 801, 806, 809, 828, 831, 854, 855, 858, 859, 861, 862, 871, 872, 873, 874, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 975, 976, 977, 978], "need": [15, 17, 18, 19, 20, 112, 113, 114, 115, 117, 120, 121, 124, 127, 129, 130, 143, 144, 560, 572, 573, 575, 772, 773, 776, 786, 789], "said": 15, "high": [15, 19, 68, 69, 97, 98, 130, 859, 861, 862, 863, 865, 866, 867, 868], "level": [15, 16, 19, 117, 126, 127, 130, 131, 132, 144], "optim": [15, 124, 128, 130, 132, 143, 275, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 832, 833, 834, 835, 940, 976, 977, 978, 980], "trainer": [15, 142, 144, 940], "statu": 15, "quo": 15, "kera": 15, "dopamin": 15, "ignit": 15, "catalyst": 15, "lightn": 15, "fastai": 15, "haiku": [15, 132], "flax": [15, 132, 144], "trax": [15, 132], "objax": [15, 132], "idea": [15, 143], "fulli": [15, 120, 121, 125, 127, 128, 129, 130, 131, 132, 144, 959, 969, 970], "offer": [15, 131], "strongli": [16, 17, 940, 946], "welcom": [16, 17, 18, 940, 946], "absolut": [16, 68, 69, 322, 323, 326, 684, 731], "skill": 16, "whether": [16, 17, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 109, 110, 122, 124, 125, 155, 156, 167, 168, 241, 244, 256, 262, 263, 264, 274, 275, 291, 292, 303, 307, 308, 311, 312, 316, 319, 321, 322, 442, 445, 560, 561, 564, 568, 569, 578, 581, 585, 587, 597, 599, 601, 604, 605, 606, 607, 608, 609, 610, 622, 626, 632, 633, 634, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 671, 679, 684, 699, 701, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 849, 859, 860, 929, 930, 933, 935, 938, 951, 952, 959, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "vetern": 16, "beginn": 16, "start": [16, 17, 18, 19, 20, 68, 69, 73, 74, 111, 113, 114, 122, 126, 127, 129, 130, 131, 143, 144, 170, 171, 172, 173, 199, 200, 201, 202, 203, 204, 275, 287], "aspect": [16, 130, 940], "guid": [16, 17, 18, 116, 940], "through": [16, 18, 19, 111, 114, 117, 118, 121, 126, 127, 129, 130, 131, 132, 143, 322, 353, 356], "journei": [16, 940, 946], "inclusvi": 16, "big": [16, 144], "team": [16, 17, 18], "board": 16, "contributor": [16, 17, 18, 126, 940], "split": [16, 18, 68, 69, 126, 127, 144, 275, 282, 297, 298, 299, 300, 314, 315, 316, 560, 610, 772, 940], "section": [16, 18, 19, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 876, 877, 878, 882, 884], "below": [16, 17, 19, 20, 111, 112, 114, 117, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 143, 170, 223, 227, 228, 232, 322, 361, 364, 381, 384, 393, 396, 517, 520, 551, 555, 684, 693, 695, 696, 698, 744, 746, 772, 786, 789, 790, 793, 876, 877, 885, 886, 889, 940], "best": [16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 560, 610], "go": [16, 17, 18, 19, 111, 112, 114, 121, 126, 130, 144, 836, 847], "finish": [16, 17, 111, 940], "dive": [16, 18, 19, 126, 129, 130, 144, 940], "right": [16, 17, 18, 68, 69, 111, 114, 130, 322, 369, 372, 377, 380, 684, 735, 737], "environ": [16, 18, 20, 143], "basic": [16, 19, 20], "fork": [16, 17, 560, 611], "doc": [16, 19, 113, 125, 127, 130, 131, 940], "document": [16, 18, 128, 130, 132], "local": [16, 17, 20, 117], "task": [16, 18, 143, 832, 833, 834, 835, 940], "help": [16, 17, 114, 118, 120, 121, 129, 130, 131, 142, 560, 566, 896, 921, 924, 940], "video": [16, 18, 113, 114, 125], "realli": [17, 121, 144], "contribut": [17, 18, 19, 127, 946], "toward": [17, 127, 772, 806, 809, 940, 946], "page": [17, 18, 128, 132, 142, 940, 946], "explain": [17, 18, 19, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 940, 946], "main": [17, 20, 119, 121, 170, 185, 186, 223, 227, 228, 232, 684, 696, 698, 744, 746], "prefer": [17, 121], "mode": [17, 44, 45, 68, 69, 114, 121, 144, 167, 168, 275, 301, 302, 303, 304, 316, 322, 336, 339, 492, 495, 684, 728, 729, 730], "git": [17, 18], "recurs": [17, 20, 23, 24, 25, 26, 27, 68, 69, 117, 121, 131, 144, 836, 837, 838, 846, 847, 848], "submodul": [17, 18, 19, 20, 115, 116, 117, 123, 126, 127, 131, 940, 973, 974, 981, 982], "com": 17, "unifyai": [17, 20], "http": [17, 113, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 634, 635, 638, 640, 642, 684, 696, 698, 772, 786, 789, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904], "gh": 17, "your_fold": 17, "id": [17, 120, 121, 275, 291, 971, 972], "cours": [17, 18, 114, 130, 144], "whatev": [17, 144], "integr": [17, 116, 241, 244], "familiar": [17, 19], "decid": [17, 68, 69, 836, 847], "sure": [17, 19, 115], "elig": 17, "free": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 143, 940], "student": 17, "licenc": 17, "peopl": [17, 18, 111], "seem": [17, 131, 144], "miss": [17, 114, 116, 120, 121, 975, 979], "add": [17, 18, 19, 34, 35, 64, 65, 68, 69, 70, 71, 79, 80, 81, 82, 109, 110, 111, 112, 113, 117, 118, 120, 121, 125, 127, 129, 144, 322, 323, 326, 340, 561, 565, 854, 855, 858, 940, 946, 973, 974], "explicit": [17, 20, 121, 122, 124, 127, 144], "remind": 17, "channel": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 560, 587, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969], "pace": 17, "updat": [17, 18, 19, 20, 68, 69, 111, 114, 115, 119, 120, 121, 122, 125, 127, 129, 130, 132, 144, 275, 282, 560, 604, 616, 617, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 681, 832, 833, 834, 836, 843, 844, 852, 853, 951, 952, 975, 976, 977, 978, 979, 980], "suggest": [17, 18, 112], "latest": [17, 19, 20, 113, 144, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 684, 696, 698, 772, 786, 789, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 959, 968], "packag": [17, 20, 144], "ensur": [17, 18, 116, 120, 122, 125, 560, 604], "align": [17, 68, 69, 127, 129, 940, 946], "accord": [17, 20, 68, 69, 117, 122, 241, 247, 250, 258, 322, 336, 339, 377, 380, 492, 495, 560, 588, 616, 617, 684, 747, 749, 772, 782, 785, 828, 831, 896, 917, 920, 925, 928], "stabl": [17, 58, 59, 103, 104, 127, 144, 560, 595, 596, 618, 619, 624, 625, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895], "pypi": [17, 19, 144], "mayb": [17, 23, 26, 27, 127, 129], "person": [17, 18], "experi": [17, 128, 130, 144], "avoid": [17, 18, 116, 118, 119, 121, 129, 275, 322, 414, 417], "pip": [17, 143, 940], "instal": [17, 20, 143, 940], "abil": [17, 128, 144], "certain": [17, 68, 69, 144, 170, 171, 172, 199, 200, 202, 203], "perhap": [17, 129, 130, 131, 144], "keep": [17, 18, 68, 69, 115, 121, 128, 130, 132, 560, 632], "track": [17, 18, 275, 836, 848, 971, 972], "termin": [17, 18, 20, 68, 69, 70, 71, 72, 121, 127, 130], "run": [17, 20, 115, 116, 118, 125, 127, 128, 129, 130, 131, 132, 143, 144, 275, 282, 634, 635, 638, 640, 642, 653, 655, 832, 833, 834, 835, 959, 970, 971, 972], "command": [17, 20, 940], "ivy_dev": [17, 18, 20], "name": [17, 18, 20, 113, 116, 127, 129, 130, 132, 167, 168, 560, 566, 684, 699, 701, 728, 730, 735, 737, 876, 877, 878, 882], "3": [17, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 114, 118, 121, 127, 129, 130, 131, 132, 155, 157, 158, 159, 160, 169, 170, 194, 197, 205, 208, 218, 221, 233, 235, 236, 240, 241, 247, 248, 249, 250, 251, 275, 291, 294, 310, 317, 322, 323, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 361, 364, 377, 380, 381, 384, 385, 387, 388, 393, 396, 410, 413, 418, 419, 420, 421, 426, 429, 430, 433, 446, 449, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 549, 550, 551, 552, 554, 555, 560, 561, 562, 563, 568, 569, 578, 585, 588, 589, 590, 591, 592, 593, 622, 623, 628, 630, 634, 635, 636, 637, 638, 639, 671, 672, 673, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 705, 707, 716, 718, 722, 724, 735, 737, 741, 743, 744, 746, 753, 755, 756, 757, 760, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 808, 809, 810, 811, 812, 815, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 921, 924, 929, 930, 933, 940], "8": [17, 20, 48, 49, 70, 71, 79, 80, 97, 98, 114, 121, 126, 130, 155, 159, 275, 294, 322, 336, 339, 340, 361, 364, 385, 388, 393, 396, 430, 433, 450, 453, 490, 491, 517, 520, 533, 536, 537, 540, 551, 555, 560, 569, 588, 634, 635, 638, 671, 678, 684, 690, 692, 693, 695, 696, 698, 722, 724, 741, 743, 756, 757, 760, 772, 773, 774, 776, 790, 793, 798, 801, 811, 859, 860, 861, 862, 863, 871, 875, 876, 877, 896, 897, 900, 940, 959, 970], "activ": [17, 18, 20, 22, 64, 65, 67, 109, 110, 112, 131, 156, 157, 158, 159, 160, 161, 164, 166, 940, 949, 950], "setup": 17, "click": [17, 18, 113, 940], "icon": [17, 18], "side": [17, 18], "choos": [17, 18, 132, 275, 317, 322, 478, 481, 482, 485, 871, 875, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912], "left": [17, 18, 68, 69, 114, 122, 322, 369, 372, 684, 699, 701, 712, 714, 735, 737, 871, 872, 940], "panel": 17, "select": [17, 18, 116, 127, 129, 132, 144], "drop": [17, 144], "down": [17, 129], "path": [17, 20], "manual": [17, 18, 116, 131, 836, 837, 846, 847], "builtin": [17, 20, 129, 131], "requir": [17, 20, 112, 113, 114, 116, 119, 120, 122, 123, 125, 129, 144, 167, 168, 322, 533, 536, 684, 699, 701, 772, 816, 819, 951, 952], "cmd": [17, 20], "directori": [17, 18, 20, 560, 621], "folder": [17, 18, 20, 112, 115, 116, 117], "file": [17, 18, 20, 68, 69, 112, 113, 117, 118, 120, 121, 127, 130, 560, 621, 971, 972], "abov": [17, 18, 20, 113, 114, 117, 118, 120, 121, 124, 125, 129, 130, 131, 132, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 492, 495, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 699, 701, 744, 746, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 859, 861, 862, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 913, 916, 917, 920, 921, 924, 929, 930, 933], "m": [17, 18, 20, 111, 127, 170, 205, 208, 223, 227, 228, 232, 560, 569, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746, 859, 864, 865, 867], "python3": [17, 20], "script": [17, 18, 20, 114, 127, 144], "bat": [17, 18, 20], "OR": [17, 18, 20, 322, 373, 376, 482, 485, 929, 935, 938], "bin": [17, 18, 20], "mac": [17, 18, 20], "linux": [17, 18, 20], "virtualenv": 17, "found": [17, 18, 68, 69, 70, 71, 72, 113, 120, 121, 275, 306], "o": [17, 127, 560, 569], "note": [17, 18, 112, 113, 114, 121, 322, 513, 516, 684, 699, 701, 735, 737, 772, 816, 819, 876, 878, 882, 896, 905, 908], "tick": [17, 18], "abl": [17, 18, 68, 69, 117, 122, 124, 129, 132], "To": [17, 114, 117, 121, 130, 131, 132, 940], "ivy_test": [17, 18], "test_array_api": [17, 18, 115, 116], "cd": [17, 18, 20], "r": [17, 68, 69, 560, 569, 632, 684, 728, 730, 753, 755], "txt": 17, "visual": [17, 144], "jetbrain": 17, "remot": 17, "mitig": 17, "potenti": [17, 126, 322, 414, 417], "conflict": [17, 18, 130], "addit": [17, 18, 68, 69, 112, 113, 116, 121, 122, 129, 130, 132, 275, 317, 322, 336, 339, 560, 582, 583, 584, 854, 855, 858, 959, 969], "yet": [17, 19, 121], "particular": [17, 18, 112, 124, 322, 323, 326], "system": [17, 144, 684, 732, 734], "instruct": [17, 19], "desktop": 17, "wsl": 17, "powershel": 17, "admin": 17, "visit": 17, "link": 17, "imag": [17, 20, 41, 86, 112, 127, 128, 130, 132, 143, 671, 672, 673, 674, 675, 677, 678, 940], "profession": 17, "execut": [17, 20, 121, 124, 127, 129, 132, 144, 560, 631], "deploy": 17, "top": [17, 18, 116, 130, 131, 940], "press": [17, 130, 940], "ok": 17, "correctli": [17, 68, 69, 116, 121, 122, 125, 131, 144, 684, 712, 714, 871, 872], "caus": [17, 18, 114, 116, 121, 124, 144], "earlier": [17, 18], "might": [17, 18, 112, 116, 119, 127, 129, 130, 560, 581], "necessari": [17, 114, 118, 121, 124], "virtualis": 17, "detail": [17, 18, 19, 112, 115, 116, 117, 118, 119, 121, 125, 130, 131, 170, 188, 191, 876, 877, 878, 882, 884], "sudo": 17, "apt": 17, "ca": 17, "certif": 17, "curl": 17, "gnupg": 17, "lsb": 17, "mkdir": 17, "p": [17, 18, 68, 69, 81, 82, 170, 205, 208, 560, 572, 573, 574, 575, 671, 679, 684, 712, 714, 750, 752, 959, 967], "keyr": 17, "fssl": 17, "download": [17, 116], "gpg": 17, "dearmor": 17, "echo": 17, "deb": 17, "arch": 17, "dpkg": 17, "architectur": [17, 132, 144], "lsb_releas": 17, "tee": 17, "list": [17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 64, 65, 68, 69, 83, 84, 101, 102, 109, 110, 112, 114, 122, 123, 125, 127, 130, 131, 132, 144, 170, 171, 172, 174, 177, 179, 205, 206, 208, 210, 213, 215, 216, 233, 235, 241, 245, 275, 282, 283, 291, 293, 294, 297, 298, 301, 302, 316, 560, 569, 623, 628, 632, 635, 637, 639, 671, 672, 673, 674, 675, 676, 677, 678, 684, 741, 743, 772, 778, 781, 790, 793, 811, 816, 819, 836, 837, 838, 842, 847, 848, 854, 855, 858, 871, 874, 876, 878, 879, 881, 882, 940, 959, 960, 961, 962, 963, 964, 965, 966], "dev": [17, 68, 69, 70, 72, 117, 123, 127, 129, 131, 275, 282, 306], "null": 17, "ce": 17, "cli": 17, "containerd": 17, "io": 17, "compos": [17, 121, 144], "plugin": 17, "systemctl": 17, "permiss": 17, "relat": [17, 18, 143, 275], "post": [17, 132, 854, 855, 858, 940, 946], "It": [17, 18, 20, 111, 112, 113, 114, 118, 120, 121, 124, 127, 129, 130, 131, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 275, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 582, 583, 584, 586, 589, 592, 600, 613, 616, 617, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 875, 876, 884, 885, 886, 889, 891, 894, 929, 930, 933, 935, 938], "headach": 17, "arm": [17, 18], "m1": 17, "instead": [17, 18, 19, 113, 114, 116, 117, 121, 124, 125, 127, 129, 130, 144], "featur": [17, 112, 125, 130, 940], "vm": 17, "azur": 17, "cloud": [17, 143], "mean": [17, 18, 60, 61, 68, 69, 105, 106, 109, 110, 111, 114, 117, 121, 122, 123, 124, 127, 129, 130, 131, 132, 143, 144, 275, 301, 302, 303, 304, 316, 560, 583, 832, 833, 834, 835, 836, 842, 859, 864, 876, 877, 896, 940, 953], "configur": [17, 18, 20, 68, 69, 122, 275, 315, 836, 849], "defin": [17, 19, 112, 113, 122, 125, 129, 131, 144, 322, 492, 495, 513, 516, 560, 613, 684, 690, 692, 699, 701, 732, 734, 859, 861, 862, 896, 901, 904, 905, 908, 909, 912], "dockerfil": [17, 20], "longer": [17, 122, 124], "worri": 17, "platform": 17, "agnost": [17, 120, 125, 127, 129, 132, 144, 940], "usual": 17, "studio": 17, "favourit": 17, "extens": [17, 18, 113, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 450, 453, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 684, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933], "theme": 17, "too": [17, 18, 144, 322, 336, 339, 492, 495], "done": [17, 18, 114, 116, 130], "unsupport": [17, 122, 241, 259, 260], "old": [17, 68, 69, 124], "slow": 17, "ipad": 17, "long": [17, 18, 114, 671, 681], "browser": 17, "cool": [17, 112], "requisit": 17, "head": [17, 121, 671, 682, 940, 959, 970], "pane": [17, 18], "readi": [17, 19], "begin": [17, 836, 837, 847], "outlin": [17, 18, 19, 111, 113, 116, 117, 121, 124, 129], "green": [17, 18, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 984, 985], "dropdown": 17, "tab": [17, 130, 940], "master": [17, 18, 121], "v": [17, 18, 127, 130, 131, 132, 671, 683, 940, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 979, 981, 982], "view": [17, 18, 170, 188, 191, 671, 674, 678], "log": [17, 18, 34, 35, 79, 80, 117, 121, 124, 127, 130, 170, 202, 203, 322, 462, 465, 470, 473, 684, 731, 940], "built": [17, 128, 170, 171, 172, 275, 959, 970, 971, 972], "bottom": 17, "box": 17, "patient": 17, "upto": 17, "15": [17, 97, 98, 114, 322, 361, 364, 517, 520, 671, 674, 684, 696, 698, 722, 724, 741, 743, 772, 806, 809, 854, 855, 858, 859, 861, 862, 863, 871, 874, 876, 877, 896, 897, 900], "minut": 17, "launch": 17, "12": [17, 97, 98, 114, 121, 322, 361, 364, 381, 384, 393, 396, 517, 520, 560, 578, 596, 634, 635, 638, 684, 696, 698, 722, 724, 741, 743, 772, 790, 793, 798, 801, 806, 809, 854, 855, 858, 859, 861, 862, 863, 871, 875, 876, 877, 896, 897, 900], "output": [17, 68, 69, 111, 112, 113, 114, 116, 117, 120, 121, 123, 124, 125, 127, 129, 131, 132, 144, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 275, 282, 283, 316, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 571, 572, 573, 575, 578, 579, 582, 583, 584, 586, 588, 589, 592, 600, 613, 616, 617, 634, 644, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 836, 849, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 875, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970], "That": [17, 18, 129, 130, 131, 322, 513, 516], "alreadi": [17, 18, 68, 69, 118, 121, 125, 129, 144, 275, 322, 385, 388, 418, 421, 492, 495, 517, 520, 556, 559, 684, 722, 724, 940], "refer": [17, 18, 116, 117, 122, 125, 144, 170, 185, 186, 322, 414, 417, 462, 465, 634, 635, 638, 640, 642, 684, 747, 749, 753, 755, 896, 917, 920, 925, 928, 929, 930, 933, 935, 938, 959, 969], "approach": [17, 18, 116, 117, 121, 129, 130, 144], "colour": 17, "applic": [17, 122, 123, 131, 671, 682, 683, 836, 842, 848], "good": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131], "chanc": 17, "vscode": 17, "show": [17, 18, 68, 69, 114, 124, 143, 144, 940], "explor": [17, 128, 132, 143], "troubleshoot": 17, "sometim": [17, 18], "ever": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "64": [17, 130, 131, 322, 533, 536, 537, 540, 671, 677, 678, 684, 722, 724, 896, 897, 900, 940, 959, 970], "bit": [17, 114, 117, 121, 129, 241, 257, 258, 261, 322, 365, 368, 369, 372, 377, 380, 896, 913, 916, 921, 924], "usr": 17, "more": [17, 18, 19, 111, 112, 114, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 170, 171, 172, 241, 245, 322, 414, 417, 684, 708, 711, 772, 790, 793, 876, 877, 878, 882, 884, 940], "nutshel": [17, 125], "hook": 17, "lint": 17, "accept": [17, 18, 23, 113, 114, 116, 117, 120, 121, 123, 124, 125, 129, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 478, 481, 482, 485, 501, 504, 513, 516, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 905, 908, 929, 930, 933, 940], "fix": [17, 18], "fail": [17, 19, 115, 116, 127, 129], "attempt": [17, 144], "succe": 17, "problemat": 17, "appli": [17, 18, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 142, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 241, 247, 248, 249, 251, 266, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 560, 561, 562, 563, 565, 582, 583, 584, 589, 590, 591, 593, 634, 635, 636, 637, 639, 653, 655, 657, 659, 671, 680, 682, 683, 684, 685, 686, 687, 689, 716, 718, 725, 727, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 777, 806, 807, 808, 810, 816, 819, 832, 833, 834, 836, 842, 845, 848, 849, 854, 855, 858, 861, 863, 878, 879, 880, 881, 940, 948, 949, 950, 973, 974], "proce": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifi": [17, 18, 113, 117, 122, 123, 127], "properli": [17, 111], "enter": [17, 18, 120, 122, 123, 125, 275], "unsur": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "feel": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 940], "server": [18, 940], "appropri": [18, 64, 65, 109, 110, 119, 322, 336, 339, 492, 495, 871, 872], "context": [18, 114, 121, 122, 123, 275, 560, 611, 671, 682, 959, 970], "suitabl": [18, 112, 121], "quick": [18, 111, 131], "alwai": [18, 19, 68, 69, 112, 113, 117, 118, 120, 121, 124, 125, 127, 129, 144, 241, 244, 322, 336, 339, 492, 495, 560, 604, 634, 649, 651, 666], "correct": [18, 19, 60, 61, 105, 106, 111, 117, 121, 122, 123, 125, 241, 270, 772, 773, 776, 896, 917, 918, 919, 920, 925, 926, 927, 928, 940], "tendenc": 18, "gener": [18, 19, 20, 37, 64, 65, 68, 69, 82, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 143, 144, 167, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 513, 516, 533, 536, 537, 540, 561, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 649, 651, 684, 696, 698, 772, 786, 789, 806, 809, 859, 860, 861, 862, 865, 867, 869, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 940, 975, 979], "land": 18, "end": [18, 121, 124, 126, 143, 144, 170, 171, 172, 322, 353, 356, 940, 946], "world": 18, "come": [18, 19, 131, 142, 940, 946], "fly": 18, "hard": [18, 129], "receiv": [18, 116, 122, 123, 275, 282, 283, 560, 567, 610, 959, 969], "respons": [18, 20], "internship": 18, "comment": 18, "trigger": 18, "unansw": 18, "label": [18, 127, 128, 132, 756, 757, 760, 762, 765, 767, 770], "respond": 18, "remov": [18, 19, 20, 68, 69, 113, 116, 117, 122, 124, 132, 684, 696, 698, 708, 711, 744, 746, 772, 812, 815, 832, 833, 834], "someon": [18, 144], "els": [18, 19, 112, 117, 118, 124, 127, 129, 131, 132, 144, 560, 570, 581, 585, 836, 846], "strive": [18, 144], "repli": 18, "newli": [18, 124, 167, 168, 241, 244, 560, 571], "place": [18, 68, 69, 111, 112, 113, 114, 116, 117, 121, 123, 125, 132, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 275, 317, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 602, 603, 604, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933, 975, 976, 977, 978, 979, 980], "bug": [18, 116], "serv": [18, 116, 117, 120, 121, 125, 126, 940], "suspect": 18, "behaviour": [18, 113, 116, 120, 121, 124, 125, 129], "observ": 18, "confid": 18, "noth": [18, 68, 69], "wrong": 18, "someth": [18, 112, 130, 131, 144], "bet": 18, "act": [18, 114, 144], "placehold": [18, 120, 125, 836, 848], "sub": [18, 19, 68, 69, 111, 116, 121, 129, 130, 131, 275, 297, 298, 301, 302, 303, 304, 684, 696, 698, 772, 811, 832, 833, 834, 835, 940], "mark": [18, 116], "ii": [18, 896, 897, 900], "iii": 18, "titl": [18, 940], "issue_numb": 18, "delet": [18, 20], "No": [18, 127], "wait": [18, 68, 69, 70, 71, 72], "progress": [18, 121, 128, 132], "pr": 18, "soon": [18, 121, 142, 144, 940, 946], "partial": [18, 68, 69, 971, 972], "solut": [18, 116, 121, 684, 732, 734], "review": [18, 112], "merg": 18, "everi": [18, 19, 20, 114, 115, 116, 117, 118, 119, 121, 124, 125, 127, 129, 131, 170, 193, 194, 197, 560, 561, 564], "shape": [18, 48, 49, 68, 69, 73, 74, 83, 84, 93, 94, 97, 98, 101, 102, 112, 113, 114, 122, 123, 124, 125, 127, 129, 130, 131, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 217, 218, 221, 223, 227, 228, 232, 233, 234, 235, 236, 240, 241, 244, 245, 246, 275, 284, 312, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 582, 583, 584, 586, 589, 592, 597, 600, 613, 616, 617, 623, 634, 635, 637, 639, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 803, 804, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 874, 875, 879, 881, 885, 886, 889, 891, 894, 896, 897, 900, 929, 930, 933, 935, 938, 940, 959, 961, 962, 963, 964, 965, 966, 973, 974], "move": [18, 68, 69, 112, 275, 317], "within": [18, 23, 26, 27, 116, 131, 144, 170, 171, 172, 859, 865, 867], "7": [18, 20, 34, 35, 48, 49, 70, 71, 79, 80, 97, 98, 114, 117, 121, 124, 155, 157, 158, 275, 294, 322, 323, 326, 336, 337, 338, 339, 340, 361, 364, 365, 368, 381, 384, 385, 388, 393, 396, 410, 413, 418, 421, 430, 433, 450, 453, 490, 491, 517, 520, 533, 536, 546, 550, 551, 555, 560, 569, 578, 588, 634, 635, 638, 640, 642, 653, 655, 671, 677, 678, 683, 684, 690, 692, 693, 695, 696, 698, 722, 724, 741, 743, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 776, 786, 789, 790, 793, 798, 801, 811, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 871, 875, 876, 877, 896, 897, 900], "dai": 18, "close": [18, 113, 322, 414, 417, 517, 520, 684, 735, 737], "likewis": [18, 113, 117, 121, 122, 125, 130], "freed": 18, "flag": [18, 68, 69, 124, 129, 275, 291, 634, 649, 651], "purpos": [18, 20, 114, 116, 117, 119, 120, 121, 125, 126, 129, 322, 414, 417, 940], "remain": [18, 114, 144, 322, 336, 339, 492, 495, 513, 516, 772, 802, 805, 836, 842], "access": [18, 20, 68, 69, 122], "short": [18, 131, 671, 681], "basi": [18, 115, 130], "situat": [18, 132], "alloc": [18, 144, 170, 223, 227, 228, 232, 241, 244, 275], "upon": [18, 114, 116, 124, 144], "period": 18, "prevent": [18, 124, 129, 634, 635, 638, 640, 642, 653, 655, 896, 921, 924, 975, 976, 977], "unabl": 18, "obvious": 18, "never": [18, 121], "reflect": [18, 120], "qualiti": 18, "hypothet": 18, "frustrat": 18, "delai": 18, "busi": 18, "fine": [18, 129, 132], "becaus": [18, 113, 116, 117, 118, 120, 122, 123, 124, 125, 127, 131, 132, 144], "inact": 18, "limit": [18, 68, 69, 70, 71, 72, 114, 116, 127, 130, 132, 144, 241, 258, 261, 560, 572, 573, 575, 772, 773, 776], "me": 18, "unfairli": 18, "definit": [18, 117, 122, 129, 684, 685, 688, 690, 692], "investig": 18, "Then": [18, 20, 129, 144], "practic": [18, 116], "separ": [18, 116, 120, 127, 129, 130], "branch": [18, 121, 144, 167, 168, 322, 353, 356], "simpli": [18, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 114, 116, 117, 120, 121, 123, 124, 125, 127, 131, 132, 161, 162, 163, 165, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 322, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 414, 417, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 561, 562, 563, 565, 589, 590, 591, 593, 635, 636, 637, 639, 685, 686, 687, 689, 773, 774, 775, 777, 806, 807, 808, 810, 861, 863, 878, 879, 880, 881], "role": [18, 128], "kept": [18, 68, 69, 70, 71, 72, 124, 832, 833, 834], "date": 18, "upstream": [18, 115], "complic": [18, 127], "root": [18, 20, 130, 322, 533, 536, 859, 860, 864], "merge_with_upstream": 18, "sh": 18, "name_of_your_branch": 18, "resolv": [18, 896, 913, 916, 921, 924], "clone": [18, 20, 68, 69, 275, 293, 294, 295, 296], "push": [18, 115], "both": [18, 113, 114, 117, 121, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 265, 322, 323, 326, 336, 339, 341, 344, 385, 388, 418, 421, 501, 504, 509, 512, 533, 536, 537, 540, 546, 550, 560, 588, 634, 635, 638, 671, 674, 683, 684, 685, 688, 690, 692, 696, 698, 708, 711, 747, 749, 772, 806, 809, 854, 855, 858, 876, 878, 882, 896, 901, 904, 929, 930, 933], "abort": 18, "tediou": 18, "resolut": 18, "stash": 18, "reinstat": 18, "correspond": [18, 68, 69, 70, 71, 113, 114, 115, 117, 120, 121, 122, 125, 241, 245, 322, 353, 356, 509, 512, 684, 690, 692, 699, 701, 732, 734, 772, 778, 781, 806, 809, 859, 860, 871, 872, 873, 876, 877, 878, 882, 884, 896, 913, 916, 917, 920, 921, 924, 925, 928], "fetch": 18, "uncommit": 18, "unstag": 18, "untrack": 18, "comprehens": 18, "explan": [18, 113, 121, 125, 129], "atlassian": 18, "tutori": 18, "wrote": 18, "piec": [18, 117, 119, 120, 127], "inform": [18, 241, 258, 261, 560, 566, 634, 666], "tag": 18, "usu": 18, "describ": [18, 128, 132, 896, 897, 900, 913, 916, 917, 920, 921, 924], "navig": [18, 111], "blame": 18, "revis": 18, "author": [18, 940], "eg": 18, "16": [18, 44, 45, 79, 80, 97, 98, 114, 130, 322, 546, 547, 549, 550, 671, 677, 684, 685, 686, 688, 696, 698, 722, 724, 861, 863, 871, 875, 896, 897, 900], "5": [18, 20, 34, 35, 36, 37, 44, 45, 48, 49, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 114, 118, 125, 129, 130, 131, 155, 157, 158, 160, 170, 194, 197, 205, 208, 218, 221, 233, 235, 236, 240, 241, 247, 249, 250, 251, 275, 294, 310, 322, 323, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 357, 360, 361, 364, 377, 380, 381, 384, 385, 386, 387, 388, 393, 396, 418, 419, 420, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 549, 550, 551, 552, 554, 555, 560, 561, 562, 569, 578, 588, 589, 592, 593, 623, 628, 634, 635, 637, 638, 639, 671, 674, 676, 677, 683, 684, 685, 686, 688, 690, 692, 693, 695, 696, 698, 705, 707, 722, 724, 741, 743, 744, 746, 756, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 808, 809, 810, 811, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 870, 871, 873, 874, 875, 876, 877, 878, 882, 885, 886, 889, 896, 897, 900, 901, 904, 929, 930, 933, 959, 970], "past": 18, "l": [18, 111, 684, 685, 688, 699, 701, 708, 711, 744, 746], "filepath": [18, 68, 69], "grep": 18, "commit_id": 18, "handi": 18, "histori": 18, "toggl": 18, "vertic": 18, "highlight": [18, 114], "previou": [18, 116, 125, 132, 144, 634, 640, 642, 653, 655], "shown": [18, 64, 65, 68, 69, 109, 110, 114, 125, 127, 129, 144, 322, 361, 364, 381, 384, 393, 396, 517, 520, 551, 555, 684, 693, 695, 772, 786, 789, 790, 793, 876, 877, 885, 886, 889], "whenev": [18, 129, 130], "think": [18, 114], "interact": [18, 940], "gain": [18, 126, 131, 953], "quit": [18, 19, 113, 117, 119, 120], "repeat": [18, 48, 49, 68, 69, 93, 94, 113, 114, 118, 120, 121, 560, 584, 772, 824, 827], "yourself": [18, 19, 143], "simpler": [18, 129], "cannot": [18, 118, 122, 132], "least": [18, 114, 117, 120, 684, 708, 711], "final": [18, 113, 114, 117, 120, 122, 124, 127, 129, 130, 170, 199, 200, 202, 203, 560, 587, 959, 970], "tickbox": 18, "lower": [18, 68, 69, 114, 127, 144, 170, 185, 186, 223, 227, 322, 490, 684, 685, 688, 859, 865, 867], "corner": 18, "without": [18, 68, 69, 112, 117, 120, 121, 123, 125, 127, 129, 130, 131, 143, 144, 560, 615, 620, 772, 802, 805, 836, 838, 876, 877, 878, 882, 884], "span": 18, "intent": [18, 124], "larg": [18, 130, 322, 336, 339, 492, 495], "discourag": 18, "philosophi": 18, "increment": [18, 560, 603], "frequent": [18, 19], "valuabl": 18, "infrequ": 18, "earli": [18, 940], "wast": 18, "spot": [18, 117], "mistak": 18, "propos": 18, "mountain": 18, "around": [18, 68, 69, 70, 71, 72, 117, 120, 125, 129, 144], "advoc": [18, 144], "individu": [18, 19, 117], "per": [18, 130, 275, 671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "style": [18, 871, 874], "ve": [18, 126, 129, 859, 860, 940], "were": [18, 68, 69, 112, 116, 121], "actual": [18, 111, 117, 124, 126, 129, 131, 144], "aim": [18, 126], "part": [18, 112, 115, 116, 117, 127, 128, 132, 143, 144, 170, 223, 227, 228, 232, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 971, 972], "subsect": 18, "session": [18, 940], "block": [18, 117, 126, 128, 132, 144, 275, 940], "smaller": [18, 127, 132, 772, 773, 776, 806, 809, 896, 913, 916, 921, 924], "edit": 18, "exact": [18, 68, 69, 127, 876, 877], "beauti": 18, "particularli": [18, 130, 144], "concern": [18, 111, 114, 121, 124, 126], "effici": [18, 116, 117, 121, 124, 125, 127, 130, 144], "difficult": [18, 116, 144, 876, 877, 878, 882, 884], "undo": 18, "stress": 18, "frequenc": [18, 560, 587], "pycharm": 18, "pytest": [18, 116], "button": 18, "declar": 18, "insid": [18, 20, 112, 122], "exec": 18, "rm": 18, "rf": 18, "cp": 18, "ivy_contain": 18, "bash": [18, 20], "test_ivi": [18, 116], "test_funct": 18, "test_cor": 18, "test_imag": 18, "test_random_crop": 18, "header": 18, "summari": [18, 68, 69, 241, 253, 254, 255, 267, 268, 269, 275, 285, 286, 560, 576, 580, 598, 634, 665, 670], "q": [18, 144, 671, 683, 684, 699, 701, 728, 730], "array_api_test": 18, "test_creation_funct": 18, "test_arang": 18, "window": [18, 20, 671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "variou": [18, 113, 119, 125, 143], "valu": [18, 48, 49, 56, 57, 68, 69, 70, 71, 72, 93, 94, 114, 116, 117, 121, 122, 123, 124, 125, 127, 129, 132, 144, 170, 171, 172, 185, 186, 193, 194, 197, 199, 200, 202, 203, 241, 244, 253, 254, 255, 275, 284, 315, 316, 322, 323, 326, 328, 331, 336, 339, 341, 344, 349, 352, 385, 388, 402, 405, 406, 409, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 490, 491, 492, 495, 501, 504, 505, 508, 509, 512, 517, 520, 551, 555, 556, 559, 560, 572, 573, 575, 576, 581, 587, 588, 589, 592, 598, 601, 605, 615, 616, 617, 618, 619, 620, 633, 634, 635, 638, 640, 642, 644, 653, 655, 666, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 716, 718, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 750, 752, 772, 773, 776, 782, 783, 784, 785, 798, 801, 802, 805, 828, 830, 831, 832, 833, 834, 836, 840, 841, 842, 843, 844, 849, 852, 853, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 869, 871, 872, 873, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 959, 960, 961, 962, 963, 964, 965, 966, 970, 971, 972, 973, 974, 975, 976, 977, 979], "cpu": [18, 68, 69, 123, 144, 170, 199, 200, 202, 203, 275, 291, 292, 294, 308, 311, 313, 317, 318, 320, 321, 560, 588, 589, 592, 613, 616, 617, 859, 860, 861, 862, 864, 865, 867, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "gpu": [18, 97, 98, 123, 129, 144, 275, 291, 294, 307, 309, 313, 315, 320, 861, 863], "combin": [18, 68, 69, 70, 71, 72, 114, 116, 117, 120, 121, 132, 684, 690, 692], "wherebi": [19, 121, 836, 848], "broad": 19, "distribut": [19, 68, 69, 123, 144, 275, 293, 297, 298, 299, 300, 671, 679, 756, 757, 760, 762, 765, 767, 770, 859, 860, 861, 862, 864, 865, 867, 959, 967, 971, 972], "across": [19, 68, 69, 114, 116, 117, 121, 122, 125, 275, 282, 283, 293, 294, 296, 297, 298, 299, 300, 304, 314, 315, 560, 568, 569, 836, 842, 871, 873], "todo": [19, 116], "commit": [19, 116], "NOT": [19, 322, 478, 481], "static": [19, 66, 67, 68, 69, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 97, 98, 101, 102, 103, 104, 107, 108, 109, 110, 113, 114, 117, 144, 161, 165, 167, 168, 247, 251, 323, 327, 336, 340, 546, 547, 551, 552, 561, 565, 589, 593, 685, 689, 773, 777, 806, 810, 861, 863, 878, 879], "method": [19, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 109, 110, 112, 113, 114, 116, 117, 120, 125, 127, 128, 131, 132, 144, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 174, 175, 180, 181, 188, 189, 191, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 322, 323, 324, 325, 327, 336, 337, 338, 340, 341, 344, 361, 364, 381, 384, 385, 386, 387, 388, 393, 396, 418, 419, 420, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 551, 552, 553, 554, 555, 560, 561, 562, 563, 565, 576, 577, 588, 589, 590, 591, 593, 616, 617, 628, 630, 634, 635, 636, 637, 639, 653, 655, 657, 659, 671, 677, 683, 684, 685, 686, 687, 689, 690, 692, 693, 695, 756, 757, 760, 772, 773, 774, 775, 777, 786, 789, 790, 793, 798, 801, 806, 807, 808, 810, 811, 820, 823, 836, 837, 847, 848, 849, 854, 855, 858, 859, 861, 863, 864, 865, 867, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 929, 930, 933, 940, 959, 970, 971, 972], "instanc": [19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 101, 102, 109, 110, 113, 114, 116, 117, 120, 122, 124, 125, 130, 131, 132, 145, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 170, 171, 172, 174, 175, 177, 179, 180, 181, 183, 185, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 202, 203, 205, 208, 210, 211, 215, 216, 218, 219, 221, 223, 225, 227, 228, 230, 232, 233, 235, 236, 238, 240, 241, 247, 248, 249, 250, 275, 282, 313, 322, 323, 324, 325, 326, 336, 337, 338, 339, 341, 344, 361, 364, 381, 384, 385, 386, 387, 388, 393, 396, 418, 419, 420, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 548, 549, 550, 551, 553, 554, 555, 560, 561, 562, 563, 577, 588, 589, 590, 591, 604, 628, 630, 635, 636, 637, 639, 671, 674, 677, 683, 684, 685, 686, 687, 688, 690, 692, 693, 695, 696, 698, 756, 757, 760, 772, 773, 774, 775, 786, 789, 790, 793, 798, 801, 806, 807, 808, 809, 811, 820, 823, 854, 855, 858, 859, 864, 865, 867, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 929, 930, 933, 951, 952], "revers": [19, 70, 71, 113, 114, 132, 144, 560, 581, 772, 790, 793], "resourc": 19, "content": [19, 20, 68, 69, 124, 127, 130], "thei": [19, 68, 69, 111, 112, 114, 117, 119, 121, 122, 123, 124, 129, 130, 131, 132, 144, 241, 265, 832, 833, 834, 859, 860, 940, 981, 982], "hypothesi": 19, "cover": [19, 113, 114, 117, 119, 126], "lambda": [19, 127, 130, 975, 978, 980], "direct": [19, 131, 132, 143, 885, 891, 894], "bind": [19, 121], "def": [19, 112, 114, 117, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 940], "special": [19, 70, 71, 112, 113, 114, 120, 125, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 381, 384, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 896, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928], "aforement": 19, "categori": [19, 112, 120, 121, 122, 126, 940], "parent": [19, 129], "arraywithelementwis": [19, 34, 120], "containerwithmanipul": [19, 70, 71, 93], "hint": [19, 112, 113, 117, 120, 124, 125, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933], "its": [19, 20, 113, 241, 245, 275, 316, 684, 708, 711, 772, 786, 789, 802, 805, 806, 809, 820, 823], "docstr": [19, 20, 21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 111, 112, 117, 121, 125, 161, 162, 163, 165, 170, 171, 172, 174, 175, 177, 179, 180, 181, 183, 185, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 205, 208, 210, 211, 215, 216, 218, 219, 221, 223, 225, 227, 228, 230, 232, 233, 235, 236, 238, 240, 241, 247, 248, 249, 250, 251, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 361, 364, 381, 384, 385, 386, 387, 388, 393, 396, 418, 419, 420, 421, 450, 453, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 562, 563, 565, 589, 590, 591, 593, 635, 636, 637, 639, 684, 685, 686, 687, 689, 693, 695, 696, 698, 772, 773, 774, 775, 777, 786, 789, 790, 793, 806, 807, 808, 809, 810, 861, 863, 876, 877, 878, 879, 880, 881, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933], "thorough": [19, 113, 116, 125], "transpil": [19, 126, 128, 940, 946], "builder": [20, 142, 144, 940], "maco": 20, "ubuntu": 20, "uid": 20, "make_docs_without_dock": 20, "rel": [20, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 684, 696, 698, 716, 718, 725, 727, 744, 746, 772, 790, 793, 806, 809, 885, 886, 889, 891, 894, 940], "synchron": 20, "rest": [20, 128, 132], "remove_doc": 20, "_": [20, 113, 121, 124, 129, 130, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 634, 635, 638, 640, 642, 684, 696, 698, 753, 755, 772, 786, 789, 806, 809, 876, 877, 885, 886, 889, 896, 901, 904], "indic": [20, 36, 37, 68, 69, 81, 82, 128, 132, 155, 160, 322, 521, 524, 560, 588, 589, 590, 591, 592, 593, 600, 613, 616, 617, 671, 672, 673, 674, 675, 676, 677, 678, 684, 750, 752, 772, 806, 809, 836, 837, 839, 841, 843, 844, 845, 847, 850, 851, 852, 853, 854, 855, 858, 859, 860, 871, 872, 873, 874, 876, 877, 883, 885, 886, 889, 891, 894, 940, 943, 945, 959, 960, 961, 962, 963, 964, 965, 966, 971, 972], "privat": [20, 975, 979], "fulfil": [20, 126, 940], "autogenerated_sourc": 20, "format": [20, 68, 69, 113, 122, 123, 127, 129, 130, 241, 256, 275, 292, 896, 897, 900, 940], "png": [20, 130], "_imag": 20, "lastli": 20, "structur": [20, 68, 69, 70, 71, 72, 112, 117, 120, 121, 130, 131, 560, 576, 836, 849], "rst": 20, "skip": [20, 68, 69, 116, 836, 849], "read": [20, 68, 69, 940], "partial_sourc": 20, "conf": 20, "copi": [20, 28, 29, 68, 69, 73, 74, 113, 118, 122, 127, 129, 130, 143, 144, 170, 174, 175, 176, 177, 178, 188, 191, 241, 244, 275, 317, 560, 577, 629, 630, 772, 802, 805, 836, 838, 885, 891, 894], "create_rst_fil": 20, "filter": [20, 671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "repres": [20, 129, 170, 205, 208, 241, 257, 322, 332, 335, 336, 339, 345, 348, 357, 360, 393, 396, 492, 495, 529, 532, 551, 555, 671, 680, 684, 731, 732, 734], "overal": [20, 113, 121, 122, 123, 132], "markup": 20, "6": [20, 34, 35, 38, 39, 48, 49, 70, 71, 79, 80, 81, 82, 97, 98, 114, 118, 121, 129, 130, 131, 155, 157, 158, 160, 170, 194, 197, 275, 294, 310, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 361, 364, 365, 368, 381, 384, 385, 386, 387, 388, 393, 396, 418, 421, 430, 433, 450, 453, 490, 491, 497, 500, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 569, 578, 588, 589, 592, 593, 623, 628, 634, 635, 636, 638, 671, 674, 677, 678, 683, 684, 690, 692, 693, 695, 696, 698, 722, 724, 735, 737, 741, 743, 756, 757, 760, 767, 770, 772, 773, 774, 776, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 809, 811, 820, 823, 854, 855, 858, 859, 860, 861, 862, 863, 871, 872, 875, 876, 877, 878, 882, 896, 897, 900, 901, 904], "extract": [20, 112], "get_functions_and_class": 20, "doctr": 20, "readm": [20, 144], "module_nam": 20, "copy_readme_to_rst": 20, "tabl": 20, "toc": 20, "tree": 20, "append": [20, 68, 69, 116, 127, 130, 322, 369, 372, 684, 696, 698, 708, 711], "append_toctree_to_rst": 20, "9": [20, 34, 35, 38, 39, 48, 49, 70, 71, 79, 80, 83, 84, 97, 98, 114, 130, 131, 322, 336, 337, 338, 339, 340, 361, 364, 365, 368, 490, 491, 517, 520, 533, 536, 537, 540, 560, 588, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 671, 674, 677, 678, 684, 690, 692, 693, 695, 696, 698, 722, 724, 735, 737, 741, 743, 772, 773, 774, 776, 790, 793, 798, 801, 806, 809, 811, 859, 860, 861, 862, 863, 871, 875, 876, 877, 896, 897, 900, 975, 976, 977], "index": [20, 28, 29, 68, 69, 73, 74, 117, 121, 129, 169, 170, 185, 186, 205, 206, 207, 208, 209, 275, 313, 560, 566, 588, 589, 592, 772, 816, 819, 836, 839, 840, 843, 844, 845, 850, 852, 871, 872, 873, 874, 876, 877, 878, 882, 885, 886, 889, 943, 945], "create_index_rst": 20, "14": [20, 97, 98, 114, 121, 322, 381, 384, 634, 635, 638, 671, 683, 684, 696, 698, 722, 724, 861, 863, 876, 877, 896, 897, 900], "\u03c0": [20, 322, 328, 331, 341, 344, 349, 352, 353, 356], "namespac": [20, 112, 122, 127, 132], "arraywithactiv": 21, "abc": [21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 129, 275, 282, 287, 560, 585, 971, 972, 975, 979], "softplu": [21, 22, 66, 67, 155, 165, 940], "variant": [21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 114, 161, 162, 163, 165, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 561, 562, 563, 565, 589, 590, 591, 593, 635, 636, 637, 639, 685, 686, 687, 689, 773, 774, 775, 777, 806, 807, 808, 810, 861, 863, 878, 879, 880, 881], "wrap": [21, 22, 23, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 110, 111, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 132, 144, 145, 153, 161, 162, 163, 165, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 560, 561, 562, 563, 565, 571, 589, 590, 591, 593, 634, 635, 636, 637, 639, 669, 685, 686, 687, 689, 773, 774, 775, 777, 806, 807, 808, 810, 861, 863, 878, 879, 880, 881], "minim": [21, 22, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 56, 57, 66, 67, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 101, 102, 113, 124, 127, 161, 162, 163, 165, 174, 175, 180, 181, 188, 189, 194, 195, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 249, 251, 323, 324, 325, 327, 336, 337, 338, 340, 385, 386, 387, 418, 419, 420, 546, 547, 548, 549, 551, 552, 553, 554, 561, 562, 563, 565, 589, 590, 591, 593, 635, 636, 637, 639, 685, 686, 687, 689, 773, 774, 775, 777, 806, 807, 808, 810, 861, 863, 878, 879, 880, 881], "collect": [23, 68, 69, 116, 143, 155, 167, 275, 560, 634, 671, 756, 836, 849, 854, 859, 948, 959, 973, 975], "args_to_ivi": 23, "include_deriv": [23, 24, 25, 26, 27, 836, 838, 848], "keyword": [23, 24, 25, 68, 69, 70, 71, 72, 112, 122, 123, 124, 125, 130, 170, 205, 208, 275, 282, 283, 296, 300, 304, 560, 567, 610, 836, 842, 896, 921, 924, 971, 972], "variabl": [23, 24, 25, 26, 27, 68, 69, 70, 71, 113, 118, 121, 122, 124, 125, 130, 131, 132, 144, 560, 570, 602, 603, 604, 605, 606, 607, 609, 626, 634, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 669, 671, 682, 684, 732, 734, 832, 833, 834, 835, 854, 855, 858, 940, 951, 952, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "nest": [23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 112, 117, 120, 121, 129, 130, 131, 144, 275, 296, 300, 304, 560, 628, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 971, 972, 975, 976, 977, 978, 979, 980], "unchang": [23, 24, 25, 26, 27], "posit": [23, 24, 25, 34, 35, 79, 80, 125, 130, 143, 169, 170, 185, 186, 241, 258, 275, 296, 300, 304, 322, 323, 326, 434, 437, 438, 441, 492, 495, 513, 516, 560, 587, 684, 685, 688, 772, 786, 789, 806, 809, 859, 869, 871, 874, 929, 930, 933, 935, 938, 951, 952], "bool": [23, 24, 25, 26, 27, 30, 31, 68, 69, 109, 110, 114, 121, 122, 124, 132, 167, 168, 170, 193, 241, 244, 247, 248, 250, 253, 254, 255, 256, 259, 262, 263, 264, 274, 275, 291, 292, 307, 316, 319, 322, 361, 364, 365, 368, 373, 376, 381, 384, 402, 405, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 474, 477, 478, 481, 482, 485, 501, 504, 560, 561, 564, 568, 569, 578, 581, 585, 587, 597, 599, 604, 606, 607, 608, 609, 622, 632, 633, 634, 666, 684, 685, 688, 712, 714, 735, 737, 750, 752, 772, 811, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 848, 859, 860, 871, 872, 873, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "deriv": [23, 24, 25, 26, 27, 122, 123, 129, 131, 170, 180, 183, 194, 197, 218, 221, 236, 240, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 836, 838, 848, 971, 975, 979, 981], "tupl": [23, 24, 25, 26, 27, 44, 45, 56, 57, 68, 69, 112, 121, 122, 123, 125, 129, 130, 131, 144, 170, 174, 177, 179, 193, 210, 213, 215, 216, 233, 235, 241, 246, 260, 275, 291, 560, 587, 623, 671, 674, 677, 678, 681, 684, 716, 718, 725, 727, 735, 736, 737, 741, 743, 750, 752, 772, 778, 781, 782, 785, 790, 793, 794, 797, 802, 805, 806, 809, 812, 815, 816, 819, 828, 831, 832, 833, 834, 835, 836, 838, 839, 841, 843, 844, 845, 847, 848, 850, 851, 852, 853, 859, 864, 865, 867, 871, 874, 876, 877, 878, 880, 882, 883, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "kei": [23, 24, 25, 68, 69, 70, 71, 72, 121, 130, 275, 284, 560, 566, 576, 671, 682, 683, 832, 833, 834, 836, 839, 845, 849, 951, 952, 959, 970, 975, 979], "word": [23, 24, 25, 170, 171, 172, 859, 865, 867, 951, 952], "args_to_n": [23, 124, 129], "to_ivi": [23, 68, 69, 129, 836, 849], "input": [23, 26, 27, 38, 39, 68, 69, 70, 71, 72, 79, 80, 81, 82, 83, 84, 89, 90, 93, 94, 97, 98, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 145, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 263, 264, 265, 266, 270, 275, 282, 283, 291, 292, 293, 294, 296, 297, 300, 304, 310, 316, 317, 322, 323, 326, 327, 328, 331, 332, 335, 336, 339, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 547, 550, 551, 552, 555, 556, 559, 560, 561, 564, 565, 566, 568, 569, 570, 572, 573, 575, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 597, 599, 600, 602, 603, 604, 606, 607, 608, 609, 613, 616, 617, 622, 623, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 649, 651, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 777, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974], "leaf": [23, 26, 27, 68, 69, 117, 121, 130, 836, 837, 846, 847], "union": [23, 26, 27, 36, 37, 44, 45, 68, 69, 112, 114, 117, 120, 121, 122, 123, 124, 125, 127, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 288, 289, 290, 291, 292, 294, 297, 298, 299, 300, 305, 311, 313, 315, 316, 317, 318, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 564, 568, 569, 572, 573, 575, 578, 579, 582, 583, 584, 586, 587, 588, 589, 590, 592, 597, 599, 600, 602, 603, 604, 613, 616, 617, 622, 623, 628, 629, 630, 632, 633, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 666, 668, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 847, 848, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "nativearrai": [23, 26, 27, 28, 29, 36, 37, 112, 114, 117, 120, 121, 124, 125, 127, 129, 132, 145, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 180, 183, 194, 197, 199, 200, 202, 203, 205, 208, 210, 211, 213, 218, 221, 223, 227, 228, 232, 236, 240, 241, 244, 245, 246, 247, 250, 256, 258, 261, 263, 264, 266, 270, 275, 291, 292, 294, 310, 316, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 561, 562, 564, 568, 569, 572, 573, 575, 577, 578, 579, 582, 583, 584, 586, 587, 588, 589, 590, 592, 597, 599, 600, 602, 603, 604, 613, 616, 617, 622, 623, 628, 629, 630, 632, 633, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 666, 668, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 836, 838, 848, 854, 855, 858, 859, 860, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "travers": [23, 26, 27, 68, 69, 121, 127, 129, 836, 848], "lowest": [23, 26, 27, 68, 69, 117, 144, 836, 848, 859, 861, 862], "leav": [23, 26, 27, 68, 69, 70, 71, 113, 114, 116, 117, 121, 122, 124, 125, 130, 131, 772, 816, 819, 836, 837, 838, 846, 847, 848], "to_n": [23, 68, 69], "item": [23, 27, 64, 65, 68, 69, 122, 127, 129, 130, 132, 241, 253, 275, 282, 283, 284, 291, 293, 295, 297, 299, 303, 560, 576, 598, 624, 625, 836, 841, 842, 843, 844, 848, 852, 853, 940, 971, 972], "arraywithcr": 28, "asarrai": [28, 29, 73, 74, 124, 170, 671, 672, 876, 878, 882], "dtype": [28, 29, 30, 31, 60, 61, 68, 69, 73, 74, 75, 76, 105, 106, 112, 114, 117, 122, 123, 129, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 312, 322, 377, 380, 560, 568, 569, 613, 629, 671, 679, 772, 786, 789, 854, 855, 858, 859, 865, 867, 871, 872, 873, 885, 891, 894, 896, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 929, 930, 933, 940, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 981, 982], "empty_lik": [28, 29, 73, 74, 170], "from_dlpack": [28, 29, 73, 74, 170], "full_lik": [28, 29, 73, 74, 170], "fill_valu": [28, 29, 73, 74, 122, 170, 193, 194, 195, 196, 197, 198, 322, 430, 433, 450, 453], "meshgrid": [28, 29, 73, 74, 170], "xy": [28, 29, 73, 74, 170, 205, 206, 207, 208, 209], "ones_lik": [28, 29, 73, 74, 132, 170, 940], "tril": [28, 29, 73, 74, 170], "k": [28, 29, 73, 74, 111, 127, 170, 185, 186, 187, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 560, 568, 671, 683, 684, 708, 711, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746, 859, 864, 865, 867, 871, 874], "triu": [28, 29, 73, 74, 170], "zeros_lik": [28, 29, 73, 74, 170, 772, 773, 776, 940], "creation": [29, 68, 69, 70, 71, 72, 74, 112, 122, 123, 127, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 210, 213, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240], "data_typ": [30, 31, 75, 76, 112, 122, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "arraywithdatatyp": 30, "can_cast": [30, 31, 75, 76, 117, 122, 241, 251], "float32": [30, 31, 75, 76, 114, 122, 241, 242, 243, 247, 248, 249, 250, 251, 259, 854, 855, 858], "float64": [30, 31, 122, 241, 244, 247, 248, 250, 259], "true": [30, 31, 36, 37, 44, 45, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 116, 117, 121, 122, 124, 127, 129, 130, 131, 132, 155, 156, 161, 163, 165, 167, 168, 170, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 244, 247, 248, 249, 250, 251, 275, 291, 308, 312, 313, 322, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 364, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 384, 385, 387, 389, 391, 393, 395, 397, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 481, 482, 484, 485, 486, 488, 492, 494, 496, 497, 499, 501, 503, 504, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 573, 574, 578, 585, 587, 589, 591, 593, 599, 600, 607, 622, 628, 630, 633, 634, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 671, 679, 684, 685, 687, 688, 689, 708, 710, 712, 714, 735, 736, 737, 750, 752, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 811, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 833, 834, 835, 836, 837, 846, 847, 849, 855, 857, 859, 860, 865, 866, 868, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 903, 904, 905, 907, 908, 909, 911, 912, 913, 915, 916, 917, 919, 920, 921, 923, 924, 925, 927, 928, 929, 930, 932, 933, 934, 935, 937, 938, 939, 959, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "arraywithdevic": [32, 129], "ab": [34, 35, 79, 80, 116, 119, 322, 327, 509, 512, 684, 750, 752, 940], "y": [34, 35, 36, 37, 44, 45, 48, 49, 56, 57, 70, 71, 79, 80, 81, 82, 89, 90, 93, 94, 97, 98, 101, 102, 112, 114, 118, 121, 127, 129, 155, 157, 158, 159, 160, 161, 164, 166, 170, 193, 194, 197, 205, 208, 215, 216, 218, 221, 236, 240, 241, 244, 275, 292, 306, 310, 315, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 344, 353, 356, 361, 364, 365, 368, 377, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 396, 410, 413, 418, 419, 420, 421, 430, 433, 450, 453, 490, 491, 497, 500, 501, 504, 517, 520, 533, 536, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 568, 569, 577, 578, 585, 586, 588, 589, 590, 591, 592, 593, 622, 628, 629, 630, 634, 644, 671, 677, 678, 680, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 705, 707, 722, 724, 741, 743, 744, 746, 756, 757, 760, 762, 765, 767, 770, 772, 773, 774, 775, 776, 777, 778, 781, 786, 789, 790, 793, 798, 801, 802, 805, 806, 807, 808, 809, 810, 811, 820, 823, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 885, 886, 889, 896, 897, 900, 901, 904, 917, 920, 921, 924, 929, 930, 933], "aco": [34, 35, 79, 80, 322, 940], "acosh": [34, 35, 79, 80, 241, 259, 260, 322, 940], "x2": [34, 35, 36, 37, 44, 45, 68, 69, 79, 80, 81, 82, 89, 90, 114, 125, 241, 270, 275, 310, 322, 336, 337, 338, 339, 340, 353, 354, 355, 356, 361, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 397, 398, 399, 400, 401, 402, 403, 404, 405, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 446, 447, 448, 449, 450, 451, 452, 453, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 541, 542, 543, 544, 545, 560, 561, 562, 563, 564, 565, 671, 676, 684, 690, 691, 692, 708, 709, 710, 711, 722, 723, 724, 732, 733, 734, 741, 742, 743, 747, 748, 749, 871, 875], "z": [34, 35, 36, 37, 70, 71, 79, 80, 81, 82, 114, 118, 121, 127, 129, 275, 306, 322, 336, 337, 338, 339, 340, 361, 364, 381, 384, 430, 433, 450, 453, 490, 491, 560, 568, 569, 588, 589, 590, 591, 593, 622, 684, 690, 692, 756, 757, 760, 762, 765, 772, 773, 776, 871, 872, 896, 897, 900, 901, 904], "asin": [34, 35, 79, 80, 322, 940], "asinh": [34, 35, 79, 80, 322, 940], "atan": [34, 35, 79, 80, 322, 940], "atan2": [34, 35, 79, 80, 322, 940], "atanh": [34, 35, 79, 80, 322, 940], "bitwise_and": [34, 35, 79, 80, 322], "bitwise_invert": [34, 35, 79, 80, 322], "bitwise_left_shift": [34, 35, 79, 80, 322], "bitwise_or": [34, 35, 79, 80, 322], "bitwise_right_shift": [34, 35, 79, 80, 322], "bitwise_xor": [34, 35, 79, 80, 322], "ceil": [34, 35, 79, 80, 170, 171, 172, 322, 940], "cosh": [34, 35, 79, 80, 322, 940], "divid": [34, 35, 68, 69, 79, 80, 114, 120, 322, 422, 425, 560, 624, 772, 811], "equal": [34, 35, 68, 69, 79, 80, 114, 121, 122, 170, 185, 186, 193, 194, 197, 241, 244, 322, 369, 372, 377, 380, 434, 437, 438, 441, 509, 512, 517, 520, 560, 561, 564, 568, 569, 684, 696, 698, 716, 718, 725, 727, 772, 773, 776, 782, 785, 811, 828, 831, 859, 865, 867, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894, 896, 905, 908, 917, 920, 921, 924, 925, 928], "erf": [34, 35, 79, 80, 322], "exp": [34, 35, 79, 80, 322, 414, 417, 470, 473, 940], "expm1": [34, 35, 79, 80, 322], "floor": [34, 35, 79, 80, 322, 377, 380, 560, 586, 940], "floor_divid": [34, 35, 79, 80, 322], "greater": [34, 35, 68, 69, 79, 80, 322, 328, 331, 341, 344, 353, 356, 369, 372, 377, 380, 418, 421, 422, 425, 509, 512, 513, 516, 521, 524, 556, 559, 684, 690, 692, 772, 812, 815, 859, 865, 867], "greater_equ": [34, 35, 79, 80, 322], "isfinit": [34, 35, 79, 80, 322], "isinf": [34, 35, 79, 80, 322], "isnan": [34, 35, 79, 80, 322], "less_equ": [34, 35, 79, 80, 322], "log10": [34, 35, 79, 80, 322], "log1p": [34, 35, 79, 80, 322], "log2": [34, 35, 79, 80, 322], "logaddexp": [34, 35, 79, 80, 322], "logical_and": [34, 35, 79, 80, 322, 940], "logical_not": [34, 35, 79, 80, 322, 940], "logical_or": [34, 35, 79, 80, 322, 940], "logical_xor": [34, 35, 79, 80, 322], "multipli": [34, 35, 79, 80, 114, 118, 120, 322, 560, 578], "neg": [34, 35, 79, 80, 117, 121, 124, 155, 157, 170, 171, 172, 185, 186, 322, 434, 437, 438, 441, 492, 495, 509, 512, 513, 516, 684, 735, 737, 747, 749, 750, 752, 772, 790, 793, 806, 809, 929, 930, 933, 935, 938], "not_equ": [34, 35, 79, 80, 322], "pow": [34, 35, 79, 80, 322], "remaind": [34, 35, 68, 69, 79, 80, 322, 560, 586, 772, 811], "sin": [34, 35, 79, 80, 120, 127, 322, 560, 587, 940], "sinh": [34, 35, 79, 80, 322, 940], "sqrt": [34, 35, 79, 80, 322, 684, 750, 752], "squar": [34, 35, 79, 80, 322, 533, 536, 671, 674, 684, 685, 688, 693, 695, 699, 701, 702, 704, 705, 707, 715, 731, 732, 734, 735, 737], "subtract": [34, 35, 79, 80, 114, 120, 322], "tan": [34, 35, 79, 80, 113, 117, 121, 124, 125, 127, 322, 341, 344, 547, 684, 696, 698, 876, 877, 885, 886, 889, 940], "56": [34, 35, 79, 80, 114, 322, 533, 536, 546, 547, 548, 549, 550, 634, 635, 638, 684, 722, 724, 896, 897, 900], "19": [34, 35, 79, 80, 114, 322, 381, 384, 546, 547, 548, 549, 550, 684, 696, 698], "tanh": [34, 35, 79, 80, 127, 155, 322, 552, 940], "762": [34, 35, 79, 80, 155, 166, 322, 551, 553, 554, 555], "964": [34, 35, 79, 80, 155, 166, 322, 551, 553, 554, 555], "trunc": [34, 35, 79, 80, 322], "elementwis": [35, 68, 69, 80, 112, 117, 127, 132, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559], "arraywithgener": [36, 129], "all_equ": [36, 37, 81, 82, 560, 565], "equality_matrix": [36, 37, 81, 82, 560, 561, 562, 563, 564, 565], "x1": [36, 37, 79, 80, 81, 82, 114, 125, 241, 270, 275, 310, 322, 336, 339, 340, 353, 356, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 401, 402, 405, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 490, 491, 492, 495, 496, 501, 504, 509, 512, 513, 516, 541, 542, 545, 560, 561, 562, 563, 564, 565, 568, 671, 676, 684, 690, 692, 708, 711, 722, 724, 732, 734, 741, 743, 747, 749, 871, 875], "mix": [36, 37, 70, 71, 111, 114, 116, 127, 241, 266, 275, 310, 322, 336, 339, 361, 364, 381, 384, 430, 433, 450, 453, 490, 491, 501, 504, 560, 561, 562, 577, 585, 588, 589, 592, 628, 629, 630, 671, 674, 677, 678, 683, 684, 685, 688, 741, 743, 756, 757, 760, 767, 770, 772, 773, 776, 854, 855, 858, 871, 875, 896, 897, 900, 905, 908], "gather_nd": [36, 37, 68, 69, 81, 82, 560, 593, 940], "arraywithgradi": [38, 129], "adam_step": [38, 39, 83, 84, 634, 639], "mw": [38, 39, 83, 84, 131, 634, 635, 636, 637, 638, 639, 640, 642], "vw": [38, 39, 83, 84, 131, 634, 635, 636, 637, 638, 639, 640, 642], "beta1": [38, 39, 83, 84, 131, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 975, 976, 977], "beta2": [38, 39, 83, 84, 131, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 975, 976, 977], "999": [38, 39, 79, 80, 83, 84, 131, 322, 551, 552, 554, 555, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 975, 976, 977], "epsilon": [38, 39, 46, 47, 50, 51, 83, 84, 91, 92, 95, 96, 117, 121, 124, 131, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 684, 716, 718, 725, 727, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 854, 855, 856, 857, 858, 973, 974, 975, 976, 977], "1e": [38, 39, 46, 47, 50, 51, 83, 84, 91, 92, 95, 96, 117, 121, 124, 131, 132, 560, 596, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 684, 735, 737, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 854, 855, 856, 857, 858, 940, 975, 976, 977, 978, 980], "07": [38, 39, 46, 47, 83, 84, 91, 92, 131, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 653, 654, 655, 656, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 975, 976, 977], "dcdw": [38, 39, 83, 84, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660], "adam_step_delta": [38, 39, 83, 84, 634, 635, 636, 637, 638, 639], "639": [38, 39, 634, 635, 636, 638], "11": [38, 39, 70, 71, 79, 80, 97, 98, 114, 121, 322, 336, 338, 339, 340, 361, 364, 517, 520, 560, 578, 588, 635, 636, 684, 696, 698, 722, 724, 756, 767, 770, 772, 790, 793, 798, 801, 859, 861, 862, 863, 871, 875, 876, 877, 896, 897, 900], "32": [38, 39, 130, 155, 157, 322, 381, 384, 635, 636, 671, 674, 677, 684, 722, 724, 871, 875, 896, 897, 900], "63": [38, 39, 89, 90, 322, 533, 536, 635, 636, 684, 685, 687, 688, 689, 722, 724, 896, 897, 900], "00121": [38, 39, 635, 636], "0102": [38, 39, 635, 636], "0397": [38, 39, 635, 636], "gradient": [39, 68, 69, 84, 112, 121, 130, 131, 143, 144, 275, 316, 635, 638, 640, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 666, 667, 668, 669, 670, 832, 833, 834, 835, 940, 975, 976, 977, 978, 979, 980], "arraywithimag": [40, 129], "arraywithlay": 42, "linear_algebra": [44, 45, 89, 90, 112, 129, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755], "arraywithlinearalgebra": 44, "choleski": [44, 45, 89, 90, 684, 689], "upper": [44, 45, 68, 69, 89, 90, 170, 185, 186, 228, 232, 684, 685, 686, 687, 688, 689, 728, 730, 859, 865, 867], "625": [44, 45, 684, 685, 686, 688], "25": [44, 45, 121, 322, 533, 536, 537, 540, 684, 685, 686, 688, 696, 698, 705, 707, 756, 762, 765, 854, 855, 858, 896, 897, 900], "cross": [44, 45, 70, 71, 684, 756, 757, 760, 762, 765, 767, 770, 940], "axi": [44, 45, 46, 47, 48, 49, 58, 59, 60, 61, 62, 63, 68, 69, 73, 74, 91, 92, 93, 94, 103, 104, 105, 106, 107, 108, 114, 117, 121, 122, 124, 125, 127, 129, 132, 143, 155, 160, 170, 199, 200, 201, 202, 203, 204, 275, 276, 279, 284, 297, 298, 299, 300, 301, 302, 303, 304, 316, 560, 578, 579, 588, 632, 684, 690, 691, 692, 696, 698, 747, 748, 749, 750, 751, 752, 756, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 800, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 859, 870, 871, 872, 873, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939], "det": [44, 45, 70, 71, 684], "diagon": [44, 45, 70, 71, 170, 185, 186, 223, 227, 228, 232, 684, 744, 746], "offset": [44, 45, 50, 51, 95, 96, 684, 696, 697, 698, 744, 745, 746, 854, 855, 856, 857, 858], "axis1": [44, 45, 48, 49, 93, 94, 684, 696, 697, 698, 772, 820, 821, 822, 823], "axis2": [44, 45, 684, 696, 697, 698], "eigh": [44, 45, 70, 71, 684], "namedtupl": [44, 45, 684, 699, 700, 701, 728, 729, 730, 735, 737, 876, 877, 878, 882], "eigvalsh": [44, 45, 70, 71, 684], "inv": [44, 45, 70, 71, 129, 684, 940], "matmul": [44, 45, 89, 90, 112, 118, 127, 684, 735, 737, 940], "matrix_norm": [44, 45, 68, 69, 684], "ord": [44, 45, 68, 69, 684, 712, 713, 714, 750, 751, 752], "fro": [44, 45, 684, 712, 713, 714], "keepdim": [44, 45, 60, 61, 62, 63, 68, 69, 105, 106, 107, 108, 560, 632, 684, 712, 713, 714, 750, 751, 752, 871, 872, 873, 896, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939], "matrix_rank": [44, 45, 70, 71, 684], "rtol": [44, 45, 684, 716, 717, 718, 725, 726, 727], "matrix_transpos": [44, 45, 70, 71, 129, 684], "outer": [44, 45, 70, 71, 684, 832, 833, 834, 835], "pinv": [44, 45, 70, 71, 684, 940], "qr": [44, 45, 70, 71, 684], "reduc": [44, 45, 68, 69, 129, 275, 316, 560, 583, 684, 728, 729, 730, 871, 872, 873, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "solv": [44, 45, 70, 71, 128, 143, 684], "svd": [44, 45, 70, 71, 684, 940], "full_matric": [44, 45, 684, 735, 736, 737], "svdval": [44, 45, 70, 71, 684], "tensordot": [44, 45, 70, 71, 684], "ax": [44, 45, 48, 49, 68, 69, 93, 94, 112, 114, 122, 129, 275, 316, 560, 578, 684, 712, 714, 732, 734, 741, 742, 743, 750, 752, 772, 782, 785, 790, 793, 794, 795, 796, 797, 806, 809, 812, 815, 820, 823, 828, 831, 871, 872, 873, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "trace": [44, 45, 68, 69, 70, 71, 127, 144, 560, 606, 607, 609, 684], "vecdot": [44, 45, 70, 71, 684], "vector_norm": [44, 45, 68, 69, 684], "vector_to_skew_symmetric_matrix": [44, 45, 70, 71, 684, 940], "arraywithloss": 46, "binary_cross_entropi": [46, 47, 91, 92, 756], "pred": [46, 47, 91, 92, 117, 121, 124, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771], "cross_entropi": [46, 47, 91, 92, 117, 121, 124, 756, 767, 770], "sparse_cross_entropi": [46, 47, 91, 92, 756], "loss": [47, 92, 112, 117, 130, 131, 132, 757, 760, 762, 765, 767, 770, 940], "arraywithmanipul": 48, "clip": [48, 49, 68, 69, 93, 94, 117, 121, 124, 127, 130, 132, 322, 490, 491, 560, 572, 573, 575, 772, 777, 940], "x_min": [48, 49, 68, 69, 93, 94, 127, 132, 772, 773, 774, 775, 776, 777], "x_max": [48, 49, 68, 69, 93, 94, 127, 132, 772, 773, 774, 775, 776, 777], "roll": [48, 49, 93, 94, 121, 125, 772, 773, 774, 810], "concat": [48, 49, 68, 69, 93, 94, 275, 301, 302, 303, 304, 316, 560, 587, 772, 940], "constant_pad": [48, 49, 93, 94, 772], "pad_width": [48, 49, 93, 94, 772, 782, 783, 784, 785, 828, 829, 830, 831], "expand_dim": [48, 49, 93, 94, 127, 130, 772, 940], "flip": [48, 49, 93, 94, 129, 130, 132, 322, 365, 368, 772, 798, 801, 940], "permute_dim": [48, 49, 93, 94, 772], "reshap": [48, 49, 68, 69, 93, 94, 124, 127, 129, 132, 772, 940], "shift": [48, 49, 93, 94, 114, 125, 322, 369, 372, 377, 380, 772, 806, 807, 808, 809, 810], "squeez": [48, 49, 93, 94, 772, 940], "stack": [48, 49, 68, 69, 93, 94, 127, 170, 223, 227, 228, 232, 684, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 715, 716, 718, 719, 721, 725, 727, 728, 730, 735, 737, 738, 740, 744, 746, 772, 836, 837, 846, 847, 940, 959, 968], "swapax": [48, 49, 93, 94, 772], "axis0": [48, 49, 93, 94, 772, 820, 821, 822, 823], "tile": [48, 49, 93, 94, 772, 940], "rep": [48, 49, 93, 94, 772, 824, 825, 826, 827], "zero_pad": [48, 49, 93, 94, 772, 940], "arraywithnorm": 50, "layer_norm": [50, 51, 95, 96, 854], "normalized_idx": [50, 51, 95, 96, 854, 855, 856, 857, 858], "05": [50, 51, 95, 96, 275, 634, 635, 638, 854, 855, 856, 857, 858], "scale": [50, 51, 95, 96, 121, 275, 314, 315, 634, 657, 659, 671, 679, 682, 683, 854, 855, 856, 857, 858, 959, 967, 970, 975, 978], "new_std": [50, 51, 95, 96, 854, 855, 856, 857, 858, 973, 974], "norm": [51, 68, 69, 96, 112, 560, 572, 573, 575, 684, 712, 714, 750, 752, 855, 858, 940, 974, 975, 977], "arraywithrandom": [52, 129], "random": [53, 68, 69, 98, 112, 123, 132, 143, 860, 861, 862, 864, 865, 867, 869, 870, 940], "arraywithsearch": 54, "arraywithset": 56, "unique_count": [56, 57, 101, 102, 876, 879], "uc": [56, 57, 878, 880], "count": [56, 57, 114, 130, 275, 310, 684, 747, 749, 772, 790, 793, 876, 877, 878, 880, 882, 929, 930, 933, 935, 938], "arraywithsort": 58, "argsort": [58, 59, 103, 104, 885], "descend": [58, 59, 103, 104, 684, 735, 737, 738, 740, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895], "sort": [59, 68, 69, 70, 71, 72, 104, 112, 684, 699, 701, 735, 737, 738, 740, 886, 889], "arraywithstatist": 60, "einsum": [60, 61, 105, 106, 896], "equat": [60, 61, 105, 106, 684, 732, 734, 896, 897, 898, 899, 900], "max": [60, 61, 68, 69, 105, 106, 241, 258, 261, 322, 490, 560, 572, 573, 575, 583, 616, 617, 684, 716, 718, 725, 727, 896, 975, 977], "min": [60, 61, 68, 69, 105, 106, 241, 258, 261, 322, 491, 560, 583, 616, 617, 624, 684, 728, 730, 735, 737, 738, 740, 750, 752, 896], "prod": [60, 61, 68, 69, 105, 106, 114, 122, 560, 583, 896], "std": [60, 61, 105, 106, 114, 859, 864, 876, 877, 896], "sum": [60, 61, 68, 69, 105, 106, 117, 121, 122, 124, 127, 275, 301, 302, 303, 304, 316, 322, 336, 339, 470, 473, 560, 579, 583, 616, 617, 671, 683, 684, 735, 737, 744, 746, 750, 752, 896, 897, 900, 917, 920], "var": [60, 61, 105, 106, 109, 110, 114, 127, 832, 833, 834, 896], "statist": [61, 106, 109, 110, 112, 122, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928], "arraywithutil": 62, "util": [63, 108, 112, 123, 275, 305, 930, 933, 935, 938], "add_ivy_array_instance_method": 64, "cl": [64, 65, 109, 110], "to_ignor": [64, 65, 109, 110, 836, 847], "loop": [64, 65, 109, 110, 118, 144, 832, 833, 834, 835], "_wrap_funct": [64, 65, 109, 110, 117, 119], "toi": [64, 65, 109, 110], "arrayexampl": [64, 65], "hasattr": [64, 65, 109, 110, 129], "relu": [64, 65, 70, 71, 130, 131, 155, 156, 157, 940], "softmax": [64, 65, 70, 71, 155, 671, 682, 683, 940], "containerwithactiv": [66, 70, 71], "dict_in": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "queue": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 130, 275, 282, 283, 560, 615, 620], "queue_load_s": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "container_combine_method": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "list_join": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "queue_timeout": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 560], "print_limit": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "key_length_limit": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "print_ind": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "print_line_spac": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "ivyh": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "default_key_color": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "keyword_color_dict": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "rebuild_child_contain": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "types_to_iteratively_nest": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "alphabetical_kei": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "containerbas": [66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 121], "key_chain": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 161, 163, 165, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 247, 249, 251, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 492, 494, 496, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 561, 563, 565, 573, 574, 589, 591, 593, 640, 641, 643, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 685, 687, 689, 708, 710, 757, 759, 761, 762, 764, 766, 767, 769, 771, 773, 775, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 836, 849, 855, 857, 861, 863, 865, 866, 868, 878, 879, 881, 886, 888, 890, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 930, 932, 934, 935, 937, 939], "to_appli": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 161, 163, 165, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 247, 249, 251, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 492, 494, 496, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 561, 563, 565, 573, 574, 589, 591, 593, 640, 641, 643, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 685, 687, 689, 708, 710, 757, 759, 761, 762, 764, 766, 767, 769, 771, 773, 775, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 836, 849, 855, 857, 865, 866, 868, 878, 879, 881, 886, 888, 890, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 930, 932, 934, 935, 937, 939], "prune_unappli": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 161, 163, 165, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 247, 249, 251, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 492, 494, 496, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 561, 563, 565, 573, 574, 589, 591, 593, 640, 641, 643, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 685, 687, 689, 708, 710, 757, 759, 761, 762, 764, 766, 767, 769, 771, 773, 775, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 836, 849, 855, 857, 865, 866, 868, 878, 879, 881, 886, 888, 890, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 930, 932, 934, 935, 937, 939], "map_sequ": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 161, 163, 165, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 247, 249, 251, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 357, 359, 365, 367, 385, 387, 389, 391, 393, 395, 397, 399, 401, 406, 408, 410, 412, 414, 416, 418, 420, 434, 436, 438, 440, 442, 444, 454, 456, 458, 460, 462, 464, 466, 468, 478, 480, 492, 494, 496, 497, 499, 505, 507, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 561, 563, 565, 573, 574, 589, 591, 593, 640, 641, 643, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 685, 687, 689, 757, 759, 761, 762, 764, 766, 767, 769, 771, 773, 775, 777, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 820, 822, 824, 826, 828, 830, 855, 857, 865, 866, 868, 878, 879, 881, 886, 888, 890, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 930, 932, 934, 935, 937, 939], "static_softplu": [66, 67, 161], "__getitem__": [68, 69, 121], "queri": [68, 69, 121, 122, 129, 275, 305, 315, 671, 682, 683, 959, 970], "slice": [68, 69, 560, 588, 589, 592, 836, 845], "chain": [68, 69, 120, 121, 131, 132, 144, 832, 833, 834, 836, 849, 981, 982], "element": [68, 69, 113, 127, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 193, 194, 197, 223, 227, 228, 232, 275, 295, 299, 303, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 568, 569, 572, 573, 575, 578, 579, 586, 600, 629, 630, 671, 679, 684, 690, 692, 699, 701, 708, 711, 728, 730, 735, 737, 772, 773, 776, 790, 793, 798, 801, 806, 809, 811, 812, 815, 859, 860, 871, 874, 875, 876, 877, 878, 882, 883, 884, 885, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 959, 967], "represent": [68, 69, 70, 71, 72, 143, 169, 241, 242, 243, 258, 261, 275, 288, 289, 322, 323, 326, 336, 339, 361, 364, 373, 376, 381, 384, 486, 489, 492, 495, 560, 566, 623, 628], "dictionari": [68, 69, 70, 71, 72, 130, 144, 275, 315], "sequenc": [68, 69, 70, 71, 72, 114, 122, 143, 167, 168, 275, 282, 283, 560, 569, 610, 772, 811, 816, 819, 859, 861, 862, 896, 901, 904, 929, 930, 933, 935, 938, 959, 968, 973, 974, 981, 982], "multiprocess": [68, 69, 70, 71, 72, 130, 144, 275, 282, 560], "asynchron": [68, 69, 70, 71, 72], "size": [68, 69, 70, 71, 72, 129, 130, 170, 199, 200, 202, 203, 275, 314, 315, 316, 560, 616, 622, 671, 683, 684, 696, 698, 712, 714, 722, 724, 728, 730, 735, 737, 747, 749, 772, 786, 789, 806, 809, 811, 812, 815, 859, 860, 864, 865, 867, 871, 872, 874, 929, 930, 933, 935, 938, 959, 960, 961], "dimens": [68, 69, 70, 71, 72, 114, 127, 130, 155, 160, 170, 223, 227, 228, 232, 275, 303, 560, 582, 583, 584, 587, 597, 613, 632, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 685, 688, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746, 747, 749, 750, 752, 756, 762, 765, 767, 770, 772, 778, 781, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 832, 833, 834, 835, 859, 870, 871, 872, 873, 874, 876, 877, 878, 882, 884, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970], "arriv": [68, 69, 70, 71, 72], "timeout": [68, 69, 70, 71, 72, 275, 282, 283, 560, 615, 620], "maximum": [68, 69, 70, 71, 72, 114, 127, 130, 132, 275, 296, 300, 304, 316, 322, 560, 572, 573, 575, 587, 634, 653, 655, 772, 773, 776, 836, 848, 871, 872, 896, 901, 904, 909, 912, 940], "length": [68, 69, 70, 71, 72, 130, 170, 171, 172, 205, 208, 684, 735, 737, 738, 740, 772, 802, 805], "whitespac": [68, 69, 70, 71, 72], "indent": [68, 69, 70, 71, 72, 130], "extra": [68, 69, 70, 71, 72, 114, 119, 120, 127, 634, 644], "newlin": [68, 69, 70, 71, 72, 113], "handl": [68, 69, 70, 71, 72, 111, 116, 117, 119, 121, 122, 123, 124, 125, 131, 144, 167, 168, 275, 288, 289, 290, 291, 292, 306, 310, 311, 318, 321, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 975, 976, 977, 978, 979, 980], "result": [68, 69, 70, 71, 72, 112, 113, 114, 116, 120, 121, 122, 124, 125, 130, 144, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 246, 266, 275, 282, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 579, 582, 583, 584, 586, 588, 589, 592, 600, 613, 616, 617, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 836, 849, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 875, 876, 877, 884, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938, 940], "color": [68, 69, 70, 71, 72, 984, 985], "map": [68, 69, 70, 71, 72, 116, 117, 121, 125, 130, 143, 144, 275, 282, 836, 843, 844, 848, 849, 959, 970], "termcolor": [68, 69, 70, 71, 72], "rebuild": [68, 69, 70, 71, 72], "constructor": [68, 69, 70, 71, 72, 122, 123, 129, 560, 567, 981, 982], "param": [68, 69, 70, 71, 72, 81, 82, 127, 132, 560, 566, 588, 589, 592, 593], "alphabet": [68, 69, 70, 71, 72], "preserv": [68, 69, 70, 71, 72, 132, 144, 634, 666, 772, 790, 793], "__setitem__": [68, 69, 120, 121, 129], "val": [68, 69, 124, 129, 560, 602, 603, 604, 618, 619], "after": [68, 69, 114, 121, 122, 126, 241, 270, 322, 533, 536, 634, 640, 642, 644, 645, 647, 653, 655, 657, 659, 661, 663, 854, 855, 858, 975, 976, 977, 978, 979, 980], "all_fals": [68, 69], "assert_is_bool": [68, 69], "entri": [68, 69, 170, 199, 200, 202, 203, 772, 811, 836, 849], "boolean": [68, 69, 121, 170, 193, 241, 244, 262, 274, 275, 307, 319, 322, 361, 364, 365, 368, 373, 376, 381, 384, 474, 477, 478, 481, 482, 485, 486, 489, 560, 561, 564, 568, 569, 599, 600, 601, 605, 606, 607, 608, 609, 626, 633, 634, 649, 651, 832, 833, 834, 836, 846, 896, 909, 912], "evalu": [68, 69, 121, 322, 410, 413, 414, 417, 454, 457, 458, 461, 462, 465, 466, 469, 497, 500, 521, 524, 537, 540, 836, 837, 846, 847, 929, 930, 933, 935, 938], "assert": [68, 69, 129, 130, 560, 570], "prune": [68, 69, 836, 849, 850, 851], "all_key_chain": [68, 69], "include_empti": [68, 69], "all_tru": [68, 69, 121, 130], "arrays_as_list": [68, 69], "intermedi": [68, 69], "as_arrai": [68, 69, 560, 597, 622], "as_bool": [68, 69], "as_on": [68, 69], "ones": [68, 69, 70, 71, 116, 127, 129, 130, 170, 185, 186, 218, 221, 322, 385, 388, 560, 613, 940], "fill": [68, 69, 170, 179, 193, 194, 197, 215, 216, 218, 221, 233, 235, 236, 240, 859, 861, 862], "as_random_uniform": [68, 69], "low": [68, 69, 97, 98, 127, 859, 861, 862, 863, 865, 866, 867, 868], "uniform": [68, 69, 131, 859, 860, 861, 862, 865, 867, 953, 954, 955, 957], "boundari": [68, 69, 859, 865, 867], "interv": [68, 69, 127, 132, 170, 171, 172, 199, 200, 202, 203, 684, 747, 749, 772, 773, 776, 816, 819, 859, 861, 862, 865, 867, 929, 930, 933, 935, 938], "as_vari": [68, 69], "as_zero": [68, 69], "assert_contains_sub_contain": [68, 69], "sub_cont": [68, 69], "except": [68, 69, 113, 120, 124, 129, 144, 241, 246, 560, 570, 581, 604, 631, 684, 725, 727, 772, 778, 781, 816, 819, 871, 874, 929, 930, 933, 935, 938], "diff": [68, 69, 121, 130], "screen": [68, 69, 130], "assert_contains_sub_structur": [68, 69], "check_shap": [68, 69], "assert_ident": [68, 69], "check_typ": [68, 69], "same_arrai": [68, 69, 130], "arrays_equ": [68, 69, 70, 71, 560], "datatyp": [68, 69, 170, 174, 177, 210, 213, 241, 252, 263, 264, 265], "assert_identical_structur": [68, 69], "at_key_chain": [68, 69], "ignore_key_error": [68, 69], "ignore_non": [68, 69], "at_kei": [68, 69], "ignor": [68, 69, 114, 144, 170, 205, 208, 836, 847, 975, 979], "substr": [68, 69], "clip_min": [68, 69], "clip_max": [68, 69], "minimum": [68, 69, 127, 132, 275, 322, 323, 326, 560, 595, 596, 618, 619, 624, 625, 772, 773, 776, 871, 873, 896, 901, 904, 909, 912, 940], "config": [68, 69, 130, 836, 849], "duplic": [68, 69, 113, 118, 119, 129, 131], "compar": [68, 69, 116, 130, 560, 561, 564, 568, 569, 876, 877, 878, 882, 884, 885, 886, 889, 891, 894], "container_rightmost": [68, 69], "common_key_chain": [68, 69, 121], "properti": [68, 69, 114, 116, 117, 121, 129, 130, 131, 275, 284, 971, 972, 975, 976, 977, 978, 980], "contains_sub_contain": [68, 69], "match": [68, 69, 121, 241, 244, 322, 513, 516, 560, 610], "contains_sub_structur": [68, 69], "create_if_abs": [68, 69], "inplac": [68, 69, 83, 84, 111, 114, 119, 120, 125, 129, 131, 560, 570, 601, 604, 605, 626, 634, 640, 641, 642, 643, 645, 646, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 951, 952, 975, 976, 977, 978, 979, 980], "cutoff_at_depth": [68, 69], "depth_cutoff": [68, 69], "cutoff_at_height": [68, 69], "height_cutoff": [68, 69], "deep_copi": [68, 69, 130], "intern": [68, 69, 113, 120, 121, 123, 124, 275, 634, 669, 836, 837, 846, 847, 953, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 981, 982], "belong": [68, 69, 131], "dev_clon": [68, 69, 275], "dev_dist": [68, 69, 275], "along": [68, 69, 112, 124, 170, 199, 200, 202, 203, 275, 297, 298, 299, 300, 301, 302, 303, 304, 316, 560, 578, 579, 588, 632, 684, 712, 714, 744, 746, 747, 749, 750, 752, 756, 762, 765, 767, 770, 772, 778, 781, 790, 793, 798, 801, 806, 809, 811, 816, 819, 824, 827, 832, 833, 834, 835, 859, 870, 871, 872, 873, 885, 886, 889, 891, 894, 896, 897, 900, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "dev_str": [68, 69], "diff_kei": [68, 69], "detect_key_diff": [68, 69], "detect_value_diff": [68, 69], "detect_shape_diff": [68, 69], "treat": [68, 69, 128, 132, 167, 168], "detect": [68, 69, 125, 130, 131, 836, 837, 847], "container0": [68, 69], "einops_rearrang": [68, 69, 560], "axes_length": [68, 69, 560, 582, 583, 584], "rearrang": [68, 69, 560, 582, 584], "einops_reduc": [68, 69, 560], "reduct": [68, 69, 122, 129, 560, 583, 616, 617, 929, 930, 933, 935, 938, 940], "One": [68, 69, 122, 127, 129, 130, 560, 583, 772, 802, 805, 859, 861, 862], "callabl": [68, 69, 121, 127, 145, 146, 147, 148, 149, 150, 151, 152, 153, 167, 168, 241, 259, 260, 275, 316, 560, 566, 571, 581, 583, 832, 833, 834, 835, 836, 842, 846, 847, 848], "einops_repeat": [68, 69, 560], "find_sub_contain": [68, 69], "sub_cont_to_find": [68, 69], "exsit": [68, 69], "find_sub_structur": [68, 69], "sub_struc_to_find": [68, 69], "flatten_key_chain": [68, 69, 130, 971, 972], "__": [68, 69, 114, 130], "above_height": [68, 69, 130], "below_depth": [68, 69, 130], "format_key_chain": [68, 69], "format_fn": [68, 69], "string": [68, 69, 118, 122, 123, 127, 130, 241, 242, 243, 256, 262, 274, 275, 288, 289, 290, 291, 305, 311, 317, 318, 321, 560, 580], "from_disk_as_hdf5": [68, 69, 130], "h5_obj_or_filepath": [68, 69], "slice_obj": [68, 69], "load": [68, 69, 144], "disk": [68, 69, 130], "h5py": [68, 69], "hdf5": [68, 69, 130, 971, 972], "h5": [68, 69], "from_disk_as_json": [68, 69, 130], "json_filepath": [68, 69], "json": [68, 69, 130], "dure": [68, 69, 117, 121, 122, 123, 124, 144, 167, 168, 275, 317, 560, 631, 634, 635, 638, 640, 642, 653, 655, 684, 708, 711, 832, 833, 834, 835, 896, 917, 920, 925, 928, 971, 972, 975, 976, 977, 979], "from_disk_as_pickl": [68, 69, 130], "pickle_filepath": [68, 69], "pickl": [68, 69, 121, 130], "from_flat_list": [68, 69], "flat_list": [68, 69], "hierarchi": [68, 69, 130], "flat": [68, 69, 560, 616, 772, 798, 801], "popul": [68, 69, 122, 123, 127, 859, 860, 896, 917, 920, 925, 928], "from_numpi": [68, 69, 130], "gather": [68, 69, 560, 589, 592], "h5_file_s": [68, 69], "batch": [68, 69, 117, 121, 130, 275, 314, 315, 560, 587, 671, 680, 684, 750, 752, 832, 833, 834, 835, 854, 855, 858, 973, 974], "handle_inplac": [68, 69], "prime": [68, 69], "overwritten": [68, 69, 118, 120], "has_kei": [68, 69], "query_kei": [68, 69], "somewher": [68, 69], "has_key_chain": [68, 69], "has_nan": [68, 69, 560], "include_inf": [68, 69, 560, 599, 633], "leafwis": [68, 69], "nan": [68, 69, 112, 113, 169, 241, 244, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 434, 437, 442, 445, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 560, 599, 633, 671, 683, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "well": [68, 69, 116, 124, 131, 132, 143, 560, 599, 684, 732, 734], "inf": [68, 69, 169, 560, 599, 633, 684, 750, 752], "wise": [68, 69, 127, 132, 155, 156, 157, 158, 159, 160, 161, 164, 166, 322, 323, 326, 328, 331, 336, 339, 341, 344, 349, 352, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 402, 405, 406, 409, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 501, 504, 509, 512, 513, 516, 541, 545, 560, 586, 772, 773, 776], "identical_array_shap": [68, 69], "exclus": [68, 69, 83, 84, 117, 121, 132, 170, 171, 172, 560, 578, 606, 607, 609, 634, 649, 650, 651, 652, 859, 861, 862], "identical_config": [68, 69], "identical_structur": [68, 69], "if_exist": [68, 69], "inplace_upd": [68, 69, 124, 560, 951, 952], "key_chains_contain": [68, 69], "sub_str": [68, 69], "join": [68, 69, 772, 778, 781, 816, 819, 940], "list_stack": [68, 69, 130], "dim": [68, 69, 122, 560, 613, 959, 970], "func": [68, 69, 121, 167, 168, 275, 316, 560, 571, 634, 644, 836, 849], "map_cont": [68, 69], "include_self": [68, 69], "possibi": [68, 69], "matrix": [68, 69, 170, 205, 208, 223, 227, 228, 232, 560, 561, 564, 572, 671, 680, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 715, 716, 718, 719, 721, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746, 753, 755, 959, 969], "integ": [68, 69, 121, 122, 129, 170, 171, 172, 193, 241, 261, 264, 266, 322, 323, 326, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 418, 421, 422, 425, 486, 489, 509, 512, 513, 516, 517, 520, 556, 559, 684, 715, 747, 749, 750, 752, 772, 811, 859, 861, 862, 869, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "flatten": [68, 69, 560, 587, 684, 722, 724, 750, 752, 772, 798, 801, 806, 809, 871, 872, 873, 876, 877, 878, 882, 884], "broadcast": [68, 69, 112, 113, 114, 121, 122, 155, 156, 157, 158, 159, 160, 161, 164, 166, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 244, 245, 246, 275, 317, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 491, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 578, 582, 583, 584, 586, 589, 592, 600, 613, 616, 617, 634, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 695, 696, 698, 702, 704, 705, 707, 708, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 757, 760, 762, 765, 767, 770, 772, 773, 776, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 875, 876, 884, 885, 891, 894, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "max_depth": [68, 69, 275, 278, 281, 286, 296, 300, 304, 560, 598, 836, 848], "multi_map": [68, 69, 121], "map_nest": [68, 69, 79, 80, 89, 90, 93, 94, 353, 355, 361, 363, 369, 371, 373, 375, 377, 379, 381, 383, 402, 404, 422, 424, 426, 428, 430, 432, 446, 448, 450, 452, 470, 472, 474, 476, 482, 484, 486, 488, 501, 503, 509, 511, 513, 515, 708, 710, 778, 780, 816, 818], "leftmost": [68, 69, 836, 849], "multi_map_in_static_method": [68, 69, 121], "fn_name": [68, 69], "num_arrai": [68, 69], "overwrite_at_key_chain": [68, 69], "overwrit": [68, 69, 124, 127, 275, 316], "target_dict": [68, 69], "return_dict": [68, 69], "prune_empti": [68, 69], "keep_non": [68, 69], "empti": [68, 69, 70, 71, 120, 122, 123, 170, 171, 172, 896, 917, 920, 921, 924, 929, 930, 933, 935, 938], "prune_key_chain": [68, 69], "key1": [68, 69, 131], "key2": [68, 69], "key3": [68, 69], "prune_key_from_key_chain": [68, 69], "prune_kei": [68, 69], "prune_keys_from_key_chain": [68, 69], "remove_key_length_limit": [68, 69], "remove_print_limit": [68, 69], "reshape_lik": [68, 69], "leading_shap": [68, 69], "return_cont": [68, 69], "restructur": [68, 69], "keep_orig": [68, 69], "transpos": [68, 69, 129, 132, 275, 303, 671, 673, 675, 677, 684, 719, 721, 725, 727, 940, 959, 961, 963, 965], "restructure_key_chain": [68, 69], "keychain_map": [68, 69], "set_at_key_chain": [68, 69], "set_at_kei": [68, 69], "set_framework": [68, 69, 127, 129, 130, 132], "set_ivy_backend": [68, 69], "ivy_backend": [68, 69], "attribut": [68, 69, 113, 121, 122, 128, 129, 130, 131, 241, 258, 259, 260, 261, 275, 312], "show_sub_contain": [68, 69], "sub_cont_or_keychain": [68, 69], "shuffl": [68, 69, 859, 940], "seed_valu": [68, 69, 859, 869], "seed": [68, 69, 70, 71, 859, 940], "shuffle_h5_fil": [68, 69], "dataset": [68, 69, 130, 142, 940], "size_ordered_arrai": [68, 69], "keychain": [68, 69], "smallest": [68, 69, 241, 258, 261, 322, 385, 388], "largest": [68, 69, 143, 241, 258, 261, 684, 735, 737], "slice_kei": [68, 69], "key_slic": [68, 69], "all_depth": [68, 69], "slice_via_kei": [68, 69], "sort_by_kei": [68, 69], "num_or_size_split": [68, 69, 127, 772, 811], "with_remaind": [68, 69, 772, 811], "constitu": [68, 69, 132], "dimension": [68, 69, 170, 171, 172, 185, 186, 205, 208, 684, 690, 692, 693, 695, 708, 711, 716, 718, 722, 724, 725, 727, 747, 749, 750, 752, 772, 811, 871, 872, 873, 874, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "evenli": [68, 69, 170, 171, 172, 199, 200, 202, 203, 772, 811], "store": [68, 69, 113, 118, 120, 121, 127, 129, 130, 131, 560, 587, 634, 669, 684, 744, 746, 772, 811, 971, 972], "stop_gradi": [68, 69, 70, 71, 83, 84, 131, 275, 316, 634, 640, 641, 642, 643, 645, 646, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 832, 833, 834, 835, 940, 975, 976, 977, 978, 979, 980], "preserve_typ": [68, 69, 634, 666], "stop": [68, 69, 73, 74, 127, 144, 170, 171, 172, 173, 199, 200, 201, 202, 203, 204, 275, 287, 316, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 666, 832, 833, 834, 835, 975, 976, 977, 978, 979, 980], "structural_diff": [68, 69], "to_devic": [68, 69, 275, 291], "cuda": [68, 69, 127, 130, 144, 170, 199, 200, 202, 203, 275, 282, 288, 313, 560, 588, 589, 592, 613, 616, 617, 859, 860, 861, 862, 865, 867, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982], "target": [68, 69, 111, 126, 130, 131, 132, 275, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 940], "to_dict": [68, 69], "to_disk_as_hdf5": [68, 69, 130], "starting_index": [68, 69], "max_batch_s": [68, 69], "w": [68, 69, 83, 84, 127, 130, 131, 560, 569, 634, 635, 638, 640, 642, 643, 645, 647, 648, 653, 655, 656, 657, 659, 660, 661, 663, 664, 671, 672, 673, 674, 675, 676, 677, 678], "later": [68, 69, 560, 571], "to_disk_as_json": [68, 69, 130], "to_disk_as_pickl": [68, 69, 130], "to_flat_list": [68, 69], "to_iter": [68, 69, 121], "leaf_keys_onli": [68, 69], "to_iterator_kei": [68, 69], "to_iterator_valu": [68, 69], "to_json": [68, 69], "to_list": [68, 69, 560, 940], "to_multi_dev": [68, 69], "multidevcontain": [68, 69, 70], "distributedarrai": [68, 69], "to_numpi": [68, 69, 130, 560, 940], "update_backend": [68, 69], "to_raw": [68, 69], "raw": [68, 69, 113], "trim_kei": [68, 69], "max_length": [68, 69], "try_kc": [68, 69], "tri": [68, 69], "self": [68, 69, 120, 121, 127, 129, 130, 131, 132, 161, 162, 163, 174, 175, 176, 180, 181, 182, 188, 189, 190, 194, 195, 196, 205, 206, 207, 210, 211, 212, 218, 219, 220, 223, 225, 226, 228, 230, 231, 236, 238, 239, 247, 248, 249, 275, 323, 324, 325, 328, 329, 330, 332, 333, 334, 336, 337, 338, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 492, 493, 494, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 543, 544, 546, 548, 549, 551, 553, 554, 556, 557, 558, 561, 562, 563, 573, 574, 589, 590, 591, 635, 636, 637, 640, 641, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 685, 686, 687, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 708, 709, 710, 712, 713, 716, 717, 719, 720, 722, 723, 725, 726, 728, 729, 732, 733, 735, 736, 738, 739, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 757, 758, 759, 762, 763, 764, 767, 768, 769, 773, 774, 775, 778, 779, 780, 782, 783, 784, 786, 787, 788, 790, 791, 792, 794, 795, 796, 798, 799, 800, 802, 803, 804, 806, 807, 808, 812, 813, 814, 816, 817, 818, 820, 821, 822, 824, 825, 826, 828, 829, 830, 855, 856, 857, 865, 866, 878, 880, 881, 886, 887, 888, 891, 892, 893, 897, 898, 899, 901, 902, 903, 905, 906, 907, 909, 910, 911, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 926, 927, 930, 931, 932, 935, 936, 937, 940, 975, 979], "arbitrari": [68, 69, 116, 117, 121, 124, 125, 131, 144, 170, 205, 208, 241, 245, 266, 275, 301, 302, 304], "concatten": [68, 69, 275, 301, 302, 303, 304, 316], "unstack": [68, 69, 127, 130, 560, 940], "dim_siz": [68, 69, 275], "update_config": [68, 69], "global_norm": [68, 69, 81, 82, 573, 574], "vector": [68, 69, 143, 170, 205, 208, 560, 573, 575, 671, 680, 684, 690, 692, 699, 701, 708, 711, 722, 724, 735, 737, 738, 740, 747, 749, 750, 752, 753, 755, 959, 969], "with_default_key_color": [68, 69], "with_entries_as_list": [68, 69], "with_ivy_backend": [68, 69], "with_key_length_limit": [68, 69, 130], "with_print_ind": [68, 69, 130], "with_print_limit": [68, 69, 130], "with_print_line_spac": [68, 69], "containerwithcr": [70, 71, 73], "containerwithdatatyp": [70, 71, 75], "containerwithdevic": [70, 71, 77], "containerwithelementwis": [70, 71, 79, 121], "containerwithgener": [70, 71, 81], "containerwithgradi": [70, 71, 83], "containerwithimag": [70, 71, 85], "containerwithlay": [70, 71, 87], "containerwithlinearalgebra": [70, 71, 89], "containerwithloss": [70, 71, 91], "containerwithnorm": [70, 71, 95], "containerwithrandom": [70, 71, 97], "containerwithsearch": [70, 71, 99], "containerwithset": [70, 71, 101], "containerwithsort": [70, 71, 103], "containerwithstatist": [70, 71, 105], "containerwithutil": [70, 71, 107], "__add__": [70, 71, 113, 114, 120, 121, 125, 129], "__radd__": [70, 71, 113, 114], "arang": [70, 71, 122, 170, 199, 200, 202, 203, 896, 897, 900, 940], "arg_info": [70, 71, 560], "arg_nam": [70, 71, 560], "argmax": [70, 71, 871, 940], "argmin": [70, 71, 871, 940], "array_equ": [70, 71, 560], "as_ivy_dev": [70, 71, 129, 275], "as_ivy_dtyp": [70, 71, 241], "as_native_dev": [70, 71, 275], "as_native_dtyp": [70, 71, 241], "assert_supports_inplac": [70, 71, 560], "astyp": [70, 71, 122, 124, 241], "broadcast_arrai": [70, 71, 241], "broadcast_to": [70, 71, 122, 241], "cache_fn": [70, 71, 117, 560], "clear_mem_on_dev": [70, 71, 275], "clip_matrix_norm": [70, 71, 560], "closest_valid_dtyp": [70, 71, 241], "container_typ": [70, 71, 560], "conv1d": [70, 71, 671, 959], "conv1d_transpos": [70, 71, 671], "conv2d": [70, 71, 671, 940, 959], "conv2d_transpos": [70, 71, 671], "conv3d": [70, 71, 671, 959], "conv3d_transpos": [70, 71, 671], "copy_arrai": [70, 71, 560], "cumprod": [70, 71, 132, 560], "cumsum": [70, 71, 560, 940], "current_backend_str": [70, 71, 560], "default_devic": [70, 71, 123, 127, 275, 310, 313, 320], "default_dtyp": [70, 71, 117, 122, 241], "default_float_dtyp": [70, 71, 122, 241], "default_int_dtyp": [70, 71, 122, 241], "depthwise_conv2d": [70, 71, 671, 940], "dev_clone_arrai": [70, 71, 275], "dev_clone_it": [70, 71, 275], "dev_clone_nest": [70, 71, 275], "dev_dist_arrai": [70, 71, 275], "dev_dist_it": [70, 71, 275], "dev_dist_nest": [70, 71, 275], "dev_unifi": [70, 71, 275], "dev_unify_arrai": [70, 71, 275], "dev_unify_it": [70, 71, 275], "dev_unify_nest": [70, 71, 275], "dev_util": [70, 71, 123, 275], "dropout": [70, 71, 130, 671, 959, 970], "dtype_bit": [70, 71, 241], "execute_with_gradi": [70, 71, 121, 130, 131, 132, 144, 634, 940], "ey": [70, 71, 132, 170, 671, 674, 678], "finfo": [70, 71, 241], "floormod": [70, 71, 560, 940], "fourier_encod": [70, 71, 560], "function_supported_dtyp": [70, 71, 241], "function_unsupported_dtyp": [70, 71, 241], "gelu": [70, 71, 155, 948], "get_all_arrays_in_memori": [70, 71, 560], "get_all_ivy_arrays_on_dev": [70, 71, 123, 275], "get_min_bas": [70, 71, 560], "get_min_denomin": [70, 71, 560], "get_num_dim": [70, 71, 560, 940], "get_referrers_recurs": [70, 71, 560], "gpu_is_avail": [70, 71, 275], "handle_nest": [70, 71, 117, 121, 145], "handle_out_argu": [70, 71, 119, 122, 123, 124, 125, 145], "iinfo": [70, 71, 241], "indices_wher": [70, 71, 560, 940], "infer_devic": [70, 71, 122, 123, 125, 145], "infer_dtyp": [70, 71, 122, 123, 125, 145], "inplace_arrays_support": [70, 71, 560], "inplace_decr": [70, 71, 560], "inplace_incr": [70, 71, 560], "inplace_variables_support": [70, 71, 560], "inputs_to_native_arrai": [70, 71, 120, 145], "invalid_dtyp": [70, 71, 241], "is_float_dtyp": [70, 71, 241], "is_int_dtyp": [70, 71, 241, 560, 630], "is_ivy_contain": [70, 71, 560], "leaky_relu": [70, 71, 155, 940], "linear": [70, 71, 113, 127, 130, 131, 132, 155, 156, 157, 158, 560, 587, 671, 679, 732, 734, 940, 959, 960, 961, 962, 963, 964, 965, 966], "linspac": [70, 71, 127, 170, 171, 172, 940], "logspac": [70, 71, 127, 170], "lstm_updat": [70, 71, 127, 671], "match_kwarg": [70, 71, 560], "matrix_pow": [70, 71, 684], "multi_head_attent": [70, 71, 121, 124, 671], "multinomi": [70, 71, 859], "nonzero": [70, 71, 322, 336, 339, 492, 495, 871], "num_arrays_in_memori": [70, 71, 560], "num_cpu_cor": [70, 71, 123, 275], "num_gpu": [70, 71, 116, 123, 275], "num_ivy_arrays_on_dev": [70, 71, 275], "one_hot": [70, 71, 132, 560, 940], "outputs_to_ivy_arrai": [70, 71, 120, 122, 123, 125, 145], "percent_used_mem_on_dev": [70, 71, 275], "print_all_arrays_in_memori": [70, 71, 560], "print_all_ivy_arrays_on_dev": [70, 71, 275], "promote_typ": [70, 71, 241], "randint": [70, 71, 97, 98, 859, 863, 940], "random_norm": [70, 71, 671, 674, 677, 678, 684, 735, 737, 859, 876, 877], "result_typ": [70, 71, 122, 241], "scaled_dot_product_attent": [70, 71, 671], "scatter_flat": [70, 71, 560], "scatter_nd": [70, 71, 129, 560, 940], "set_default_devic": [70, 71, 123, 275, 320], "set_default_dtyp": [70, 71, 117, 122, 241], "set_default_float_dtyp": [70, 71, 122, 241], "set_default_int_dtyp": [70, 71, 122, 241], "set_min_bas": [70, 71, 560], "set_min_denomin": [70, 71, 560], "set_queue_timeout": [70, 71, 560], "set_split_factor": [70, 71, 275], "set_tmp_dir": [70, 71, 560], "set_with_grad": [70, 71, 634], "shape_to_tupl": [70, 71, 122, 560], "sigmoid": [70, 71, 127, 130, 131, 155, 940], "slogdet": [70, 71, 684], "split_factor": [70, 71, 275, 282], "split_func_cal": [70, 71, 275], "stable_divid": [70, 71, 117, 560], "stable_pow": [70, 71, 560], "static_aco": [70, 71], "static_acosh": [70, 71], "static_arg_info": [70, 71], "static_arg_nam": [70, 71], "static_argmax": [70, 71], "static_argmin": [70, 71], "static_arrai": [70, 71], "static_array_equ": [70, 71], "static_arrays_equ": [70, 71], "static_as_ivy_dev": [70, 71], "static_as_ivy_dtyp": [70, 71], "static_as_native_dev": [70, 71], "static_as_native_dtyp": [70, 71], "static_asin": [70, 71], "static_asinh": [70, 71], "static_assert_supports_inplac": [70, 71], "static_astyp": [70, 71], "static_atan": [70, 71], "static_atan2": [70, 71], "static_atanh": [70, 71], "static_bitwise_and": [70, 71], "static_bitwise_invert": [70, 71], "static_bitwise_left_shift": [70, 71], "static_bitwise_or": [70, 71], "static_bitwise_right_shift": [70, 71], "static_bitwise_xor": [70, 71], "static_broadcast_arrai": [70, 71], "static_broadcast_to": [70, 71], "static_cache_fn": [70, 71], "static_ceil": [70, 71], "static_clear_mem_on_dev": [70, 71], "static_clip_matrix_norm": [70, 71], "static_clip_vector_norm": [70, 71], "static_closest_valid_dtyp": [70, 71], "static_concat": [70, 71], "static_constant_pad": [70, 71], "static_container_typ": [70, 71], "static_conv1d": [70, 71], "static_conv1d_transpos": [70, 71], "static_conv2d": [70, 71], "static_conv2d_transpos": [70, 71], "static_conv3d": [70, 71], "static_conv3d_transpos": [70, 71], "static_copy_arrai": [70, 71], "static_co": [70, 71], "static_cosh": [70, 71], "static_cross": [70, 71], "static_cumprod": [70, 71], "static_cumsum": [70, 71], "static_current_backend": [70, 71], "static_current_backend_str": [70, 71], "static_default": [70, 71], "static_default_devic": [70, 71], "static_default_dtyp": [70, 71], "static_default_float_dtyp": [70, 71], "static_default_int_dtyp": [70, 71], "static_depthwise_conv2d": [70, 71], "static_det": [70, 71], "static_dev": [70, 71], "static_dev_clon": [70, 71], "static_dev_clone_arrai": [70, 71], "static_dev_clone_it": [70, 71], "static_dev_clone_nest": [70, 71], "static_dev_dist": [70, 71], "static_dev_dist_arrai": [70, 71], "static_dev_dist_it": [70, 71], "static_dev_dist_nest": [70, 71], "static_dev_unifi": [70, 71], "static_dev_unify_arrai": [70, 71], "static_dev_unify_it": [70, 71], "static_dev_unify_nest": [70, 71], "static_dev_util": [70, 71], "static_diagon": [70, 71], "static_dropout": [70, 71], "static_dtyp": [70, 71], "static_dtype_bit": [70, 71], "static_eigh": [70, 71], "static_eigvalsh": [70, 71], "static_einops_rearrang": [70, 71], "static_einops_reduc": [70, 71], "static_einops_repeat": [70, 71], "static_einsum": [70, 71], "static_empti": [70, 71], "static_equ": [70, 71], "static_erf": [70, 71], "static_execute_with_gradi": [70, 71], "static_exist": [70, 71], "static_exp": [70, 71], "static_expand_dim": [70, 71], "static_expm1": [70, 71], "static_finfo": [70, 71], "static_flip": [70, 71], "static_floor": [70, 71], "static_floor_divid": [70, 71], "static_floormod": [70, 71], "static_fourier_encod": [70, 71], "static_ful": [70, 71], "static_function_supported_dtyp": [70, 71], "static_function_unsupported_dtyp": [70, 71], "static_gath": [70, 71], "static_gelu": [70, 71], "static_get_all_arrays_in_memori": [70, 71], "static_get_all_ivy_arrays_on_dev": [70, 71], "static_get_min_bas": [70, 71], "static_get_min_denomin": [70, 71], "static_get_num_dim": [70, 71], "static_get_referrers_recurs": [70, 71], "static_gpu_is_avail": [70, 71], "static_great": [70, 71], "static_greater_equ": [70, 71], "static_handle_nest": [70, 71], "static_handle_out_argu": [70, 71], "static_has_nan": [70, 71], "static_iinfo": [70, 71], "static_indices_wher": [70, 71], "static_infer_devic": [70, 71], "static_infer_dtyp": [70, 71], "static_inplace_arrays_support": [70, 71], "static_inplace_decr": [70, 71], "static_inplace_incr": [70, 71], "static_inplace_upd": [70, 71], "static_inplace_variables_support": [70, 71], "static_inputs_to_native_arrai": [70, 71], "static_inv": [70, 71], "static_invalid_dtyp": [70, 71], "static_is_arrai": [70, 71], "static_is_float_dtyp": [70, 71], "static_is_int_dtyp": [70, 71], "static_is_ivy_arrai": [70, 71], "static_is_ivy_contain": [70, 71], "static_is_native_arrai": [70, 71], "static_isfinit": [70, 71], "static_isinf": [70, 71], "static_isnan": [70, 71], "static_layer_norm": [70, 71], "static_leaky_relu": [70, 71], "static_less": [70, 71], "static_less_equ": [70, 71], "static_linear": [70, 71], "static_log": [70, 71], "static_log10": [70, 71], "static_log1p": [70, 71], "static_log2": [70, 71], "static_logaddexp": [70, 71], "static_logical_and": [70, 71], "static_logical_not": [70, 71], "static_logical_or": [70, 71], "static_logical_xor": [70, 71], "static_lstm_upd": [70, 71], "static_match_kwarg": [70, 71], "static_matmul": [70, 71], "static_matrix_norm": [70, 71], "static_matrix_pow": [70, 71], "static_matrix_rank": [70, 71], "static_matrix_transpos": [70, 71], "static_max": [70, 71], "static_maximum": [70, 71], "static_mean": [70, 71], "static_min": [70, 71], "static_minimum": [70, 71], "static_multi_head_attent": [70, 71], "static_multinomi": [70, 71], "static_multiprocess": [70, 71], "static_neg": [70, 71], "static_nonzero": [70, 71], "static_not_equ": [70, 71], "static_num_arrays_in_memori": [70, 71], "static_num_cpu_cor": [70, 71], "static_num_gpu": [70, 71], "static_num_ivy_arrays_on_dev": [70, 71], "static_one_hot": [70, 71], "static_out": [70, 71], "static_outputs_to_ivy_arrai": [70, 71], "static_percent_used_mem_on_dev": [70, 71], "static_permute_dim": [70, 71], "static_pinv": [70, 71], "static_posit": [70, 71], "static_pow": [70, 71], "static_print_all_arrays_in_memori": [70, 71], "static_print_all_ivy_arrays_on_dev": [70, 71], "static_prod": [70, 71], "static_promote_typ": [70, 71], "static_qr": [70, 71], "static_queue_timeout": [70, 71], "static_random_norm": [70, 71], "static_relu": [70, 71], "static_remaind": [70, 71], "static_repeat": [70, 71], "static_reshap": [70, 71], "static_result_typ": [70, 71], "static_round": [70, 71], "static_scaled_dot_product_attent": [70, 71], "static_scatter_flat": [70, 71], "static_scatter_nd": [70, 71], "static_se": [70, 71], "static_set_default_devic": [70, 71], "static_set_default_dtyp": [70, 71], "static_set_default_float_dtyp": [70, 71], "static_set_default_int_dtyp": [70, 71], "static_set_min_bas": [70, 71], "static_set_min_denomin": [70, 71], "static_set_queue_timeout": [70, 71], "static_set_split_factor": [70, 71], "static_set_tmp_dir": [70, 71], "static_set_with_grad": [70, 71], "static_shap": [70, 71], "static_shape_to_tupl": [70, 71], "static_shuffl": [70, 71], "static_sigmoid": [70, 71], "static_sign": [70, 71], "static_sin": [70, 71], "static_sinh": [70, 71], "static_slogdet": [70, 71], "static_softmax": [70, 71], "static_solv": [70, 71], "static_split": [70, 71], "static_split_factor": [70, 71], "static_split_func_cal": [70, 71], "static_sqrt": [70, 71], "static_squar": [70, 71], "static_squeez": [70, 71], "static_stable_divid": [70, 71], "static_stable_pow": [70, 71], "static_stack": [70, 71], "static_std": [70, 71], "static_stop_gradi": [70, 71], "static_sum": [70, 71], "static_supports_inplac": [70, 71], "static_svd": [70, 71], "static_svdv": [70, 71], "static_swapax": [70, 71], "static_tensordot": [70, 71], "static_til": [70, 71], "static_tmp_dir": [70, 71], "static_to_devic": [70, 71], "static_to_list": [70, 71], "static_to_native_arrays_and_back": [70, 71], "static_to_numpi": [70, 71], "static_to_scalar": [70, 71], "static_total_mem_on_dev": [70, 71], "static_tpu_is_avail": [70, 71], "static_trac": [70, 71], "static_trunc": [70, 71], "static_try_else_non": [70, 71], "static_type_promote_arrai": [70, 71], "static_unique_al": [70, 71], "static_unique_invers": [70, 71], "static_unique_valu": [70, 71], "static_unset_default_devic": [70, 71], "static_unset_default_dtyp": [70, 71], "static_unset_default_float_dtyp": [70, 71], "static_unset_default_int_dtyp": [70, 71], "static_unset_with_grad": [70, 71], "static_unstack": [70, 71], "static_used_mem_on_dev": [70, 71], "static_valid_dtyp": [70, 71], "static_value_is_nan": [70, 71], "static_var": [70, 71], "static_vari": [70, 71], "static_variable_data": [70, 71], "static_vecdot": [70, 71], "static_vector_norm": [70, 71], "static_vector_to_skew_symmetric_matrix": [70, 71], "static_wher": [70, 71], "static_with_grad": [70, 71], "static_zero_pad": [70, 71], "supports_inplac": [70, 71, 560], "tmp_dir": [70, 71, 560], "to_native_arrays_and_back": [70, 71, 119, 125, 145], "to_scalar": [70, 71, 560], "total_mem_on_dev": [70, 71, 123, 275], "tpu_is_avail": [70, 71, 275], "try_else_non": [70, 71, 560], "type_promote_arrai": [70, 71, 241], "unique_al": [70, 71, 876], "unique_invers": [70, 71, 876], "unique_valu": [70, 71, 876], "unset_default_devic": [70, 71, 275], "unset_default_dtyp": [70, 71, 241], "unset_default_float_dtyp": [70, 71, 241], "unset_default_int_dtyp": [70, 71, 241], "unset_with_grad": [70, 71, 634], "used_mem_on_dev": [70, 71, 275], "valid_dtyp": [70, 71, 241], "value_is_nan": [70, 71, 560], "variable_data": [70, 71, 634], "with_grad": [70, 71, 634, 665], "at_dev": [70, 72, 275, 285, 286], "static_arang": [73, 74, 171], "static_asarrai": [73, 74, 174], "static_empty_lik": [73, 74, 180], "static_ey": [73, 74, 185], "n_row": [73, 74, 170, 185, 186, 187], "n_col": [73, 74, 170, 185, 186, 187], "static_from_dlpack": [73, 74, 188], "static_full_lik": [73, 74, 194], "static_linspac": [73, 74, 199], "num": [73, 74, 127, 170, 199, 200, 201, 202, 203, 204], "endpoint": [73, 74, 170, 199, 200, 201, 202, 204], "static_logspac": [73, 74, 202], "static_meshgrid": [73, 74, 205], "static_native_arrai": [73, 74, 210], "static_on": [73, 74, 215], "static_ones_lik": [73, 74, 218], "static_tril": [73, 74, 223], "static_triu": [73, 74, 228], "static_zero": [73, 74, 233], "static_zeros_lik": [73, 74, 236], "int32": [75, 76, 122, 241, 247, 249, 250, 251, 259, 560, 629, 772, 786, 789, 896, 913, 916, 921, 924], "int64": [75, 76, 122, 241, 247, 249, 250, 251, 259, 322, 377, 380, 871, 872, 873, 896, 913, 916, 921, 924], "static_can_cast": [75, 76, 247], "from_": [75, 76, 241, 247, 250, 251], "static_ab": [79, 80, 323], "static_add": [79, 80, 113, 114, 121, 336], "static_divid": [79, 80, 121, 397], "static_multipli": [79, 80, 121, 492], "static_subtract": [79, 80, 121, 541], "static_tan": [79, 80, 114, 121, 546], "143": [79, 80, 114, 322, 546, 547, 549, 550], "38": [79, 80, 114, 322, 546, 547, 549, 550], "static_tanh": [79, 80, 551], "76": [79, 80, 322, 393, 396, 551, 552, 634, 635, 638, 684, 741, 743, 896, 897, 900], "96": [79, 80, 322, 546, 550, 551, 552, 634, 635, 638, 684, 722, 724, 896, 897, 900], "995": [79, 80, 322, 551, 552, 554, 555], "9999": [79, 80, 551, 552], "static_all_equ": [81, 82, 561, 563], "clip_vector_norm": [81, 82, 560], "max_norm": [81, 82, 560, 572, 573, 574, 575], "static_gather_nd": [81, 82, 589], "adam_upd": [83, 84, 131, 634], "lr": [83, 84, 130, 131, 634, 640, 641, 642, 643, 645, 646, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 975, 976, 977, 978, 979, 980], "mw_tm1": [83, 84, 634, 640, 641, 642, 643, 653, 654, 655, 656], "vw_tm1": [83, 84, 634, 640, 641, 642, 643, 653, 654, 655, 656], "gradient_descent_upd": [83, 84, 634, 832, 833, 834, 835, 940], "is_vari": [83, 84, 124, 634], "lamb_upd": [83, 84, 634], "max_trust_ratio": [83, 84, 634, 653, 654, 655, 656, 975, 977], "decay_lambda": [83, 84, 634, 653, 654, 655, 656, 657, 658, 659, 660, 975, 977, 978], "lars_upd": [83, 84, 634], "optimizer_upd": [83, 84, 634], "effective_grad": [83, 84, 634, 661, 662, 663, 664], "static_adam_step": [83, 84, 635], "87": [83, 84, 97, 98, 634, 635, 638, 639, 861, 863], "976": [83, 84, 322, 551, 555, 634, 635, 638, 639], "static_adam_upd": [83, 84, 640], "static_gradient_descent_upd": [83, 84, 645], "static_is_vari": [83, 84, 649], "static_lamb_upd": [83, 84, 653], "static_lars_upd": [83, 84, 657], "static_optimizer_upd": [83, 84, 661], "73": [89, 90, 322, 533, 536, 684, 685, 687, 688, 689, 854, 855, 858], "577": [89, 90, 684, 685, 687, 688, 689], "41": [89, 90, 129, 322, 381, 384, 533, 536, 684, 685, 687, 688, 689, 896, 921, 924], "707": [89, 90, 684, 685, 687, 688, 689], "static_choleski": [89, 90, 685], "static_rol": [89, 90, 93, 94, 114, 121, 685, 689, 773, 777, 806], "static_binary_cross_entropi": [91, 92, 757], "static_cross_entropi": [91, 92, 762], "static_sparse_cross_entropi": [91, 92, 767], "static_clip": [93, 94, 773], "random_uniform": [97, 98, 123, 131, 859, 940], "static_randint": [97, 98, 861], "20": [97, 98, 129, 322, 381, 384, 410, 413, 517, 520, 533, 536, 684, 696, 698, 722, 724, 741, 743, 859, 861, 862, 863, 871, 874, 875, 896, 897, 900], "40": [97, 98, 322, 393, 396, 533, 536, 684, 722, 724, 861, 863, 896, 897, 900], "62": [97, 98, 861, 863], "52": [97, 98, 634, 635, 638, 684, 722, 724, 861, 863, 876, 877, 896, 897, 900], "95": [97, 98, 634, 635, 638, 861, 863], "37": [97, 98, 322, 546, 550, 854, 855, 858, 861, 863], "42": [97, 98, 132, 155, 161, 164, 634, 635, 638, 684, 722, 724, 859, 861, 863, 869, 896, 897, 900], "13": [97, 98, 114, 121, 322, 361, 364, 381, 384, 393, 396, 533, 536, 560, 578, 634, 635, 638, 671, 683, 684, 696, 698, 722, 724, 854, 855, 858, 861, 863, 871, 875, 876, 877, 896, 897, 900], "static_random_uniform": [97, 98, 865], "static_unique_count": [101, 102, 878], "classivi": [101, 102, 772, 811, 876, 878, 879, 881, 882], "static_argsort": [103, 104, 886], "static_sort": [103, 104, 891], "static_al": [107, 108, 930], "static_ani": [107, 108, 935], "add_ivy_container_instance_method": 109, "containerexampl": [109, 110], "who": [111, 126, 144], "mainli": [111, 128, 130], "under": [111, 113, 114, 115, 116, 117, 121, 126, 127, 130, 132], "hood": [111, 114, 116, 117, 121, 126, 127, 130, 132], "weed": [111, 126], "behind": [111, 126, 128, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663], "tour": 111, "primari": [111, 116, 118, 124, 144], "composit": [111, 116, 118, 120, 121, 124, 127, 131, 132, 144], "nestabl": [111, 113, 114, 116, 124, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 385, 388, 418, 421, 501, 504, 533, 536, 537, 540, 546, 550, 560, 588, 671, 674, 683, 684, 685, 688, 696, 698, 772, 806, 809, 854, 855, 858, 876, 878, 882, 896, 901, 904, 929, 930, 933], "dynam": [111, 122, 123, 124, 127, 167, 168], "runtim": [111, 116, 275], "h": [111, 121, 671, 674, 675, 676, 677, 678], "j": [111, 560, 568, 569, 684, 744, 746, 896, 897, 900], "borrow": 111, "n": [111, 170, 205, 208, 223, 227, 228, 232, 560, 569, 671, 679, 684, 696, 698, 708, 711, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 735, 737, 738, 740, 744, 746, 747, 749, 750, 752, 753, 755, 772, 782, 785, 786, 789, 794, 797, 816, 819, 828, 831, 859, 864, 865, 867, 871, 874, 896, 905, 908, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "taken": [112, 132, 684, 696, 698], "constant": [112, 117, 131, 132, 144, 275, 282, 283, 772, 782, 785, 836, 842, 854, 855, 858, 953, 956, 958, 971, 972, 973, 974], "compil": [112, 121, 126, 128, 144, 940, 971, 972, 975, 976, 977, 978, 979, 980], "meta": [112, 120, 833, 834, 835], "overlap": 112, "sever": [112, 144, 684, 705, 707], "judgement": 112, "locat": [112, 116, 118, 123, 859, 860], "some_namespac": 112, "some_backend": 112, "another_backend": 112, "break": [112, 125, 129, 144, 940], "anyth": [112, 940], "refactor": 112, "ongo": 112, "subfold": [112, 116], "via": [112, 121, 122, 123, 124, 127, 129, 130, 143, 836, 837, 846, 847], "file_nam": 112, "my_func": [112, 114], "int": [112, 114, 117, 121, 122, 123, 124, 125, 132, 155, 160, 167, 168, 170, 179, 185, 186, 193, 194, 197, 199, 200, 202, 203, 215, 216, 223, 227, 228, 232, 233, 235, 241, 246, 255, 257, 258, 261, 264, 275, 294, 297, 298, 299, 300, 308, 309, 310, 316, 317, 322, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 560, 566, 578, 579, 582, 583, 584, 587, 588, 597, 613, 616, 617, 622, 623, 632, 634, 635, 638, 640, 642, 653, 655, 671, 672, 674, 676, 677, 678, 684, 690, 692, 696, 698, 741, 743, 744, 746, 747, 749, 750, 752, 756, 762, 765, 767, 770, 772, 778, 781, 782, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 848, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 869, 871, 872, 873, 885, 886, 889, 891, 894, 896, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "nativedtyp": [112, 122, 123, 125, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 193, 194, 197, 210, 213, 215, 216, 218, 221, 233, 235, 236, 240, 241, 243, 244, 254, 255, 256, 265, 896, 921, 924], "nativedevic": [112, 122, 123, 125, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 193, 194, 197, 199, 200, 202, 203, 210, 213, 215, 216, 218, 221, 233, 235, 236, 240, 275, 289, 290, 291, 305, 311, 313, 315, 317, 318, 321, 560, 613, 859, 860, 861, 862, 864, 865, 867], "my": 112, "numer": [112, 131, 170, 205, 208, 241, 244, 322, 323, 326, 336, 339, 385, 388, 397, 400, 414, 417, 418, 421, 422, 425, 434, 437, 438, 441, 442, 445, 446, 449, 478, 481, 482, 485, 492, 495, 497, 500, 501, 504, 509, 512, 513, 516, 521, 524, 537, 540, 541, 545, 556, 559, 560, 595, 596, 618, 619, 624, 625, 684, 690, 692, 708, 711, 722, 724, 735, 737, 741, 743, 744, 746, 747, 749, 859, 870, 871, 872, 873, 896, 901, 904, 913, 916, 921, 924, 953], "cooler": 112, "produc": [112, 275, 282, 283, 671, 683], "something_cool": 112, "category_nam": [113, 117, 122, 123, 125], "contrast": [113, 125], "backend_nam": [113, 117, 118, 119, 122, 123, 125], "account": 113, "instanti": 113, "firstli": [113, 114, 117, 120, 122, 124, 130], "templat": [113, 940], "spec": [113, 114], "api_specif": [113, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 684, 696, 698, 772, 786, 789, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904], "array_api": 113, "preview": 113, "render": 113, "incorrectli": 113, "onlin": [113, 940], "approxim": [113, 155, 156, 322, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 353, 356, 389, 392, 393, 396, 410, 413, 414, 417, 454, 457, 458, 461, 462, 465, 466, 469, 509, 512, 525, 528, 529, 532, 546, 550, 551, 555, 684, 716, 718, 725, 727], "tangent": [113, 155, 166, 322, 349, 352, 353, 356, 357, 360, 546, 550, 551, 555], "domain": [113, 322, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 353, 356, 389, 392, 393, 396, 410, 413, 414, 417, 454, 457, 458, 461, 466, 469, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555], "infin": [113, 169, 241, 244, 322, 323, 326, 332, 335, 336, 339, 345, 348, 349, 352, 353, 356, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 422, 425, 434, 437, 438, 441, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 684, 750, 752, 896, 901, 904, 909, 912, 929, 930, 933, 935, 938], "codomain": [113, 322, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 353, 356, 389, 392, 393, 396, 410, 413, 414, 417, 454, 457, 458, 461, 466, 469, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555], "x_i": [113, 322, 323, 326, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 365, 368, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 434, 437, 438, 441, 442, 445, 454, 457, 458, 461, 466, 469, 478, 481, 497, 500, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 546, 550, 551, 555, 556, 559, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928], "assum": [113, 118, 122, 129, 130, 144, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 389, 392, 393, 396, 418, 421, 501, 504, 517, 520, 525, 528, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933], "express": [113, 127, 132, 322, 328, 331, 341, 344, 349, 352, 353, 356, 389, 392, 525, 528, 546, 550], "radian": [113, 322, 328, 331, 341, 344, 349, 352, 353, 356, 389, 392, 525, 528, 546, 550], "float": [113, 117, 121, 122, 124, 125, 129, 131, 155, 157, 169, 170, 171, 172, 179, 185, 186, 193, 194, 197, 199, 200, 202, 203, 215, 216, 233, 235, 241, 244, 254, 258, 263, 266, 275, 305, 311, 315, 318, 321, 322, 323, 326, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 402, 405, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 541, 545, 546, 550, 551, 555, 556, 559, 560, 572, 573, 575, 587, 595, 596, 618, 619, 624, 625, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 674, 678, 683, 684, 685, 688, 693, 695, 699, 701, 702, 704, 705, 707, 716, 718, 725, 727, 728, 730, 732, 734, 735, 737, 750, 752, 756, 757, 760, 762, 765, 767, 770, 832, 833, 834, 835, 854, 855, 858, 859, 864, 865, 867, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928], "operand": [113, 322, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 353, 356, 381, 384, 385, 388, 389, 392, 393, 396, 410, 413, 414, 417, 418, 421, 454, 457, 458, 461, 466, 469, 470, 473, 492, 495, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 556, 559, 896, 897, 900, 901, 904, 909, 912, 921, 924], "whose": [113, 170, 223, 227, 228, 232, 322, 332, 335, 345, 348, 357, 360, 389, 392, 393, 396, 509, 512, 525, 528, 529, 532, 546, 550, 551, 555, 560, 571, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746, 772, 790, 793, 806, 809, 876, 877, 878, 882, 896, 897, 900], "ref": [113, 322, 377, 380, 446, 449, 492, 495, 501, 504, 513, 516, 541, 545, 772, 816, 819], "promot": [113, 117, 122, 241, 244, 247, 250, 265, 266, 270, 322, 328, 331, 332, 335, 336, 339, 341, 344, 345, 348, 349, 352, 357, 360, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 389, 392, 393, 396, 397, 400, 410, 413, 414, 417, 454, 457, 458, 461, 466, 469, 470, 473, 486, 489, 492, 495, 509, 512, 513, 516, 525, 528, 529, 532, 533, 536, 546, 550, 551, 555, 684, 685, 688, 690, 692, 705, 707, 708, 711, 716, 718, 722, 724, 725, 727, 732, 734, 747, 749, 750, 752, 772, 816, 819, 896, 905, 908], "But": [113, 121, 132], "needless": 113, "info": [113, 940], "subset": [113, 116, 125, 127], "extend": [113, 116, 118, 125], "renam": 113, "conform": [113, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 414, 417, 418, 421, 450, 453, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 684, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933], "org": [113, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 634, 635, 638, 640, 642, 684, 696, 698, 772, 786, 789, 806, 809, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904], "elementwise_funct": [113, 322, 323, 326, 341, 344, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 533, 536, 537, 540, 684, 696, 698, 772, 806, 809, 876, 877, 885, 886, 889, 896, 901, 904], "descript": [113, 121, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 750, 752, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904, 929, 930, 933], "simplic": [113, 131, 143, 170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240, 241, 247, 250, 322, 323, 326, 336, 339, 341, 344, 361, 364, 381, 384, 385, 388, 393, 396, 418, 421, 501, 504, 517, 520, 533, 536, 537, 540, 546, 550, 551, 555, 560, 588, 671, 674, 683, 684, 685, 688, 693, 695, 696, 698, 772, 786, 789, 790, 793, 806, 809, 854, 855, 858, 876, 877, 878, 882, 885, 886, 889, 896, 901, 904], "judgment": 113, "beyond": [113, 772, 806, 809], "text": 113, "func_nam": [113, 114, 117], "pure": [113, 129, 132, 144], "themselv": [113, 117, 121, 122, 123, 131, 836, 837], "operator_nam": 113, "succinct": 113, "contstructor": 113, "though": [113, 117, 122, 130, 144], "forward": [113, 132, 143, 144, 971, 972, 975, 979], "_forward": [113, 127, 130, 131, 940], "former": 113, "trainabl": [113, 128, 130, 131, 634, 649, 651, 951, 952, 971, 972, 981], "explicitli": [113, 117, 118, 120, 121, 124, 127, 144, 684, 699, 701, 959, 968, 970, 971, 972], "latter": [113, 118], "implicit": [113, 121, 127], "docst": 113, "eight": 114, "static_": 114, "op_nam": 114, "__r": 114, "four": [114, 117, 122, 125, 130], "__sub__": [114, 120, 121, 125, 129], "__mul__": [114, 120, 121, 125, 129], "__truediv__": [114, 120, 121], "respect": [114, 120, 121, 122, 125, 170, 205, 208, 322, 323, 326, 336, 339, 353, 356, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 402, 405, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 492, 495, 501, 504, 513, 516, 541, 545, 634, 635, 638, 640, 642, 644, 645, 647, 653, 655, 657, 659, 661, 663, 684, 728, 730, 832, 833, 834, 835], "recap": [114, 121, 131], "independ": [114, 115, 119, 121, 127, 132, 684, 690, 692, 732, 734, 859, 860], "combinatorili": 114, "variat": [114, 116], "grid": [114, 116, 143, 170, 205, 208], "vari": [114, 116, 121, 129, 876, 877, 878, 882, 884], "simplest": 114, "small": [114, 117, 127, 131, 144, 322, 492, 495, 684, 716, 718, 725, 727, 854, 855, 858, 973, 974], "unus": [114, 124, 167, 168], "18": [114, 121, 322, 381, 384, 684, 696, 698, 722, 724, 896, 897, 900], "excess": [114, 118, 129], "showcas": [114, 143], "demonstr": [114, 129], "replic": [114, 122], "meant": 114, "imaginari": 114, "some_flag": 114, "another_flag": 114, "54": [114, 322, 389, 392, 393, 396, 533, 536, 671, 683, 684, 722, 724, 859, 864, 896, 897, 900], "jointli": 114, "three": [114, 121, 126, 170, 205, 208, 940], "x0": [114, 560, 568], "procedur": 114, "sens": [114, 121, 129], "5574077": 114, "1850398": 114, "5463025": 114, "8422884": 114, "91601413": 114, "9647598": 114, "3738229": 114, "1597457": 114, "0963247": 114, "9955841": 114, "3278579": 114, "multi": [114, 121, 126, 144, 671, 682, 684, 690, 692, 940, 946, 959, 970], "seper": [114, 560, 587], "pars": [114, 144], "satisfi": [114, 684, 753, 755], "far": [114, 123, 128, 129, 836, 837, 847], "asid": [114, 143], "irrelev": [114, 122], "increasingli": 114, "complex": [114, 130, 131, 132, 144, 684, 699, 701, 735, 737], "rule": [114, 116, 117, 120, 121, 122, 241, 244, 247, 250, 266, 322, 357, 360, 377, 380, 397, 400, 492, 495, 513, 516, 684, 685, 688, 690, 692, 722, 724, 732, 734], "14254655": 114, "1578213": 114, "380515": 114, "17": [114, 121, 155, 157, 684, 696, 698, 859, 864], "trivial": 114, "By": [114, 117, 121, 124, 131, 132, 560, 578, 579, 684, 747, 749, 772, 798, 801, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "non": [114, 121, 122, 127, 167, 168, 241, 244, 262, 322, 478, 481, 482, 485, 671, 674, 684, 693, 695, 716, 718, 735, 737, 741, 743, 747, 749, 750, 752, 871, 872, 873, 874, 896, 901, 904, 905, 908, 909, 912, 913, 916, 925, 928, 929, 930, 933, 935, 938, 971, 972, 975, 979], "dictat": [114, 120, 124, 125], "exlud": 114, "unit": [115, 116, 144, 155, 156, 157, 158, 275], "thoroughli": [115, 116], "ci": [115, 116, 144], "failur": 115, "On": [116, 128, 132], "fixtur": 116, "consum": [116, 121, 125, 275], "300": [116, 322, 517, 520], "hit": [116, 127], "permit": [116, 120, 125], "action": 116, "eleg": 116, "intellig": 116, "sampl": [116, 671, 679, 859, 860, 864, 865, 867, 896, 917, 920, 925, 928, 959, 967], "rang": [116, 130, 131, 132, 170, 171, 172, 199, 200, 202, 203, 876, 877, 896, 913, 916, 921, 924, 940], "cach": [116, 117, 275, 290, 560, 571], "unexplor": 116, "known": 116, "repeatedli": [116, 121, 836, 845], "upload": 116, "artifact": 116, "parametr": 116, "strategi": 116, "statement": [116, 144], "plai": [116, 132], "helper": [116, 130], "verifi": [116, 122, 123, 129, 940, 946], "truth": [116, 322, 402, 405, 426, 429, 430, 433, 446, 449, 450, 453, 501, 504], "opt": [116, 118, 124, 129], "defer": [116, 117, 120, 121, 122, 123, 124], "suffic": [116, 119], "catch": [116, 560, 581], "systemat": 116, "safeguard": 116, "inabl": 116, "fact": [116, 130], "categor": [117, 123], "mutual": [117, 121], "constitut": [117, 127, 896, 917, 920, 925, 928], "venn": 117, "diagram": 117, "light": [117, 144], "wherea": [117, 120, 122, 123, 125, 132], "hand": [117, 144], "log_pr": [117, 121, 124], "array_arg": 117, "typic": 117, "whatsoev": [117, 121], "commonli": [117, 896, 917, 920, 925, 928], "outsid": [117, 123, 127, 129, 132, 772, 773, 776, 816, 819], "denomin": [117, 144, 560, 586, 596, 619, 624, 625, 854, 855, 858, 973, 974], "divis": [117, 322, 377, 380, 397, 400, 422, 425, 513, 516, 560, 586, 596, 619, 624, 625, 634, 635, 638, 640, 642, 653, 655, 975, 976, 977], "deal": [117, 144], "concurr": [117, 121], "weight": [117, 121, 131, 132, 634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 671, 680, 681, 683, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972, 975, 977, 978], "modif": 117, "decor": [117, 119, 121, 122, 123, 124], "group": [117, 121], "briefli": [117, 130], "cast": [117, 122, 241, 244, 247, 250, 772, 778, 781, 896, 913, 916, 921, 924, 940], "get_all_arrays_on_dev": 117, "nested_map": [117, 836], "index_nest": [117, 836], "implicit_backend": 118, "unless": [118, 123, 124, 144, 322, 492, 495, 560, 613], "__dict__": [118, 127, 129], "ivy_original_dict": [118, 127], "unmodifi": [118, 122], "moment": [118, 144, 634, 635, 638, 640, 642, 653, 655, 975, 976, 977], "fallback": 118, "freedom": [118, 896, 917, 920, 925, 928], "recommend": [118, 322, 478, 481, 482, 485, 513, 516, 896, 905, 908], "achiev": [119, 130, 132], "wrapper": [119, 120, 121, 122, 124, 125, 129], "logic": [119, 120, 122, 123, 129, 275, 308, 322, 474, 477, 478, 481, 482, 485, 929, 930, 933, 935, 938, 940], "topic": [119, 129], "tf": [120, 122, 123, 124, 125, 127, 132, 144, 940], "_data": [120, 129], "organiz": [120, 121], "inherit": [120, 121, 129], "bear": [120, 121, 122], "mind": [120, 121], "necessarili": [120, 121], "although": [120, 121], "underpin": [120, 121, 127], "programmat": [120, 121], "backup": [120, 121], "accident": [120, 121], "readabl": [120, 121, 125, 129, 130], "absent": [120, 121], "perk": [120, 121], "auto": [120, 121, 130], "throw": [120, 129], "imposs": 120, "coupl": [120, 121, 129, 131], "anywai": 120, "secondli": [120, 122], "easier": 120, "five": [121, 130], "decis": [121, 127, 129], "displai": [121, 130], "arbitrarili": [121, 130], "__repr__": 121, "control": [121, 122, 124, 129, 130, 143], "__getattr__": 121, "underli": [121, 322, 361, 364, 373, 376, 381, 384, 486, 489], "__setattr__": 121, "__contains__": 121, "__getstate__": 121, "__setstate__": 121, "unpickl": 121, "expand": [121, 560, 587, 772, 786, 789], "children": 121, "shallowest": 121, "deepest": 121, "67": [121, 322, 381, 384, 393, 396], "22": [121, 322, 381, 384, 684, 696, 698, 722, 724, 871, 875, 896, 897, 900], "retain_grad": [121, 634, 644], "dy": [121, 634, 644], "dx": [121, 634, 644], "technic": [121, 124, 125, 144], "autograd": [121, 144], "grad": [121, 130, 131, 132, 940, 975, 979], "redund": 121, "num_head": [121, 671, 682, 959, 970], "mask": [121, 671, 682, 683], "to_q_fn": [121, 671, 682], "to_kv_fn": [121, 671, 682], "to_out_fn": [121, 124, 671, 682], "to_q_v": [121, 671, 682], "to_kv_v": [121, 671, 682], "to_out_v": [121, 671, 682], "measur": [121, 671, 682, 959, 970], "dot": [121, 671, 682, 683, 684, 741, 743, 747, 749, 959, 970], "product": [121, 322, 492, 495, 560, 578, 671, 682, 683, 684, 690, 692, 708, 711, 722, 724, 741, 743, 747, 749, 896, 897, 900, 913, 916, 959, 970], "implicitli": 121, "intuit": [121, 130, 131], "debug": [121, 130], "chronolog": 121, "had": [121, 124], "sequenti": [121, 131], "flow": [121, 143], "implic": 121, "slightli": [121, 127, 131], "eager": [121, 144], "int8": [122, 241, 259], "int16": [122, 241, 247, 250, 259, 896, 913, 916, 921, 924], "uint8": [122, 241, 247, 250, 259], "uint16": [122, 241, 260, 896, 913, 916, 921, 924], "uint32": [122, 241, 260, 896, 913, 916, 921, 924], "uint64": [122, 241, 260, 896, 913, 916, 921, 924], "bfloat16": [122, 241, 259], "float16": [122, 241, 260], "all_dtyp": 122, "all_numeric_dtyp": 122, "all_int_dtyp": 122, "all_float_dtyp": 122, "fall": [122, 126, 940, 971, 972, 975, 979], "valid": [122, 127, 241, 252, 671, 672, 673, 674, 675, 676, 677, 678, 772, 816, 819, 929, 930, 933, 935, 938, 959, 960, 961, 962, 963, 964, 965, 966], "invalid": [122, 684, 747, 749, 929, 930, 933, 935, 938], "thirdli": 122, "native_float32": 122, "importantli": [122, 129, 132, 143], "varieti": [122, 123], "conveni": [122, 123, 125, 128, 130, 131], "arguabl": [122, 123], "compound": 122, "overflow": [122, 322, 336, 339, 896, 921, 924], "arr": [122, 123, 854, 855, 858], "scalar": [122, 127, 132, 144, 170, 194, 197, 560, 613, 630, 633, 684, 750, 752], "settabl": [122, 123], "jnp": [122, 123, 124, 125, 132, 940], "jaxarrai": [122, 123, 124, 125], "mx": [122, 123, 124, 940], "nd": [122, 123, 124, 127, 132, 940], "deleg": 122, "as_n": [122, 241, 253, 254, 255, 256, 275, 291, 292, 313], "idx": [123, 129, 560, 566], "tpu": [123, 275, 294, 319], "aliv": [123, 275, 306, 310, 312, 560, 594, 612, 614], "amount": [123, 275, 318, 756, 757, 760, 762, 765, 767, 770], "memori": [123, 124, 142, 144, 275, 290, 311, 316, 318, 321, 671, 681, 940], "dual": 123, "thrown": [123, 144, 560, 604], "rare": [123, 144], "program": 124, "strictli": 124, "ration": 124, "speak": 124, "subtli": 124, "ensure_in_backend": [124, 560, 604], "x_nativ": 124, "val_n": 124, "is_ivy_arrai": [124, 129, 560], "assign": [124, 129], "elif": 124, "irrespect": [124, 129, 241, 244], "inclus": [124, 170, 171, 172, 859, 861, 862], "omit": [124, 125, 876, 877, 878, 882, 884], "unspecifi": [124, 322, 509, 512, 513, 516, 684, 699, 701, 772, 816, 819], "predominantli": [124, 143], "math": [124, 132, 940], "presenc": 124, "altern": [124, 130], "_wrap_fn": 124, "maxim": [124, 127], "inner": [124, 129, 684, 699, 701, 708, 711, 832, 833, 834, 835], "third": [124, 144, 684, 735, 737, 876, 877], "addition": [124, 125], "leverag": 124, "equival": [124, 130, 132, 170, 171, 172, 322, 377, 380, 478, 481, 482, 485, 513, 516, 684, 716, 718, 725, 727, 732, 734, 750, 752], "input_arrai": 124, "adress": 125, "revisit": [125, 132], "dedic": [125, 129, 131, 634, 669, 951, 952], "__div__": 125, "dicat": 125, "futher": 125, "absenc": 125, "pep": 125, "484": 125, "annot": 125, "brittl": 125, "intend": [125, 896, 921, 924], "freeli": 125, "inde": [125, 144], "flexibl": 125, "original_typ": 125, "cumbersom": 125, "sound": 126, "higher": [126, 127, 132, 144, 634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663], "overview": [126, 143], "handler": [126, 128, 132, 940], "fledg": [127, 128], "syntact": [127, 132], "clip_by_valu": [127, 132], "clamp": [127, 132], "behavior": [127, 144, 322, 509, 512, 513, 516, 876, 877, 878, 882, 884], "fit": [127, 772, 798, 801], "construct": [127, 128, 131, 132, 772, 824, 827, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "power_seq": 127, "okai": 127, "bound": 127, "resid": [127, 131], "edg": [127, 132, 772, 773, 776, 782, 785, 828, 831, 940], "larger": [127, 132, 241, 258, 772, 773, 776, 806, 809, 896, 917, 920, 925, 928], "ml_framework": [127, 132, 170, 171, 172], "current_framework": [127, 132], "furthermor": 127, "concaten": [127, 130, 275, 301, 560, 587, 772, 778, 781, 940], "framework_handl": 127, "face": 127, "verbos": [127, 940, 985], "cprint": [127, 984], "framework_stack": 127, "_determine_framework_from_arg": 127, "valueerror": [127, 772, 812, 815], "get_framework": 127, "neither": [127, 322, 336, 339, 492, 495], "illustr": [127, 143], "un": [127, 241, 262], "nn": [127, 132, 170, 205, 208, 940], "init_h": [127, 671, 681], "init_c": [127, 671, 681], "kernel": [127, 144, 671, 681], "recurrent_kernel": [127, 671, 681], "bia": [127, 131, 671, 680, 681, 959, 960, 961, 962, 963, 964, 965, 966, 969], "recurrent_bia": [127, 671, 681], "x_shape": 127, "batch_shap": [127, 129, 132, 170, 185, 186, 560, 613, 671, 681, 682, 683, 684, 753, 755, 859, 860, 959, 968], "timestep": [127, 671, 681, 959, 968], "input_channel": [127, 131, 959, 960, 961, 962, 963, 964, 965, 968, 969], "x_flat": 127, "wi": 127, "wi_x": 127, "wii_x": 127, "wif_x": 127, "wig_x": 127, "wio_x": 127, "recurr": [127, 671, 681], "wh": 127, "lstm": [127, 671, 681, 959], "ht": 127, "ct": 127, "hts_list": 127, "unrol": [127, 130, 671, 681], "wii_xt": 127, "wif_xt": 127, "wig_xt": 127, "wio_xt": 127, "zip": 127, "htm1": 127, "ctm1": 127, "wh_htm1": 127, "whi_htm1": 127, "whf_htm1": 127, "whg_htm1": 127, "who_htm1": 127, "ft": 127, "gt": 127, "ot": 127, "offici": 127, "reliabl": 127, "sacrific": 127, "hear": 127, "virtu": 127, "pure_ivi": 127, "reduce_mean": [127, 130, 131, 132, 940], "reduce_sum": [127, 940], "reduce_var": 127, "compile_graph": [127, 132], "pure_torch": 127, "cat": [127, 132], "backbon": [127, 130], "_layer": 127, "super": [127, 130, 131, 132], "clean": [127, 128, 130], "random_unifrom": 127, "unclean": 127, "wx": 127, "temp": 127, "torchscript": 127, "fn": [127, 129, 145, 146, 147, 148, 149, 150, 151, 152, 153, 241, 259, 260, 275, 282, 283, 560, 566, 631, 836, 837, 842, 843, 844, 846, 847, 848, 943, 945], "example_input": [127, 167, 168], "static_argnum": [127, 167, 168], "static_argnam": [127, 167, 168], "jit": [127, 144], "frontend": 128, "primit": [128, 144], "hierarch": [128, 130, 131], "straight": [129, 940], "arraywithlinalg": 129, "arraywithlog": 129, "arraywithmath": 129, "arraywithmeta": 129, "arraywithreduct": 129, "is_native_arrai": [129, 560], "_shape": 129, "_size": 129, "functool": 129, "mul": 129, "len": [129, 132, 170, 205, 208], "_dtype": 129, "_devic": 129, "_dev_str": 129, "_pre_repr": 129, "_post_repr": 129, "ndim": [129, 684, 728, 730, 735, 737], "mt": 129, "answer": [129, 144], "consol": 129, "typeerror": 129, "immut": 129, "behav": 129, "claim": 129, "truli": 129, "_native_wrapp": 129, "attributeerror": 129, "genuin": 129, "some_method": 129, "similarli": [129, 170, 205, 208], "rewritten": 129, "__pow__": 129, "strang": 129, "power": [129, 130, 131, 322, 377, 380, 410, 413, 509, 512, 560, 595, 618, 625, 684, 715, 953], "enforc": 129, "notic": 129, "appear": [129, 772, 786, 789], "invers": [129, 143, 322, 328, 331, 332, 335, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 684, 705, 707, 725, 727], "_wrap_method": 129, "func_wrapp": [129, 145, 146, 147, 148, 149, 150, 151, 152, 153], "__name__": 129, "non_wrapped_method": 129, "_method_wrap": 129, "native_arg": 129, "native_kwarg": 129, "inner_fn": 129, "whist": 129, "unwrap": 129, "transit": 129, "needlessli": 129, "randn": 129, "_unwrap_method": 129, "method_wrap": 129, "compartment": 129, "public": [129, 560, 576], "newshap": 129, "new_shap": 129, "tidi": 129, "shorter": 129, "crystal": 129, "enough": [129, 130, 131], "ton": 130, "ado": [130, 131], "incredibli": [130, 144], "hash": 130, "soup": 130, "walk": [130, 131], "dct": 130, "cnt": 130, "combo": [130, 940, 946], "hold": [130, 560, 616, 617], "1000": [130, 322, 533, 536], "uda": 130, "3333": 130, "6667": 130, "178": 130, "new_weight": 130, "0600": 130, "3100": 130, "2400": 130, "6900": 130, "delimit": 130, "autocomplet": 130, "midwai": 130, "agent": 130, "total_spe": 130, "total_height": 130, "total_width": 130, "ag": 130, "tot": 130, "total_": 130, "total_h": 130, "batch_siz": [130, 671, 672, 673, 674, 675, 676, 677, 678, 859, 860], "dir": 130, "adam": [130, 131, 132, 634, 635, 638, 640, 642, 653, 655, 940, 975, 977], "cnt0": 130, "cnt1": 130, "diff_0": 130, "diff_1": 130, "config0": 130, "config1": 130, "Not": [130, 131, 144, 169], "decod": 130, "l0": 130, "l1": [130, 684, 750, 752], "depth": [130, 131, 132, 143, 275, 296, 300, 304, 560, 598, 613, 836, 848, 971, 972], "clearer": 130, "truncat": 130, "decoder__l0": 130, "decoder__l1": 130, "encoder__l0": 130, "encoder__l1": 130, "height": 130, "l0__b": 130, "l0__w": 130, "l1__b": 130, "l1__w": 130, "printabl": 130, "obviou": 130, "foresight": 130, "untidili": 130, "update_ag": 130, "normalize_img": 130, "img": 130, "img_max": 130, "reduce_max": [130, 940], "img_min": 130, "reduce_min": [130, 940], "img_rang": 130, "agent_posit": 130, "agent_veloc": 130, "agent_cam_front_rgb": 130, "agent_cam_front_depth": 130, "agent_cam_rear_rgb": 130, "agent_cam_rear_depth": 130, "agent_cam_lidar": 130, "normal": [130, 772, 816, 819, 854, 855, 858, 859, 864, 973, 974], "cleaner": 130, "camera": 130, "front_rgb": 130, "front_depth": 130, "rear_rgb": 130, "rear_depth": 130, "lidar": 130, "rgb": 130, "rear": 130, "veloc": 130, "cam": 130, "cam_max": 130, "cam_min": 130, "cam_rang": 130, "Of": 130, "ideal": 130, "perman": 130, "afterward": 130, "thread": 130, "incorpor": 130, "pretti": 130, "straightforward": 130, "dataload": [130, 142, 940], "_cnt": 130, "img_": 130, "_dataset_s": 130, "_batch_siz": 130, "_count": [130, 131], "__next__": 130, "filenam": 130, "img_fnam": 130, "fname": 130, "loaded_img": 130, "cv2": 130, "imread": 130, "loader": [130, 144], "batch_slic": 130, "model": [130, 131, 940], "mymodel": [130, 940], "linear0": [130, 131, 940], "linear1": [130, 131, 940], "x_in": [130, 131, 132, 940], "001": [130, 131, 634, 635, 638, 854, 855, 858], "loss_fn": [130, 131, 132, 940], "0145": 130, "grad_fn": 130, "addbackward0": 130, "_create_vari": 131, "output_channel": [131, 959, 960, 961, 962, 963, 964, 965, 968, 969], "with_bia": [131, 959, 969], "_input_channel": 131, "_output_channel": 131, "_w_shape": 131, "_b_shape": 131, "_with_bia": 131, "8979": 131, "3198": 131, "0196": 131, "3126": 131, "3717": 131, "9687": 131, "6958": 131, "5122": 131, "3902": 131, "8800": 131, "5613": 131, "1982": 131, "nightmar": 131, "overcom": 131, "fc": 131, "9563": 131, "impact": 131, "v0": 131, "v1": 131, "6440": 131, "key0": 131, "1823": 131, "8075": 131, "linear3": 131, "v2": 131, "2346": 131, "counter": 131, "hidden": [131, 671, 681, 959, 968], "fed": [131, 275, 316], "1300": 131, "decoupl": 131, "scheme": 131, "weight_initi": [131, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969], "glorotuniform": [131, 953, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969], "bias_initi": [131, 959, 960, 961, 962, 963, 964, 965, 966, 969], "_w_init": 131, "_b_init": 131, "create_vari": [131, 953], "var_shap": [131, 953], "fan_out": [131, 953], "fan_in": [131, 953], "fan_mod": [131, 953], "fan_sum": 131, "slight": 131, "misnom": 131, "saw": 131, "vanilla": [131, 832, 834], "descent": [131, 634, 645, 647, 975, 980], "lar": [131, 634, 653, 655, 657, 659, 975], "lamb": [131, 634, 653, 655, 975], "compile_on_next_step": [131, 971, 972, 975, 976, 977, 978, 979, 980], "_beta1": 131, "_beta2": 131, "_epsilon": 131, "_mw": 131, "_vw": 131, "_first_pass": 131, "_should_compil": 131, "_step": [131, 975, 979], "new_v": 131, "_lr": 131, "isinst": [131, 132, 560, 628], "_inplac": 131, "_stop_gradi": 131, "set_stat": [131, 975, 976, 977, 978, 979, 980], "pre": [132, 144, 275], "captur": 132, "sparse_funct": 132, "num_class": [132, 859, 860], "num_dim": 132, "new_axi": 132, "_linear": 132, "to_backend": 132, "jax_graph": 132, "learnabl": [132, 854, 855, 858, 973, 974], "to_ivy_modul": [132, 951], "thinli": 132, "whilst": 132, "to_haiku_modul": 132, "hk": 132, "loss_fn_t": 132, "transform": [132, 143, 671, 679, 680], "without_apply_rng": 132, "rng": 132, "prngkei": 132, "init": 132, "update_rul": 132, "01": [132, 322, 517, 520], "tree_multimap": 132, "mechan": [142, 144, 940], "vision": [142, 940], "robot": [142, 940], "focus": 143, "field": [143, 684, 699, 701, 728, 730, 735, 737, 876, 877, 878, 882], "perfect": 143, "3d": [143, 959, 964, 965], "differenti": 143, "demo": [143, 940], "orient": 143, "pose": 143, "euler": [143, 169], "quaternion": 143, "rotat": 143, "matric": [143, 170, 205, 208, 223, 227, 228, 232, 671, 680, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 715, 716, 718, 719, 721, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746], "angl": [143, 322, 353, 356, 393, 396, 529, 532, 551, 555], "ivy_mech": 143, "target_facing_rotation_matrix": 143, "polar_to_cartesian_coord": 143, "ordin": [143, 684, 732, 734], "warp": 143, "optic": 143, "voxel": 143, "ivy_vis": 143, "coords_to_voxel_grid": 143, "render_pixel_coord": 143, "neural": [143, 671, 940, 948, 959], "radianc": 143, "nerf": 143, "trajectori": 143, "motion": 143, "plan": [143, 940], "mobil": 143, "ivy_robot": 143, "sample_spline_path": 143, "rigidmobil": 143, "sample_bodi": 143, "drone": 143, "sample_link": 143, "openai": 143, "swimmer": 143, "cumul": [143, 560, 578, 579], "reward": 143, "supervis": 143, "reinforc": 143, "door": [143, 144], "intersect": 143, "cartpol": 143, "mountain_car": 143, "pendulum": 143, "reacher": 143, "polici": 143, "condit": [143, 167, 168, 836, 846, 847, 871, 875], "learnt": 143, "ture": 143, "ntm": 143, "egospher": 143, "spatial": 143, "esm": 143, "ivy_memori": 143, "egocentr": 143, "room": 143, "inspir": 143, "doubt": 144, "grate": 144, "put": 144, "probe": 144, "undergo": 144, "remark": 144, "surpris": 144, "backward": [144, 322, 513, 516, 684, 747, 749, 929, 930, 933, 935, 938], "lock": 144, "contunu": 144, "minor": 144, "xla": 144, "buffer": 144, "kind": [144, 241, 258, 261, 322, 509, 512, 896, 913, 916, 921, 924], "gold": 144, "dex": 144, "phase": 144, "lax": 144, "scan": 144, "tricki": 144, "predictor": 144, "tight": 144, "driver": 144, "schedul": 144, "algorithm": [144, 671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "dispatch": 144, "Will": 144, "ast": 144, "dynamic": 144, "cond": 144, "jacobian": 144, "checkpoint": 144, "autodiff": 144, "shine": 144, "merci": 144, "superset": 144, "cluster": 144, "compet": 144, "paradigm": 144, "parallelis": [144, 275, 282, 283], "spmd": 144, "mixtur": [144, 634, 635, 638], "expert": 144, "sophist": 144, "depart": 144, "routin": 144, "hundr": 144, "thousand": 144, "deepli": [144, 836, 838], "broadli": 144, "heavili": 144, "supplementari": 144, "reusabl": 144, "fanci": 144, "fusion": 144, "lose": 144, "vmap": 144, "pmap": 144, "overhead": 144, "possibli": [144, 560, 628], "ineffici": 144, "eventu": 144, "supplement": 144, "backdoor": 144, "callback": 144, "record": 144, "metric": 144, "somewhat": 144, "outsourc": 144, "inputs_to_ivy_arrai": 145, "gaussian": [155, 156], "leaki": [155, 156, 157], "alpha": [155, 157], "rectifi": [155, 157, 158], "slope": [155, 157], "39": [155, 157, 322, 410, 413, 634, 635, 638, 684, 722, 724, 896, 897, 900], "85": [155, 157, 322, 381, 384], "48": [155, 157, 322, 533, 536, 634, 635, 638, 684, 722, 724, 896, 897, 900], "88": [155, 157, 322, 381, 384, 684, 722, 724, 896, 897, 900], "269": [155, 159], "731": [155, 159], "881": [155, 159], "214": [155, 159], "978": [155, 159], "891": [155, 159], "422": [155, 160], "155": [155, 160], "0768": [155, 160], "231": [155, 160], "693": [155, 160, 756, 767, 770], "49": [155, 160, 322, 533, 536, 896, 897, 900], "147": [155, 160], "363": [155, 160], "3461": [155, 161, 164], "6491": [155, 161, 164], "535": [155, 161, 164], "hyperbol": [155, 166, 322, 332, 335, 345, 348, 357, 360, 393, 396, 529, 532, 551, 555], "55": [155, 166, 671, 677, 684, 722, 724, 896, 897, 900], "501": [155, 166], "array_method": [161, 162, 174, 175, 180, 181, 188, 189, 194, 195, 205, 206, 210, 211, 218, 219, 223, 225, 228, 230, 236, 238, 247, 248, 323, 324, 328, 329, 332, 333, 336, 337, 341, 342, 345, 346, 349, 350, 353, 354, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 492, 493, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 543, 546, 548, 551, 553, 556, 557, 561, 562, 589, 590, 635, 636, 685, 686, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 708, 709, 712, 713, 716, 717, 719, 720, 722, 723, 725, 726, 728, 729, 732, 733, 735, 736, 738, 739, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 757, 758, 762, 763, 767, 768, 773, 774, 778, 779, 782, 783, 786, 787, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 812, 813, 816, 817, 820, 821, 824, 825, 828, 829, 855, 856, 878, 880, 886, 887, 891, 892, 897, 898, 901, 902, 905, 906, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 930, 931, 935, 936], "container_method": [161, 163, 165, 171, 173, 174, 176, 178, 180, 182, 184, 185, 187, 188, 190, 192, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 247, 249, 251, 323, 325, 327, 328, 330, 332, 334, 336, 338, 340, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 492, 494, 496, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 542, 544, 546, 547, 549, 551, 552, 554, 556, 558, 561, 563, 565, 573, 574, 589, 591, 593, 635, 637, 639, 640, 641, 643, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 685, 687, 689, 708, 710, 757, 759, 761, 762, 764, 766, 767, 769, 771, 773, 775, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 855, 857, 861, 863, 865, 866, 868, 878, 879, 881, 886, 888, 890, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 930, 932, 934, 935, 937, 939], "faster": [167, 168], "invoc": [167, 168], "718281828459045": 169, "newaxi": 169, "alia": 169, "pi": 169, "141592653589793": 169, "mathemat": [169, 322, 336, 339, 353, 356, 414, 417, 492, 495, 684, 750, 752], "half": [170, 171, 172, 859, 861, 862, 865, 867], "chosen": [170, 171, 172, 322, 353, 356, 871, 875], "distanc": [170, 171, 172], "adjac": [170, 171, 172], "creation_funct": [170, 171, 172, 174, 177, 179, 180, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 215, 216, 218, 221, 223, 227, 228, 232, 233, 235, 236, 240], "interpret": [170, 174, 177, 210, 213], "uniniti": [170, 179, 180, 183], "elsewher": [170, 185, 186, 871, 875], "row": [170, 185, 186, 684, 732, 734, 735, 737, 859, 860, 871, 874], "column": [170, 185, 186, 684, 699, 701, 728, 730, 732, 734, 735, 737], "__dlpack__": [170, 188, 191, 275, 317], "interchang": [170, 188, 191, 772, 820, 823], "coordin": [170, 205, 208, 322, 353, 356], "cartesian": [170, 205, 208], "ij": [170, 205, 208, 896, 897, 900], "rank": [170, 205, 208, 560, 632, 684, 690, 692, 716, 718, 728, 730, 732, 734, 744, 746, 747, 749, 750, 752, 772, 782, 785, 786, 789, 816, 819, 828, 831, 871, 874, 929, 930, 933, 935, 938], "ni": [170, 205, 208], "xi": [170, 205, 208], "n1": [170, 205, 208], "n2": [170, 205, 208], "n3": [170, 205, 208], "accordingli": [170, 205, 208, 322, 414, 417, 684, 750, 752, 871, 873, 876, 877, 878, 882, 884, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "xv": [170, 205, 208], "yv": [170, 205, 208], "triangular": [170, 223, 227, 228, 232, 684, 685, 688, 728, 730], "innermost": [170, 223, 227, 228, 232, 684, 685, 688, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 716, 718, 719, 721, 725, 727, 728, 730, 732, 734, 735, 737, 738, 740, 744, 746], "mxn": [170, 223, 227, 228, 232, 684, 696, 698, 716, 718, 719, 721, 725, 727, 728, 730, 738, 740, 744, 746], "defaultdtyp": 241, "defaultfloatdtyp": 241, "float_dtyp": [241, 254, 268], "defaultintdtyp": 241, "dtype_in": [241, 242, 243, 257, 262, 263, 264, 274], "incompat": [241, 246], "occur": [241, 247, 250, 871, 872, 873, 876, 877, 878, 882, 884], "data_type_funct": [241, 247, 250], "closest": [241, 252, 322, 385, 388, 418, 421, 422, 425, 517, 520, 556, 559], "floatdtyp": [241, 254], "int_dtyp": [241, 255, 269], "intdtyp": [241, 255], "followng": [241, 258], "occupi": [241, 258, 261, 560, 616, 617], "ep": [241, 258, 684, 716, 718, 725, 727], "smallest_norm": [241, 258], "precis": [241, 258, 322, 492, 495, 533, 536], "encapsul": [241, 261], "type1": [241, 265], "type2": [241, 265], "arrays_and_dtyp": [241, 266], "ret1": [241, 270], "ret2": [241, 270], "defaultdevic": 275, "__enter__": 275, "_dev": 275, "initialis": 275, "devcloneditem": [275, 294], "multidevitem": [275, 276, 279], "devclonedit": 275, "multidevit": [275, 277, 280, 282, 283, 286], "devclonednest": 275, "multidevnest": [275, 278, 281], "devdistitem": 275, "devdistit": 275, "devdistnest": 275, "devmanag": 275, "dev_mapp": 275, "da_dim_s": 275, "safety_factor": 275, "min_dev_dim_s": 275, "max_dev_dim_step_ratio": 275, "min_unit_dev_tune_step": 275, "min_sf_tune_step": 275, "starting_split_factor": 275, "max_split_factor_step_s": 275, "tune_dev_alloc": 275, "tune_dev_split": 275, "mapper": [275, 282, 283], "receivess": 275, "ratio": [275, 634, 653, 655, 975, 977], "safe": [275, 282], "oom": 275, "tune": 275, "da_tune_step": 275, "ds_tune_step": 275, "to_clon": 275, "to_distribut": 275, "multidevic": [275, 282], "parallel": [275, 282, 283], "mutlidevic": [275, 282], "repeated_config_check": 275, "tune_step": 275, "devmapp": [275, 283], "ret_fn": [275, 282, 283], "queue_class": [275, 282, 283], "worker_class": [275, 282, 283], "worker": [275, 282, 283], "used_dev": [275, 282], "sf": [275, 282], "devmappermultiproc": 275, "multidev": [275, 284, 285, 304], "profil": 275, "save_dir": [275, 287], "deviceic": [275, 293], "spread": [275, 304], "139740789224448": [275, 306], "physic": [275, 308], "x3": [275, 310], "x4": [275, 310], "process_specif": [275, 311, 321], "percentag": [275, 311], "ram": [275, 311, 318, 321], "alon": [275, 311, 321], "attr_onli": [275, 312], "chunk": [275, 314, 315, 316], "max_chunk_s": [275, 316], "chunk_siz": [275, 316], "input_ax": [275, 316], "output_ax": [275, 316], "feed": [275, 316], "fist": [275, 316], "stream": [275, 317], "caveat": [275, 317], "portabl": [275, 317, 940], "gb": [275, 318, 321], "reset": [275, 320], "magnitud": [322, 323, 326, 336, 339, 492, 495, 684, 735, 737, 738, 740], "princip": [322, 328, 331, 341, 344, 349, 352], "cosin": [322, 328, 331, 332, 335, 389, 392, 393, 396], "x1_i": [322, 336, 339, 353, 356, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 402, 405, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 541, 545], "x2_i": [322, 336, 339, 353, 356, 361, 364, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 402, 405, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 470, 473, 474, 477, 482, 485, 486, 489, 492, 495, 501, 504, 509, 512, 513, 516, 541, 545], "finit": [322, 336, 339, 353, 356, 434, 437, 492, 495, 509, 512, 513, 516], "nor": [322, 336, 339, 492, 495], "nearest": [322, 336, 339, 492, 495, 517, 520], "2019": [322, 336, 339, 414, 417, 492, 495], "commut": [322, 336, 339], "sine": [322, 341, 344, 345, 348, 525, 528, 529, 532], "57": [322, 341, 344, 381, 384, 393, 396], "524": [322, 341, 344], "644": [322, 341, 344], "201": [322, 341, 344, 517, 520], "305": [322, 341, 344], "412": [322, 341, 344], "quotient": [322, 353, 356], "notat": [322, 353, 356, 896, 897, 900], "denot": [322, 353, 356], "pair": [322, 353, 356, 671, 683, 684, 690, 692], "quadrant": [322, 353, 356], "3\u03c0": [322, 353, 356], "549": [322, 357, 360], "bitwis": [322, 361, 364, 373, 376, 381, 384, 486, 489], "AND": [322, 361, 364, 474, 477, 929, 930, 933], "binari": [322, 361, 364, 373, 376, 381, 384, 486, 489, 756, 757, 760], "invert": [322, 365, 368], "arithmet": [322, 377, 380, 896, 905, 908], "propag": [322, 377, 380, 896, 901, 904, 905, 908, 909, 912, 917, 920, 921, 924, 925, 928], "thu": [322, 377, 380, 509, 512, 513, 516, 684, 699, 701], "lh": [322, 377, 380], "rh": [322, 377, 380], "xor": [322, 381, 384, 486, 489], "78": [322, 381, 384, 684, 722, 724, 896, 897, 900], "91": [322, 381, 384, 684, 722, 724, 896, 897, 900], "23": [322, 381, 384, 671, 677, 684, 696, 698, 871, 875], "66": [322, 381, 384, 684, 722, 724, 896, 897, 900], "77": [322, 381, 384, 684, 722, 724, 896, 897, 900], "79": [322, 381, 384], "89": [322, 381, 384, 684, 741, 743, 896, 921, 924], "98": [322, 381, 384, 684, 722, 724, 871, 875, 896, 897, 900], "26": [322, 381, 384, 634, 635, 638, 671, 678, 684, 696, 698, 722, 724, 741, 743, 896, 897, 900], "21": [322, 381, 384, 560, 578, 684, 696, 698, 722, 724, 756, 767, 770, 896, 897, 900], "34": [322, 381, 384, 533, 536], "24": [322, 381, 384, 533, 536, 560, 578, 634, 635, 638, 684, 696, 698, 722, 724, 896, 897, 900], "51": [322, 381, 384], "27": [322, 381, 384, 393, 396, 533, 536, 671, 683, 684, 722, 724, 896, 897, 900], "74": [322, 381, 384], "59": [322, 381, 384], "416": [322, 389, 392], "122": [322, 393, 396], "368": [322, 393, 396], "670": [322, 393, 396], "202": [322, 393, 396, 517, 520], "548": [322, 393, 396], "1490": [322, 393, 396], "dividend": [322, 397, 400, 513, 516], "divisor": [322, 397, 400, 513, 516, 634, 635, 638, 640, 642, 653, 655, 896, 917, 920, 925, 928, 975, 976, 977], "gauss": [322, 406, 409], "exponenti": [322, 406, 409, 410, 413, 470, 473, 509, 512], "logarithm": [322, 410, 413, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 684, 731], "72": [322, 410, 413, 634, 635, 638, 684, 722, 724, 896, 897, 900], "accur": [322, 414, 417], "fdlibm": [322, 414, 417], "compliant": [322, 414, 417, 478, 481, 482, 485, 896, 901, 904, 905, 908, 909, 912], "greatest": [322, 418, 421, 422, 425], "out_i": [322, 434, 437, 438, 441, 442, 445], "threshold": [322, 490, 491], "exce": [322, 491], "y_i": [322, 497, 500], "expon": [322, 509, 512, 560, 625], "versu": [322, 509, 512], "odd": [322, 509, 512], "modulu": [322, 513, 516], "primarili": [322, 513, 516], "5654": [322, 517, 520], "034": [322, 517, 520], "433": [322, 517, 520], "343": [322, 517, 520], "44": [322, 517, 520, 533, 536, 537, 540, 684, 722, 724, 871, 875, 896, 897, 900], "30": [322, 517, 520, 684, 722, 724, 896, 897, 900, 953, 957], "81": [322, 517, 520, 537, 540, 896, 897, 900], "527": [322, 517, 520], "301": [322, 517, 520], "indistinguish": [322, 533, 536], "infinit": [322, 533, 536], "83": [322, 533, 536], "32455532": [322, 533, 536], "89897949": [322, 533, 536], "50": [322, 533, 536, 684, 722, 724, 871, 874, 896, 897, 900], "31": [322, 533, 536], "169": [322, 533, 536], "47": [322, 533, 536], "93": [322, 533, 536], "35": [322, 533, 536, 671, 683, 684, 690, 692, 871, 875, 896, 897, 900], "09": [322, 537, 540, 671, 683], "61": [322, 537, 540, 756, 757, 760], "546": [322, 546, 550], "842": [322, 546, 550], "916": [322, 546, 550, 756, 757, 760], "996": [322, 546, 550], "328": [322, 546, 550], "real": [322, 551, 555], "462": [322, 551, 555], "604": [322, 551, 555], "984": [322, 551, 555], "997": [322, 551, 555, 854, 855, 858], "decim": [322, 556, 559], "inspect": [560, 566, 944, 945], "downscal": [560, 572, 573, 575], "60": [560, 578, 684, 722, 724, 896, 897, 900], "default_v": [560, 581], "catch_except": [560, 581], "rev": [560, 581], "with_cal": [560, 581], "arrang": [560, 582], "123": [560, 585], "mod": [560, 586], "max_freq": [560, 587], "num_band": [560, 587], "pad": [560, 587, 671, 672, 673, 674, 675, 676, 677, 678, 772, 782, 785, 828, 831, 959, 960, 961, 962, 963, 964, 965, 966], "fourier": [560, 587], "band": [560, 587], "linearli": [560, 587, 684, 732, 734], "oppos": [560, 587], "geometr": [560, 587], "seen_set": [560, 598], "local_set": [560, 598], "decrement": [560, 602], "is_arrai": 560, "allow_dupl": [560, 610], "forkserv": [560, 611], "spawn": [560, 611], "hot": [560, 613], "scatter": [560, 613, 616, 617], "overrid": [560, 613], "tmp_dr": [560, 621], "temporari": [560, 621], "min_denomin": [560, 624], "stabil": [560, 624, 625, 885, 886, 889, 891, 894], "_min_denomin": [560, 624], "min_bas": [560, 625], "_min_bas": [560, 625, 854, 855, 858, 973, 974], "100000023841858": [560, 628], "200000047683716": [560, 628], "299999952316284": [560, 628], "400000095367432": [560, 628], "599999904632568": [560, 628], "101": [560, 629], "unpack": [560, 632], "gradienttrack": 634, "delta": [634, 635, 638], "cost": [634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 832, 833, 834, 835], "en": [634, 635, 638, 640, 642], "wikipedia": [634, 635, 638, 640, 642], "wiki": [634, 635, 638, 640, 642], "stochastic_gradient_desc": [634, 635, 638, 640, 642], "dc": [634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663], "dw": [634, 635, 638, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663], "averag": [634, 635, 638, 640, 642, 653, 655, 832, 833, 834], "forget": [634, 635, 638, 640, 642, 653, 655, 975, 976, 977], "004": [634, 635, 638], "009": [634, 635, 638], "86": [634, 635, 638], "28": [634, 635, 638, 671, 674, 677, 678, 684, 722, 724, 896, 897, 900], "45": [634, 635, 638, 684, 722, 724, 772, 811, 854, 855, 858, 896, 897, 900], "0125": [634, 635, 638], "601": [634, 635, 638], "581": [634, 635, 638], "025": [634, 635, 638], "992": [634, 635, 638], "209": [634, 635, 638, 876, 877], "271": [634, 635, 638], "0717": [634, 635, 638], "142": [634, 635, 638], "182": [634, 635, 638], "624": [634, 635, 638, 859, 865, 867], "06": [634, 635, 638], "02": [634, 635, 638], "744": [634, 635, 638], "626": [634, 635, 638], "65": [634, 635, 638, 684, 722, 724, 896, 897, 900], "024": [634, 635, 638], "096": [634, 635, 638], "216": [634, 635, 638], "384": [634, 635, 638], "rate": [634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663, 832, 833, 834, 835, 959, 970, 975, 976, 977, 978, 979, 980], "ws_new": [634, 640, 642, 645, 647, 653, 655, 657, 659, 661, 663], "retain": [634, 644], "trust": [634, 653, 655, 975, 977], "decai": [634, 653, 655, 657, 659, 975, 977, 978], "layerwis": [634, 657, 659, 975, 978], "stride": [671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "data_format": [671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "nwc": [671, 672, 673, 959, 960, 961], "dilat": [671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "convolut": [671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "d_in": [671, 672, 673, 674, 675, 676, 677], "fw": [671, 672, 673, 674, 675, 676, 677, 678], "d_out": [671, 672, 673, 674, 675, 676, 677], "slide": [671, 672, 673, 674, 675, 676, 677, 678, 959, 960, 961, 962, 963, 964, 965, 966], "ncw": [671, 672, 673, 959, 960, 961], "wio": [671, 672], "output_shap": [671, 673, 675, 677, 959, 961, 963, 965], "nhwc": [671, 674, 675, 678, 959, 962, 963, 966], "fh": [671, 674, 675, 676, 677, 678], "nchw": [671, 674, 675, 678, 959, 962, 963, 966], "hwio": [671, 674], "unequ": [671, 674], "unsqueez": [671, 674, 678], "ndhwc": [671, 676, 677, 959, 964, 965], "volum": [671, 676], "fd": [671, 676, 677], "ncdhw": [671, 676, 677, 959, 964, 965], "dhwio": [671, 676], "256": [671, 677], "258": [671, 677], "128": [671, 677, 684, 722, 724], "depthwis": [671, 678, 959, 966], "333": [671, 678], "inp": [671, 678], "prob": [671, 679, 859, 860, 959, 967], "randomli": [671, 679, 959, 967], "bernoulli": [671, 679], "out_featur": [671, 679, 680], "incom": [671, 680], "outer_batch_shap": [671, 680], "inner_batch_shap": [671, 680], "in_featur": [671, 680], "cell": [671, 681, 959, 968], "num_queri": [671, 682, 683], "x_feat_dim": [671, 682], "num_kei": [671, 682, 683], "cont_feat_dim": [671, 682], "numhead": [671, 682], "feat_dim": [671, 682, 683], "out_feat_dim": [671, 682], "score": [671, 683], "04": [671, 683], "03": [671, 683, 854, 855, 858], "08": [671, 683], "decomposit": [684, 685, 688, 728, 730, 735, 737], "symmetr": [684, 685, 688, 699, 701, 702, 704, 753, 755], "vif": [684, 690, 692], "92": [684, 693, 695], "293": [684, 693, 695], "46997": [684, 693, 695], "eigendecomposit": [684, 699, 701], "qlq\u1d40": [684, 699, 701], "orthogon": [684, 699, 701], "eig": [684, 699, 701], "eigenvalu": [684, 699, 701, 702, 704], "eigenvector": [684, 699, 701], "75": [684, 705, 707, 722, 724], "prepend": [684, 708, 711], "singular": [684, 716, 718, 725, 727, 735, 737, 738, 740], "toler": [684, 716, 718, 725, 727], "largest_singular_valu": [684, 716, 718, 725, 727], "array_lik": [684, 722, 724], "33": [684, 722, 724, 854, 855, 858, 896, 897, 900], "36": [684, 722, 724, 896, 897, 900], "84": [684, 722, 724, 896, 897, 900], "105": [684, 722, 724, 756, 757, 760], "112": [684, 722, 724, 896, 897, 900], "104": [684, 722, 724, 896, 897, 900], "120": [684, 722, 724], "moor": [684, 725, 727], "penros": [684, 725, 727], "pseudo": [684, 725, 727], "orthonorm": [684, 728, 730, 735, 737], "2d": [684, 731, 959, 962, 963, 966], "logdet": [684, 731], "coeffici": [684, 732, 734], "usvh": [684, 735, 737], "vh": [684, 735, 737], "hermitian": [684, 735, 737], "et": [684, 735, 737], "cetera": [684, 735, 737], "adjoint": [684, 735, 737], "reconstruct": [684, 735, 737, 876, 877, 883], "reconstructed_x": [684, 735, 737], "contract": [684, 741, 743, 896, 897, 900], "doubl": [684, 741, 743], "singleton": [684, 750, 752, 772, 812, 815, 871, 873, 896, 901, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 930, 933, 935, 938], "liter": [684, 750, 752], "manhattan": [684, 750, 752], "l2": [684, 750, 752], "euclidean": [684, 750, 752], "mathbf": [684, 753, 755], "mathbb": [684, 753, 755], "skew": [684, 753, 755], "entropi": [756, 757, 760, 762, 765, 767, 770], "predict": [756, 757, 760, 762, 765, 767, 770], "smooth": [756, 757, 760, 762, 765, 767, 770], "223": [756, 757, 760], "357": [756, 757, 760, 767, 770], "511": [756, 757, 760], "discret": [756, 762, 765], "3862944": [756, 762, 765], "35667497": [756, 762, 765], "spars": [756, 767, 770], "logit": [756, 767, 770], "793291": [756, 767, 770], "512926": [756, 767, 770], "before_1": [772, 782, 785, 828, 831], "after_1": [772, 782, 785, 828, 831], "before_n": [772, 782, 785, 828, 831], "after_n": [772, 782, 785, 828, 831], "insert": [772, 786, 789, 836, 841, 871, 872], "manipulation_funct": [772, 786, 789], "reorder": [772, 790, 793], "permut": [772, 794, 797, 820, 823], "repetit": [772, 798, 801, 824, 827], "restor": [772, 806, 809], "famili": [772, 816, 819], "intxx": [772, 816, 819], "floatxx": [772, 816, 819], "fomaml_step": 832, "inner_cost_fn": [832, 833, 834], "outer_cost_fn": [832, 833, 834], "inner_grad_step": [832, 833, 834, 835], "inner_learning_r": [832, 833, 834, 835], "inner_optimization_step": [832, 833, 834, 835], "inner_batch_fn": [832, 833, 834], "outer_batch_fn": [832, 833, 834], "average_across_step": [832, 833, 834], "inner_v": [832, 833, 834], "keep_inner_v": [832, 833, 834], "outer_v": [832, 833, 834], "keep_outer_v": [832, 833, 834], "return_inner_v": [832, 833, 834, 835], "num_task": [832, 833, 834, 835], "maml": [832, 833, 834], "recev": [832, 833, 834], "0x7fbe31783e50": [832, 833, 834, 835], "maml_step": 832, "rece": [832, 834], "reptile_step": 832, "cost_fn": [832, 835], "reptil": [832, 835], "receivng": [832, 835], "all_nested_indic": 836, "include_nest": [836, 837], "_index": [836, 837, 847], "_base": [836, 837, 846, 847], "copy_nest": 836, "to_mut": [836, 838, 848], "mutabl": [836, 838, 848], "insert_into_nest_at_index": 836, "insert_into_nest_at_indic": 836, "map_nest_at_index": 836, "map_nest_at_indic": 836, "multi_index_nest": 836, "nested_ani": 836, "check_nest": [836, 846, 847], "conditon": [836, 846, 847], "nested_indices_wher": 836, "stop_after_n_found": [836, 847], "_depth": [836, 848], "_tuple_check_fn": [836, 848], "_list_check_fn": [836, 848], "_dict_check_fn": [836, 848], "nested_multi_map": 836, "nest0": [836, 849], "ivy_arrai": [836, 849], "funciton": [836, 849], "prune_nest_at_index": 836, "prune_nest_at_indic": 836, "set_nest_at_index": 836, "set_nest_at_indic": 836, "mini": [854, 855, 858, 973, 974], "gamma": [854, 855, 858], "beta": [854, 855, 858], "0976": [854, 855, 858], "3452": [854, 855, 858], "2740": [854, 855, 858], "1047": [854, 855, 858], "5886": [854, 855, 858], "2732": [854, 855, 858], "7696": [854, 855, 858], "7024": [854, 855, 858], "2518": [854, 855, 858], "58": [854, 855, 858, 876, 877], "283": [854, 855, 858], "585": [854, 855, 858], "909": [854, 855, 858], "628": [854, 855, 858], "225": [854, 855, 858], "425": [854, 855, 858], "norm_idx": [854, 855, 858], "228": [854, 855, 858], "0285": [854, 855, 858], "199": [854, 855, 858], "204": [854, 855, 858], "population_s": [859, 860], "num_sampl": [859, 860], "draw": [859, 860, 864, 865, 867], "unnorm": [859, 860], "drawn": [859, 860, 861, 862, 864, 865, 867], "home": [859, 860, 864], "uniformli": [859, 861, 862, 865, 867], "highest": [859, 861, 862], "parameter": [859, 864, 865, 867], "6444774682897879": [859, 864], "811": [859, 864], "508": [859, 864], "564": [859, 864], "7268672": [859, 864], "968": [859, 864], "175": [859, 864, 876, 877], "064": [859, 864], "40935726": [859, 864], "556": [859, 864], "26431865": [859, 865, 867], "475": [859, 865, 867], "878": [859, 865, 867], "861": [859, 865, 867], "89150229": [859, 865, 867], "89629126": [859, 865, 867], "94198485": [859, 865, 867], "91405606": [859, 865, 867], "72848724": [859, 865, 867], "7550739": [859, 865, 867], "00109": [859, 865, 867], "occurr": [871, 872, 873, 876, 877], "yield": [871, 875], "43": [871, 875], "x_j": [876, 877, 878, 882, 884], "impli": [876, 877, 878, 882, 884], "inverse_indic": [876, 877, 883], "aggreg": [876, 877], "fourth": [876, 877], "607": [876, 877], "735": [876, 877], "667": [876, 877], "381": [876, 877], "857": [876, 877], "0396": [876, 877], "166": [876, 877], "828": [876, 877], "144": [876, 877], "40501155": [876, 877], "77361575": [876, 877], "97776199": [876, 877], "36831157": [876, 877], "89148434": [876, 877], "9512272": [876, 877], "67542176": [876, 877], "41985657": [876, 877], "23478023": [876, 877], "1141": [876, 877], "8101": [876, 877], "9298": [876, 877], "8460": [876, 877], "2119": [876, 877], "3519": [876, 877], "6252": [876, 877], "4033": [876, 877], "7443": [876, 877], "2577": [876, 877], "3707": [876, 877], "0545": [876, 877], "3238": [876, 877], "5944": [876, 877], "0775": [876, 877], "4327": [876, 877], "176": [876, 877], "889": [876, 877], "763": [876, 877], "071": [876, 877], "262": [876, 877], "456": [876, 877], "114": [876, 877], "349": [876, 877], "615": [876, 877], "594": [876, 877], "335": [876, 877], "212": [876, 877], "457": [876, 877], "827": [876, 877], "set_funct": [876, 878, 882], "ascend": [885, 886, 889], "einstein": [896, 897, 900], "summat": [896, 897, 900], "seq": [896, 897, 900], "jk": [896, 897, 900], "ik": [896, 897, 900], "126": [896, 897, 900], "510": [896, 897, 900], "99": [896, 897, 900], "108": [896, 897, 900], "117": [896, 897, 900], "sentinel": [896, 901, 904, 909, 912], "unsign": [896, 913, 916, 921, 924], "degre": [896, 917, 920, 925, 928], "bessel": [896, 917, 920, 925, 928], "8164966": [896, 917, 920], "varianc": [896, 925, 928], "unbias": [896, 925, 928], "simplicit": [929, 930, 933], "autom": 940, "grow": 940, "ai": 940, "got": 940, "colab": 940, "sharp": 940, "weekli": 940, "event": 940, "immedi": 940, "favorit": 940, "jax_concat": 940, "tf_concat": 940, "np_concat": 940, "mx_concat": 940, "torch_concat": 940, "prompt": 940, "get_devic": 940, "reduce_prod": 940, "gradient_imag": 940, "linalg": 940, "bilinear_resampl": 940, "stack_imag": 940, "neural_net": 940, "ecosystem": [940, 946], "popular": [940, 946], "acceler": 940, "articl": 940, "lenton2021ivi": 940, "inter": 940, "lenton": 940, "daniel": 940, "pardo": 940, "fabio": 940, "falck": 940, "fabian": 940, "jame": 940, "stephen": 940, "clark": 940, "ronald": 940, "journal": 940, "arxiv": 940, "preprint": 940, "2102": 940, "02886": 940, "2021": 940, "add_array_spec": 943, "fn_array_spec": 943, "geglu": 948, "native_modul": [951, 952], "native_module_class": [951, 952], "firstlayersiren": 953, "kaimingnorm": 953, "negative_slop": 953, "Ones": 953, "siren": 953, "w0": [953, 957], "filter_s": [959, 960, 961], "1d": [959, 960, 961], "conv1dtranspos": 959, "filter_shap": [959, 962, 963, 964, 965, 966], "conv2dtranspos": 959, "conv3dtranspos": 959, "depthwiseconv2d": 959, "num_channel": [959, 966], "bernoul": [959, 967], "num_lay": [959, 968], "return_sequ": [959, 968], "return_st": [959, 968], "get_initial_st": [959, 968], "dens": [959, 969], "multiheadattent": 959, "query_dim": [959, 970], "head_dim": [959, 970], "dropout_r": [959, 970], "context_dim": [959, 970], "with_to_q_fn": [959, 970], "with_to_kv_fn": [959, 970], "with_to_out_fn": [959, 970], "build_mod": [959, 970, 971, 972], "on_init": [959, 970, 971, 972], "__call__": [959, 970, 971, 972], "store_var": [971, 972], "arg_stateful_idx": [971, 972], "kwarg_stateful_idx": [971, 972], "fallback_to_non_compil": [971, 972, 975, 979], "with_partial_v": [971, 972], "initialz": [971, 972], "from_cal": [971, 972], "check_submod_ret": [971, 972], "get_mod_kei": [971, 972], "top_mod": [971, 972], "mod_depth": [971, 972], "mod_height": [971, 972], "mod_with_top_mod_key_chain": [971, 972], "save_weight": [971, 972], "weights_path": [971, 972], "show_mod_in_top_mod": [971, 972], "upper_depth": [971, 972], "lower_depth": [971, 972], "show_structur": [971, 972], "show_v_in_top_v": [971, 972], "sub_mod": [971, 972], "show_v": [971, 972], "track_submod_call_ord": [971, 972], "track_submod_ret": [971, 972], "v_with_top_v_key_chain": [971, 972], "layernorm": 973, "normalized_shap": [973, 974], "elementwise_affin": [973, 974], "trail": [973, 974], "affin": [973, 974], "0001": [975, 976, 977], "init_on_first_step": [975, 979], "ignore_miss": [975, 979], "overriden": [975, 979], "sgd": 975, "stochast": [975, 980], "sub_modul": [981, 982]}, "objects": {"ivy.array": [[21, 0, 0, "-", "activations"], [23, 0, 0, "-", "conversions"], [28, 0, 0, "-", "creation"], [30, 0, 0, "-", "data_type"], [32, 0, 0, "-", "device"], [34, 0, 0, "-", "elementwise"], [36, 0, 0, "-", "general"], [38, 0, 0, "-", "gradients"], [40, 0, 0, "-", "image"], [42, 0, 0, "-", "layers"], [44, 0, 0, "-", "linear_algebra"], [46, 0, 0, "-", "losses"], [48, 0, 0, "-", "manipulation"], [50, 0, 0, "-", "norms"], [52, 0, 0, "-", "random"], [54, 0, 0, "-", "searching"], [56, 0, 0, "-", "set"], [58, 0, 0, "-", "sorting"], [60, 0, 0, "-", "statistical"], [62, 0, 0, "-", "utility"], [64, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[22, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[22, 2, 1, "", "softplus"]], "ivy.array.array_methods": [[324, 3, 1, "", "abs"], [329, 3, 1, "", "acos"], [333, 3, 1, "", "acosh"], [636, 3, 1, "", "adam_step"], [337, 3, 1, "", "add"], [931, 3, 1, "", "all"], [562, 3, 1, "", "all_equal"], [936, 3, 1, "", "any"], [887, 3, 1, "", "argsort"], [175, 3, 1, "", "asarray"], [342, 3, 1, "", "asin"], [346, 3, 1, "", "asinh"], [350, 3, 1, "", "atan"], [354, 3, 1, "", "atan2"], [358, 3, 1, "", "atanh"], [758, 3, 1, "", "binary_cross_entropy"], [362, 3, 1, "", "bitwise_and"], [366, 3, 1, "", "bitwise_invert"], [370, 3, 1, "", "bitwise_left_shift"], [374, 3, 1, "", "bitwise_or"], [378, 3, 1, "", "bitwise_right_shift"], [382, 3, 1, "", "bitwise_xor"], [248, 3, 1, "", "can_cast"], [386, 3, 1, "", "ceil"], [686, 3, 1, "", "cholesky"], [774, 3, 1, "", "clip"], [779, 3, 1, "", "concat"], [783, 3, 1, "", "constant_pad"], [390, 3, 1, "", "cos"], [394, 3, 1, "", "cosh"], [691, 3, 1, "", "cross"], [763, 3, 1, "", "cross_entropy"], [694, 3, 1, "", "det"], [697, 3, 1, "", "diagonal"], [398, 3, 1, "", "divide"], [700, 3, 1, "", "eigh"], [703, 3, 1, "", "eigvalsh"], [898, 3, 1, "", "einsum"], [181, 3, 1, "", "empty_like"], [403, 3, 1, "", "equal"], [407, 3, 1, "", "erf"], [411, 3, 1, "", "exp"], [787, 3, 1, "", "expand_dims"], [415, 3, 1, "", "expm1"], [791, 3, 1, "", "flip"], [419, 3, 1, "", "floor"], [423, 3, 1, "", "floor_divide"], [189, 3, 1, "", "from_dlpack"], [195, 3, 1, "", "full_like"], [590, 3, 1, "", "gather_nd"], [427, 3, 1, "", "greater"], [431, 3, 1, "", "greater_equal"], [706, 3, 1, "", "inv"], [435, 3, 1, "", "isfinite"], [439, 3, 1, "", "isinf"], [443, 3, 1, "", "isnan"], [856, 3, 1, "", "layer_norm"], [447, 3, 1, "", "less"], [451, 3, 1, "", "less_equal"], [455, 3, 1, "", "log"], [459, 3, 1, "", "log10"], [463, 3, 1, "", "log1p"], [467, 3, 1, "", "log2"], [471, 3, 1, "", "logaddexp"], [475, 3, 1, "", "logical_and"], [479, 3, 1, "", "logical_not"], [483, 3, 1, "", "logical_or"], [487, 3, 1, "", "logical_xor"], [709, 3, 1, "", "matmul"], [713, 3, 1, "", "matrix_norm"], [717, 3, 1, "", "matrix_rank"], [720, 3, 1, "", "matrix_transpose"], [902, 3, 1, "", "max"], [906, 3, 1, "", "mean"], [206, 3, 1, "", "meshgrid"], [910, 3, 1, "", "min"], [493, 3, 1, "", "multiply"], [211, 3, 1, "", "native_array"], [498, 3, 1, "", "negative"], [502, 3, 1, "", "not_equal"], [219, 3, 1, "", "ones_like"], [723, 3, 1, "", "outer"], [795, 3, 1, "", "permute_dims"], [726, 3, 1, "", "pinv"], [506, 3, 1, "", "positive"], [510, 3, 1, "", "pow"], [914, 3, 1, "", "prod"], [729, 3, 1, "", "qr"], [514, 3, 1, "", "remainder"], [799, 3, 1, "", "repeat"], [803, 3, 1, "", "reshape"], [807, 3, 1, "", "roll"], [518, 3, 1, "", "round"], [522, 3, 1, "", "sign"], [526, 3, 1, "", "sin"], [530, 3, 1, "", "sinh"], [162, 3, 1, "", "softplus"], [733, 3, 1, "", "solve"], [892, 3, 1, "", "sort"], [768, 3, 1, "", "sparse_cross_entropy"], [534, 3, 1, "", "sqrt"], [538, 3, 1, "", "square"], [813, 3, 1, "", "squeeze"], [817, 3, 1, "", "stack"], [918, 3, 1, "", "std"], [543, 3, 1, "", "subtract"], [922, 3, 1, "", "sum"], [736, 3, 1, "", "svd"], [739, 3, 1, "", "svdvals"], [821, 3, 1, "", "swapaxes"], [548, 3, 1, "", "tan"], [553, 3, 1, "", "tanh"], [742, 3, 1, "", "tensordot"], [825, 3, 1, "", "tile"], [745, 3, 1, "", "trace"], [225, 3, 1, "", "tril"], [230, 3, 1, "", "triu"], [557, 3, 1, "", "trunc"], [880, 3, 1, "", "unique_counts"], [926, 3, 1, "", "var"], [748, 3, 1, "", "vecdot"], [751, 3, 1, "", "vector_norm"], [754, 3, 1, "", "vector_to_skew_symmetric_matrix"], [829, 3, 1, "", "zero_pad"], [238, 3, 1, "", "zeros_like"]], "ivy.array.conversions": [[24, 3, 1, "", "args_to_ivy"], [25, 3, 1, "", "args_to_native"], [26, 3, 1, "", "to_ivy"], [27, 3, 1, "", "to_native"]], "ivy.array.creation": [[29, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[29, 2, 1, "", "asarray"], [29, 2, 1, "", "empty_like"], [29, 2, 1, "", "from_dlpack"], [29, 2, 1, "", "full_like"], [29, 2, 1, "", "meshgrid"], [29, 2, 1, "", "native_array"], [29, 2, 1, "", "ones_like"], [29, 2, 1, "", "tril"], [29, 2, 1, "", "triu"], [29, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[31, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[31, 2, 1, "", "can_cast"]], "ivy.array.device": [[33, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[35, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[35, 2, 1, "", "abs"], [35, 2, 1, "", "acos"], [35, 2, 1, "", "acosh"], [35, 2, 1, "", "add"], [35, 2, 1, "", "asin"], [35, 2, 1, "", "asinh"], [35, 2, 1, "", "atan"], [35, 2, 1, "", "atan2"], [35, 2, 1, "", "atanh"], [35, 2, 1, "", "bitwise_and"], [35, 2, 1, "", "bitwise_invert"], [35, 2, 1, "", "bitwise_left_shift"], [35, 2, 1, "", "bitwise_or"], [35, 2, 1, "", "bitwise_right_shift"], [35, 2, 1, "", "bitwise_xor"], [35, 2, 1, "", "ceil"], [35, 2, 1, "", "cos"], [35, 2, 1, "", "cosh"], [35, 2, 1, "", "divide"], [35, 2, 1, "", "equal"], [35, 2, 1, "", "erf"], [35, 2, 1, "", "exp"], [35, 2, 1, "", "expm1"], [35, 2, 1, "", "floor"], [35, 2, 1, "", "floor_divide"], [35, 2, 1, "", "greater"], [35, 2, 1, "", "greater_equal"], [35, 2, 1, "", "isfinite"], [35, 2, 1, "", "isinf"], [35, 2, 1, "", "isnan"], [35, 2, 1, "", "less"], [35, 2, 1, "", "less_equal"], [35, 2, 1, "", "log"], [35, 2, 1, "", "log10"], [35, 2, 1, "", "log1p"], [35, 2, 1, "", "log2"], [35, 2, 1, "", "logaddexp"], [35, 2, 1, "", "logical_and"], [35, 2, 1, "", "logical_not"], [35, 2, 1, "", "logical_or"], [35, 2, 1, "", "logical_xor"], [35, 2, 1, "", "multiply"], [35, 2, 1, "", "negative"], [35, 2, 1, "", "not_equal"], [35, 2, 1, "", "positive"], [35, 2, 1, "", "pow"], [35, 2, 1, "", "remainder"], [35, 2, 1, "", "round"], [35, 2, 1, "", "sign"], [35, 2, 1, "", "sin"], [35, 2, 1, "", "sinh"], [35, 2, 1, "", "sqrt"], [35, 2, 1, "", "square"], [35, 2, 1, "", "subtract"], [35, 2, 1, "", "tan"], [35, 2, 1, "", "tanh"], [35, 2, 1, "", "trunc"]], "ivy.array.general": [[37, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[37, 2, 1, "", "all_equal"], [37, 2, 1, "", "gather_nd"]], "ivy.array.gradients": [[39, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[39, 2, 1, "", "adam_step"]], "ivy.array.image": [[41, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[43, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[45, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[45, 2, 1, "", "cholesky"], [45, 2, 1, "", "cross"], [45, 2, 1, "", "det"], [45, 2, 1, "", "diagonal"], [45, 2, 1, "", "eigh"], [45, 2, 1, "", "eigvalsh"], [45, 2, 1, "", "inv"], [45, 2, 1, "", "matmul"], [45, 2, 1, "", "matrix_norm"], [45, 2, 1, "", "matrix_rank"], [45, 2, 1, "", "matrix_transpose"], [45, 2, 1, "", "outer"], [45, 2, 1, "", "pinv"], [45, 2, 1, "", "qr"], [45, 2, 1, "", "solve"], [45, 2, 1, "", "svd"], [45, 2, 1, "", "svdvals"], [45, 2, 1, "", "tensordot"], [45, 2, 1, "", "trace"], [45, 2, 1, "", "vecdot"], [45, 2, 1, "", "vector_norm"], [45, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[47, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[47, 2, 1, "", "binary_cross_entropy"], [47, 2, 1, "", "cross_entropy"], [47, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[49, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[49, 2, 1, "", "clip"], [49, 2, 1, "", "concat"], [49, 2, 1, "", "constant_pad"], [49, 2, 1, "", "expand_dims"], [49, 2, 1, "", "flip"], [49, 2, 1, "", "permute_dims"], [49, 2, 1, "", "repeat"], [49, 2, 1, "", "reshape"], [49, 2, 1, "", "roll"], [49, 2, 1, "", "squeeze"], [49, 2, 1, "", "stack"], [49, 2, 1, "", "swapaxes"], [49, 2, 1, "", "tile"], [49, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[51, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[51, 2, 1, "", "layer_norm"]], "ivy.array.random": [[53, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[55, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[57, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[57, 2, 1, "", "unique_counts"]], "ivy.array.sorting": [[59, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[59, 2, 1, "", "argsort"], [59, 2, 1, "", "sort"]], "ivy.array.statistical": [[61, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[61, 2, 1, "", "einsum"], [61, 2, 1, "", "max"], [61, 2, 1, "", "mean"], [61, 2, 1, "", "min"], [61, 2, 1, "", "prod"], [61, 2, 1, "", "std"], [61, 2, 1, "", "sum"], [61, 2, 1, "", "var"]], "ivy.array.utility": [[63, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[63, 2, 1, "", "all"], [63, 2, 1, "", "any"]], "ivy.array.wrapping": [[65, 3, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [145, 0, 0, "-", "func_wrapper"], [943, 0, 0, "-", "inspection"], [947, 0, 0, "-", "stateful"], [984, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [1, 3, 1, "", "choose_random_backend"], [2, 3, 1, "", "clear_backend_stack"], [3, 3, 1, "", "current_backend"], [4, 3, 1, "", "get_backend"], [5, 3, 1, "", "set_backend"], [6, 3, 1, "", "try_import_ivy_jax"], [7, 3, 1, "", "try_import_ivy_mxnet"], [8, 3, 1, "", "try_import_ivy_numpy"], [9, 3, 1, "", "try_import_ivy_tf"], [10, 3, 1, "", "try_import_ivy_torch"], [11, 3, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 2, 1, "", "__init__"]], "ivy.container": [[66, 0, 0, "-", "activations"], [68, 0, 0, "-", "base"], [70, 0, 0, "-", "container"], [73, 0, 0, "-", "creation"], [75, 0, 0, "-", "data_type"], [77, 0, 0, "-", "device"], [79, 0, 0, "-", "elementwise"], [81, 0, 0, "-", "general"], [83, 0, 0, "-", "gradients"], [85, 0, 0, "-", "image"], [87, 0, 0, "-", "layers"], [89, 0, 0, "-", "linear_algebra"], [91, 0, 0, "-", "losses"], [93, 0, 0, "-", "manipulation"], [95, 0, 0, "-", "norms"], [97, 0, 0, "-", "random"], [99, 0, 0, "-", "searching"], [101, 0, 0, "-", "set"], [103, 0, 0, "-", "sorting"], [105, 0, 0, "-", "statistical"], [107, 0, 0, "-", "utility"], [109, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[67, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[67, 2, 1, "", "softplus"], [67, 2, 1, "", "static_softplus"]], "ivy.container.base": [[69, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[69, 2, 1, "", "__getitem__"], [69, 2, 1, "", "__init__"], [69, 2, 1, "", "__setitem__"], [69, 2, 1, "", "all_false"], [69, 2, 1, "", "all_key_chains"], [69, 2, 1, "", "all_true"], [69, 2, 1, "", "arrays_as_lists"], [69, 2, 1, "", "as_arrays"], [69, 2, 1, "", "as_bools"], [69, 2, 1, "", "as_ones"], [69, 2, 1, "", "as_random_uniform"], [69, 2, 1, "", "as_variables"], [69, 2, 1, "", "as_zeros"], [69, 2, 1, "", "assert_contains_sub_container"], [69, 2, 1, "", "assert_contains_sub_structure"], [69, 2, 1, "", "assert_identical"], [69, 2, 1, "", "assert_identical_structure"], [69, 2, 1, "", "at_key_chain"], [69, 2, 1, "", "at_key_chains"], [69, 2, 1, "", "at_keys"], [69, 2, 1, "", "clip"], [69, 2, 1, "", "combine"], [69, 2, 1, "", "common_key_chains"], [69, 4, 1, "", "config"], [69, 2, 1, "", "contains_sub_container"], [69, 2, 1, "", "contains_sub_structure"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "create_if_absent"], [69, 2, 1, "", "cutoff_at_depth"], [69, 2, 1, "", "cutoff_at_height"], [69, 2, 1, "", "deep_copy"], [69, 4, 1, "", "dev"], [69, 2, 1, "", "dev_clone"], [69, 2, 1, "", "dev_dist"], [69, 4, 1, "", "dev_str"], [69, 2, 1, "", "diff"], [69, 2, 1, "", "dtype"], [69, 2, 1, "", "einops_rearrange"], [69, 2, 1, "", "einops_reduce"], [69, 2, 1, "", "einops_repeat"], [69, 2, 1, "", "find_sub_container"], [69, 2, 1, "", "find_sub_structure"], [69, 2, 1, "", "flatten_key_chain"], [69, 2, 1, "", "flatten_key_chains"], [69, 2, 1, "", "format_key_chains"], [69, 2, 1, "", "from_disk_as_hdf5"], [69, 2, 1, "", "from_disk_as_json"], [69, 2, 1, "", "from_disk_as_pickled"], [69, 2, 1, "", "from_flat_list"], [69, 2, 1, "", "from_numpy"], [69, 2, 1, "", "gather"], [69, 2, 1, "", "gather_nd"], [69, 2, 1, "", "h5_file_size"], [69, 2, 1, "", "handle_inplace"], [69, 2, 1, "", "has_key"], [69, 2, 1, "", "has_key_chain"], [69, 2, 1, "", "has_nans"], [69, 2, 1, "", "identical"], [69, 2, 1, "", "identical_array_shapes"], [69, 2, 1, "", "identical_configs"], [69, 2, 1, "", "identical_structure"], [69, 2, 1, "", "if_exists"], [69, 2, 1, "", "inplace_update"], [69, 4, 1, "", "ivy"], [69, 2, 1, "", "key_chains_containing"], [69, 2, 1, "", "list_join"], [69, 2, 1, "", "list_stack"], [69, 2, 1, "", "map"], [69, 2, 1, "", "map_conts"], [69, 2, 1, "", "matrix_norm"], [69, 4, 1, "", "max_depth"], [69, 2, 1, "", "maximum"], [69, 2, 1, "", "minimum"], [69, 2, 1, "", "multi_map"], [69, 2, 1, "", "multi_map_in_static_method"], [69, 2, 1, "", "num_arrays"], [69, 2, 1, "", "overwrite_at_key_chain"], [69, 2, 1, "", "overwrite_at_key_chains"], [69, 2, 1, "", "prune_empty"], [69, 2, 1, "", "prune_key_chain"], [69, 2, 1, "", "prune_key_chains"], [69, 2, 1, "", "prune_key_from_key_chains"], [69, 2, 1, "", "prune_keys"], [69, 2, 1, "", "prune_keys_from_key_chains"], [69, 2, 1, "", "reduce"], [69, 2, 1, "", "remove_key_length_limit"], [69, 2, 1, "", "remove_print_limit"], [69, 2, 1, "", "reshape_like"], [69, 2, 1, "", "restructure"], [69, 2, 1, "", "restructure_key_chains"], [69, 2, 1, "", "set_at_key_chain"], [69, 2, 1, "", "set_at_key_chains"], [69, 2, 1, "", "set_at_keys"], [69, 2, 1, "", "set_framework"], [69, 2, 1, "", "set_ivy_backend"], [69, 4, 1, "", "shape"], [69, 4, 1, "", "shapes"], [69, 2, 1, "", "show"], [69, 2, 1, "", "show_sub_container"], [69, 2, 1, "", "shuffle"], [69, 2, 1, "", "shuffle_h5_file"], [69, 2, 1, "", "size_ordered_arrays"], [69, 2, 1, "", "slice_keys"], [69, 2, 1, "", "slice_via_key"], [69, 2, 1, "", "sort_by_key"], [69, 2, 1, "", "split"], [69, 2, 1, "", "stop_gradients"], [69, 2, 1, "", "structural_diff"], [69, 2, 1, "", "to_device"], [69, 2, 1, "", "to_dict"], [69, 2, 1, "", "to_disk_as_hdf5"], [69, 2, 1, "", "to_disk_as_json"], [69, 2, 1, "", "to_disk_as_pickled"], [69, 2, 1, "", "to_flat_list"], [69, 2, 1, "", "to_iterator"], [69, 2, 1, "", "to_iterator_keys"], [69, 2, 1, "", "to_iterator_values"], [69, 2, 1, "", "to_ivy"], [69, 2, 1, "", "to_jsonable"], [69, 2, 1, "", "to_list"], [69, 2, 1, "", "to_multi_dev"], [69, 2, 1, "", "to_native"], [69, 2, 1, "", "to_numpy"], [69, 2, 1, "", "to_raw"], [69, 2, 1, "", "trim_key"], [69, 2, 1, "", "try_kc"], [69, 2, 1, "", "unify"], [69, 2, 1, "", "unstack"], [69, 2, 1, "", "update_config"], [69, 2, 1, "", "vector_norm"], [69, 2, 1, "", "with_default_key_color"], [69, 2, 1, "", "with_entries_as_lists"], [69, 2, 1, "", "with_ivy_backend"], [69, 2, 1, "", "with_key_length_limit"], [69, 2, 1, "", "with_print_indent"], [69, 2, 1, "", "with_print_limit"], [69, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[71, 1, 1, "", "Container"], [72, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[71, 2, 1, "", "__add__"], [71, 2, 1, "", "__init__"], [71, 2, 1, "", "__radd__"], [71, 2, 1, "", "arange"], [71, 2, 1, "", "arg_info"], [71, 2, 1, "", "arg_names"], [71, 2, 1, "", "argmax"], [71, 2, 1, "", "argmin"], [71, 2, 1, "", "array"], [71, 2, 1, "", "array_equal"], [71, 2, 1, "", "arrays_equal"], [71, 2, 1, "", "as_ivy_dev"], [71, 2, 1, "", "as_ivy_dtype"], [71, 2, 1, "", "as_native_dev"], [71, 2, 1, "", "as_native_dtype"], [71, 2, 1, "", "assert_supports_inplace"], [71, 2, 1, "", "astype"], [71, 2, 1, "", "broadcast_arrays"], [71, 2, 1, "", "broadcast_to"], [71, 2, 1, "", "cache_fn"], [71, 2, 1, "", "clear_mem_on_dev"], [71, 2, 1, "", "clip_matrix_norm"], [71, 2, 1, "", "closest_valid_dtype"], [71, 2, 1, "", "container_types"], [71, 2, 1, "", "conv1d"], [71, 2, 1, "", "conv1d_transpose"], [71, 2, 1, "", "conv2d"], [71, 2, 1, "", "conv2d_transpose"], [71, 2, 1, "", "conv3d"], [71, 2, 1, "", "conv3d_transpose"], [71, 2, 1, "", "copy_array"], [71, 2, 1, "", "cross"], [71, 2, 1, "", "cumprod"], [71, 2, 1, "", "cumsum"], [71, 2, 1, "", "current_backend"], [71, 2, 1, "", "current_backend_str"], [71, 2, 1, "", "default"], [71, 2, 1, "", "default_device"], [71, 2, 1, "", "default_dtype"], [71, 2, 1, "", "default_float_dtype"], [71, 2, 1, "", "default_int_dtype"], [71, 2, 1, "", "depthwise_conv2d"], [71, 2, 1, "", "det"], [71, 2, 1, "", "dev_clone_array"], [71, 2, 1, "", "dev_clone_iter"], [71, 2, 1, "", "dev_clone_nest"], [71, 2, 1, "", "dev_dist_array"], [71, 2, 1, "", "dev_dist_iter"], [71, 2, 1, "", "dev_dist_nest"], [71, 2, 1, "", "dev_unify"], [71, 2, 1, "", "dev_unify_array"], [71, 2, 1, "", "dev_unify_iter"], [71, 2, 1, "", "dev_unify_nest"], [71, 2, 1, "", "dev_util"], [71, 2, 1, "", "diagonal"], [71, 2, 1, "", "dropout"], [71, 2, 1, "", "dtype_bits"], [71, 2, 1, "", "eigh"], [71, 2, 1, "", "eigvalsh"], [71, 2, 1, "", "empty"], [71, 2, 1, "", "execute_with_gradients"], [71, 2, 1, "", "exists"], [71, 2, 1, "", "eye"], [71, 2, 1, "", "finfo"], [71, 2, 1, "", "floormod"], [71, 2, 1, "", "fourier_encode"], [71, 2, 1, "", "full"], [71, 2, 1, "", "function_supported_dtypes"], [71, 2, 1, "", "function_unsupported_dtypes"], [71, 2, 1, "", "gelu"], [71, 2, 1, "", "get_all_arrays_in_memory"], [71, 2, 1, "", "get_all_ivy_arrays_on_dev"], [71, 2, 1, "", "get_min_base"], [71, 2, 1, "", "get_min_denominator"], [71, 2, 1, "", "get_num_dims"], [71, 2, 1, "", "get_referrers_recursive"], [71, 2, 1, "", "gpu_is_available"], [71, 2, 1, "", "handle_nestable"], [71, 2, 1, "", "handle_out_argument"], [71, 2, 1, "", "iinfo"], [71, 2, 1, "", "indices_where"], [71, 2, 1, "", "infer_device"], [71, 2, 1, "", "infer_dtype"], [71, 2, 1, "", "inplace_arrays_supported"], [71, 2, 1, "", "inplace_decrement"], [71, 2, 1, "", "inplace_increment"], [71, 2, 1, "", "inplace_variables_supported"], [71, 2, 1, "", "inputs_to_native_arrays"], [71, 2, 1, "", "inv"], [71, 2, 1, "", "invalid_dtype"], [71, 2, 1, "", "is_float_dtype"], [71, 2, 1, "", "is_int_dtype"], [71, 2, 1, "", "is_ivy_container"], [71, 2, 1, "", "leaky_relu"], [71, 2, 1, "", "linear"], [71, 2, 1, "", "linspace"], [71, 2, 1, "", "logspace"], [71, 2, 1, "", "lstm_update"], [71, 2, 1, "", "match_kwargs"], [71, 2, 1, "", "matrix_power"], [71, 2, 1, "", "matrix_rank"], [71, 2, 1, "", "matrix_transpose"], [71, 2, 1, "", "multi_head_attention"], [71, 2, 1, "", "multinomial"], [71, 2, 1, "", "multiprocessing"], [71, 2, 1, "", "nonzero"], [71, 2, 1, "", "num_arrays_in_memory"], [71, 2, 1, "", "num_cpu_cores"], [71, 2, 1, "", "num_gpus"], [71, 2, 1, "", "num_ivy_arrays_on_dev"], [71, 2, 1, "", "one_hot"], [71, 2, 1, "", "ones"], [71, 2, 1, "", "outer"], [71, 2, 1, "", "outputs_to_ivy_arrays"], [71, 2, 1, "", "percent_used_mem_on_dev"], [71, 2, 1, "", "pinv"], [71, 2, 1, "", "print_all_arrays_in_memory"], [71, 2, 1, "", "print_all_ivy_arrays_on_dev"], [71, 2, 1, "", "promote_types"], [71, 2, 1, "", "qr"], [71, 2, 1, "", "queue_timeout"], [71, 2, 1, "", "randint"], [71, 2, 1, "", "random_normal"], [71, 2, 1, "", "relu"], [71, 2, 1, "", "result_type"], [71, 2, 1, "", "scaled_dot_product_attention"], [71, 2, 1, "", "scatter_flat"], [71, 2, 1, "", "scatter_nd"], [71, 2, 1, "", "seed"], [71, 2, 1, "", "set_default_device"], [71, 2, 1, "", "set_default_dtype"], [71, 2, 1, "", "set_default_float_dtype"], [71, 2, 1, "", "set_default_int_dtype"], [71, 2, 1, "", "set_min_base"], [71, 2, 1, "", "set_min_denominator"], [71, 2, 1, "", "set_queue_timeout"], [71, 2, 1, "", "set_split_factor"], [71, 2, 1, "", "set_tmp_dir"], [71, 2, 1, "", "set_with_grads"], [71, 2, 1, "", "shape_to_tuple"], [71, 2, 1, "", "sigmoid"], [71, 2, 1, "", "slogdet"], [71, 2, 1, "", "softmax"], [71, 2, 1, "", "solve"], [71, 2, 1, "", "split_factor"], [71, 2, 1, "", "split_func_call"], [71, 2, 1, "", "stable_divide"], [71, 2, 1, "", "stable_pow"], [71, 2, 1, "", "static_acos"], [71, 2, 1, "", "static_acosh"], [71, 2, 1, "", "static_arg_info"], [71, 2, 1, "", "static_arg_names"], [71, 2, 1, "", "static_argmax"], [71, 2, 1, "", "static_argmin"], [71, 2, 1, "", "static_array"], [71, 2, 1, "", "static_array_equal"], [71, 2, 1, "", "static_arrays_equal"], [71, 2, 1, "", "static_as_ivy_dev"], [71, 2, 1, "", "static_as_ivy_dtype"], [71, 2, 1, "", "static_as_native_dev"], [71, 2, 1, "", "static_as_native_dtype"], [71, 2, 1, "", "static_asin"], [71, 2, 1, "", "static_asinh"], [71, 2, 1, "", "static_assert_supports_inplace"], [71, 2, 1, "", "static_astype"], [71, 2, 1, "", "static_atan"], [71, 2, 1, "", "static_atan2"], [71, 2, 1, "", "static_atanh"], [71, 2, 1, "", "static_bitwise_and"], [71, 2, 1, "", "static_bitwise_invert"], [71, 2, 1, "", "static_bitwise_left_shift"], [71, 2, 1, "", "static_bitwise_or"], [71, 2, 1, "", "static_bitwise_right_shift"], [71, 2, 1, "", "static_bitwise_xor"], [71, 2, 1, "", "static_broadcast_arrays"], [71, 2, 1, "", "static_broadcast_to"], [71, 2, 1, "", "static_cache_fn"], [71, 2, 1, "", "static_ceil"], [71, 2, 1, "", "static_clear_mem_on_dev"], [71, 2, 1, "", "static_clip_matrix_norm"], [71, 2, 1, "", "static_clip_vector_norm"], [71, 2, 1, "", "static_closest_valid_dtype"], [71, 2, 1, "", "static_concat"], [71, 2, 1, "", "static_constant_pad"], [71, 2, 1, "", "static_container_types"], [71, 2, 1, "", "static_conv1d"], [71, 2, 1, "", "static_conv1d_transpose"], [71, 2, 1, "", "static_conv2d"], [71, 2, 1, "", "static_conv2d_transpose"], [71, 2, 1, "", "static_conv3d"], [71, 2, 1, "", "static_conv3d_transpose"], [71, 2, 1, "", "static_copy_array"], [71, 2, 1, "", "static_cos"], [71, 2, 1, "", "static_cosh"], [71, 2, 1, "", "static_cross"], [71, 2, 1, "", "static_cumprod"], [71, 2, 1, "", "static_cumsum"], [71, 2, 1, "", "static_current_backend"], [71, 2, 1, "", "static_current_backend_str"], [71, 2, 1, "", "static_default"], [71, 2, 1, "", "static_default_device"], [71, 2, 1, "", "static_default_dtype"], [71, 2, 1, "", "static_default_float_dtype"], [71, 2, 1, "", "static_default_int_dtype"], [71, 2, 1, "", "static_depthwise_conv2d"], [71, 2, 1, "", "static_det"], [71, 2, 1, "", "static_dev"], [71, 2, 1, "", "static_dev_clone"], [71, 2, 1, "", "static_dev_clone_array"], [71, 2, 1, "", "static_dev_clone_iter"], [71, 2, 1, "", "static_dev_clone_nest"], [71, 2, 1, "", "static_dev_dist"], [71, 2, 1, "", "static_dev_dist_array"], [71, 2, 1, "", "static_dev_dist_iter"], [71, 2, 1, "", "static_dev_dist_nest"], [71, 2, 1, "", "static_dev_unify"], [71, 2, 1, "", "static_dev_unify_array"], [71, 2, 1, "", "static_dev_unify_iter"], [71, 2, 1, "", "static_dev_unify_nest"], [71, 2, 1, "", "static_dev_util"], [71, 2, 1, "", "static_diagonal"], [71, 2, 1, "", "static_dropout"], [71, 2, 1, "", "static_dtype"], [71, 2, 1, "", "static_dtype_bits"], [71, 2, 1, "", "static_eigh"], [71, 2, 1, "", "static_eigvalsh"], [71, 2, 1, "", "static_einops_rearrange"], [71, 2, 1, "", "static_einops_reduce"], [71, 2, 1, "", "static_einops_repeat"], [71, 2, 1, "", "static_einsum"], [71, 2, 1, "", "static_empty"], [71, 2, 1, "", "static_equal"], [71, 2, 1, "", "static_erf"], [71, 2, 1, "", "static_execute_with_gradients"], [71, 2, 1, "", "static_exists"], [71, 2, 1, "", "static_exp"], [71, 2, 1, "", "static_expand_dims"], [71, 2, 1, "", "static_expm1"], [71, 2, 1, "", "static_finfo"], [71, 2, 1, "", "static_flip"], [71, 2, 1, "", "static_floor"], [71, 2, 1, "", "static_floor_divide"], [71, 2, 1, "", "static_floormod"], [71, 2, 1, "", "static_fourier_encode"], [71, 2, 1, "", "static_full"], [71, 2, 1, "", "static_function_supported_dtypes"], [71, 2, 1, "", "static_function_unsupported_dtypes"], [71, 2, 1, "", "static_gather"], [71, 2, 1, "", "static_gelu"], [71, 2, 1, "", "static_get_all_arrays_in_memory"], [71, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [71, 2, 1, "", "static_get_min_base"], [71, 2, 1, "", "static_get_min_denominator"], [71, 2, 1, "", "static_get_num_dims"], [71, 2, 1, "", "static_get_referrers_recursive"], [71, 2, 1, "", "static_gpu_is_available"], [71, 2, 1, "", "static_greater"], [71, 2, 1, "", "static_greater_equal"], [71, 2, 1, "", "static_handle_nestable"], [71, 2, 1, "", "static_handle_out_argument"], [71, 2, 1, "", "static_has_nans"], [71, 2, 1, "", "static_iinfo"], [71, 2, 1, "", "static_indices_where"], [71, 2, 1, "", "static_infer_device"], [71, 2, 1, "", "static_infer_dtype"], [71, 2, 1, "", "static_inplace_arrays_supported"], [71, 2, 1, "", "static_inplace_decrement"], [71, 2, 1, "", "static_inplace_increment"], [71, 2, 1, "", "static_inplace_update"], [71, 2, 1, "", "static_inplace_variables_supported"], [71, 2, 1, "", "static_inputs_to_native_arrays"], [71, 2, 1, "", "static_inv"], [71, 2, 1, "", "static_invalid_dtype"], [71, 2, 1, "", "static_is_array"], [71, 2, 1, "", "static_is_float_dtype"], [71, 2, 1, "", "static_is_int_dtype"], [71, 2, 1, "", "static_is_ivy_array"], [71, 2, 1, "", "static_is_ivy_container"], [71, 2, 1, "", "static_is_native_array"], [71, 2, 1, "", "static_isfinite"], [71, 2, 1, "", "static_isinf"], [71, 2, 1, "", "static_isnan"], [71, 2, 1, "", "static_layer_norm"], [71, 2, 1, "", "static_leaky_relu"], [71, 2, 1, "", "static_less"], [71, 2, 1, "", "static_less_equal"], [71, 2, 1, "", "static_linear"], [71, 2, 1, "", "static_log"], [71, 2, 1, "", "static_log10"], [71, 2, 1, "", "static_log1p"], [71, 2, 1, "", "static_log2"], [71, 2, 1, "", "static_logaddexp"], [71, 2, 1, "", "static_logical_and"], [71, 2, 1, "", "static_logical_not"], [71, 2, 1, "", "static_logical_or"], [71, 2, 1, "", "static_logical_xor"], [71, 2, 1, "", "static_lstm_update"], [71, 2, 1, "", "static_match_kwargs"], [71, 2, 1, "", "static_matmul"], [71, 2, 1, "", "static_matrix_norm"], [71, 2, 1, "", "static_matrix_power"], [71, 2, 1, "", "static_matrix_rank"], [71, 2, 1, "", "static_matrix_transpose"], [71, 2, 1, "", "static_max"], [71, 2, 1, "", "static_maximum"], [71, 2, 1, "", "static_mean"], [71, 2, 1, "", "static_min"], [71, 2, 1, "", "static_minimum"], [71, 2, 1, "", "static_multi_head_attention"], [71, 2, 1, "", "static_multinomial"], [71, 2, 1, "", "static_multiprocessing"], [71, 2, 1, "", "static_negative"], [71, 2, 1, "", "static_nonzero"], [71, 2, 1, "", "static_not_equal"], [71, 2, 1, "", "static_num_arrays_in_memory"], [71, 2, 1, "", "static_num_cpu_cores"], [71, 2, 1, "", "static_num_gpus"], [71, 2, 1, "", "static_num_ivy_arrays_on_dev"], [71, 2, 1, "", "static_one_hot"], [71, 2, 1, "", "static_outer"], [71, 2, 1, "", "static_outputs_to_ivy_arrays"], [71, 2, 1, "", "static_percent_used_mem_on_dev"], [71, 2, 1, "", "static_permute_dims"], [71, 2, 1, "", "static_pinv"], [71, 2, 1, "", "static_positive"], [71, 2, 1, "", "static_pow"], [71, 2, 1, "", "static_print_all_arrays_in_memory"], [71, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [71, 2, 1, "", "static_prod"], [71, 2, 1, "", "static_promote_types"], [71, 2, 1, "", "static_qr"], [71, 2, 1, "", "static_queue_timeout"], [71, 2, 1, "", "static_random_normal"], [71, 2, 1, "", "static_relu"], [71, 2, 1, "", "static_remainder"], [71, 2, 1, "", "static_repeat"], [71, 2, 1, "", "static_reshape"], [71, 2, 1, "", "static_result_type"], [71, 2, 1, "", "static_round"], [71, 2, 1, "", "static_scaled_dot_product_attention"], [71, 2, 1, "", "static_scatter_flat"], [71, 2, 1, "", "static_scatter_nd"], [71, 2, 1, "", "static_seed"], [71, 2, 1, "", "static_set_default_device"], [71, 2, 1, "", "static_set_default_dtype"], [71, 2, 1, "", "static_set_default_float_dtype"], [71, 2, 1, "", "static_set_default_int_dtype"], [71, 2, 1, "", "static_set_min_base"], [71, 2, 1, "", "static_set_min_denominator"], [71, 2, 1, "", "static_set_queue_timeout"], [71, 2, 1, "", "static_set_split_factor"], [71, 2, 1, "", "static_set_tmp_dir"], [71, 2, 1, "", "static_set_with_grads"], [71, 2, 1, "", "static_shape"], [71, 2, 1, "", "static_shape_to_tuple"], [71, 2, 1, "", "static_shuffle"], [71, 2, 1, "", "static_sigmoid"], [71, 2, 1, "", "static_sign"], [71, 2, 1, "", "static_sin"], [71, 2, 1, "", "static_sinh"], [71, 2, 1, "", "static_slogdet"], [71, 2, 1, "", "static_softmax"], [71, 2, 1, "", "static_solve"], [71, 2, 1, "", "static_split"], [71, 2, 1, "", "static_split_factor"], [71, 2, 1, "", "static_split_func_call"], [71, 2, 1, "", "static_sqrt"], [71, 2, 1, "", "static_square"], [71, 2, 1, "", "static_squeeze"], [71, 2, 1, "", "static_stable_divide"], [71, 2, 1, "", "static_stable_pow"], [71, 2, 1, "", "static_stack"], [71, 2, 1, "", "static_std"], [71, 2, 1, "", "static_stop_gradient"], [71, 2, 1, "", "static_sum"], [71, 2, 1, "", "static_supports_inplace"], [71, 2, 1, "", "static_svd"], [71, 2, 1, "", "static_svdvals"], [71, 2, 1, "", "static_swapaxes"], [71, 2, 1, "", "static_tensordot"], [71, 2, 1, "", "static_tile"], [71, 2, 1, "", "static_tmp_dir"], [71, 2, 1, "", "static_to_device"], [71, 2, 1, "", "static_to_list"], [71, 2, 1, "", "static_to_native_arrays_and_back"], [71, 2, 1, "", "static_to_numpy"], [71, 2, 1, "", "static_to_scalar"], [71, 2, 1, "", "static_total_mem_on_dev"], [71, 2, 1, "", "static_tpu_is_available"], [71, 2, 1, "", "static_trace"], [71, 2, 1, "", "static_trunc"], [71, 2, 1, "", "static_try_else_none"], [71, 2, 1, "", "static_type_promote_arrays"], [71, 2, 1, "", "static_unique_all"], [71, 2, 1, "", "static_unique_inverse"], [71, 2, 1, "", "static_unique_values"], [71, 2, 1, "", "static_unset_default_device"], [71, 2, 1, "", "static_unset_default_dtype"], [71, 2, 1, "", "static_unset_default_float_dtype"], [71, 2, 1, "", "static_unset_default_int_dtype"], [71, 2, 1, "", "static_unset_with_grads"], [71, 2, 1, "", "static_unstack"], [71, 2, 1, "", "static_used_mem_on_dev"], [71, 2, 1, "", "static_valid_dtype"], [71, 2, 1, "", "static_value_is_nan"], [71, 2, 1, "", "static_var"], [71, 2, 1, "", "static_variable"], [71, 2, 1, "", "static_variable_data"], [71, 2, 1, "", "static_vecdot"], [71, 2, 1, "", "static_vector_norm"], [71, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [71, 2, 1, "", "static_where"], [71, 2, 1, "", "static_with_grads"], [71, 2, 1, "", "static_zero_pad"], [71, 2, 1, "", "stop_gradient"], [71, 2, 1, "", "supports_inplace"], [71, 2, 1, "", "svd"], [71, 2, 1, "", "svdvals"], [71, 2, 1, "", "tensordot"], [71, 2, 1, "", "tmp_dir"], [71, 2, 1, "", "to_native_arrays_and_back"], [71, 2, 1, "", "to_scalar"], [71, 2, 1, "", "total_mem_on_dev"], [71, 2, 1, "", "tpu_is_available"], [71, 2, 1, "", "trace"], [71, 2, 1, "", "try_else_none"], [71, 2, 1, "", "type_promote_arrays"], [71, 2, 1, "", "unique_all"], [71, 2, 1, "", "unique_inverse"], [71, 2, 1, "", "unique_values"], [71, 2, 1, "", "unset_default_device"], [71, 2, 1, "", "unset_default_dtype"], [71, 2, 1, "", "unset_default_float_dtype"], [71, 2, 1, "", "unset_default_int_dtype"], [71, 2, 1, "", "unset_with_grads"], [71, 2, 1, "", "used_mem_on_dev"], [71, 2, 1, "", "valid_dtype"], [71, 2, 1, "", "value_is_nan"], [71, 2, 1, "", "variable"], [71, 2, 1, "", "variable_data"], [71, 2, 1, "", "vecdot"], [71, 2, 1, "", "vector_to_skew_symmetric_matrix"], [71, 2, 1, "", "where"], [71, 2, 1, "", "with_grads"], [71, 2, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "at_dev"], [72, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[325, 3, 1, "", "abs"], [330, 3, 1, "", "acos"], [334, 3, 1, "", "acosh"], [637, 3, 1, "", "adam_step"], [641, 3, 1, "", "adam_update"], [338, 3, 1, "", "add"], [932, 3, 1, "", "all"], [563, 3, 1, "", "all_equal"], [937, 3, 1, "", "any"], [888, 3, 1, "", "argsort"], [176, 3, 1, "", "asarray"], [343, 3, 1, "", "asin"], [347, 3, 1, "", "asinh"], [351, 3, 1, "", "atan"], [355, 3, 1, "", "atan2"], [359, 3, 1, "", "atanh"], [759, 3, 1, "", "binary_cross_entropy"], [363, 3, 1, "", "bitwise_and"], [367, 3, 1, "", "bitwise_invert"], [371, 3, 1, "", "bitwise_left_shift"], [375, 3, 1, "", "bitwise_or"], [379, 3, 1, "", "bitwise_right_shift"], [383, 3, 1, "", "bitwise_xor"], [249, 3, 1, "", "can_cast"], [387, 3, 1, "", "ceil"], [687, 3, 1, "", "cholesky"], [775, 3, 1, "", "clip"], [574, 3, 1, "", "clip_vector_norm"], [780, 3, 1, "", "concat"], [784, 3, 1, "", "constant_pad"], [391, 3, 1, "", "cos"], [395, 3, 1, "", "cosh"], [764, 3, 1, "", "cross_entropy"], [399, 3, 1, "", "divide"], [899, 3, 1, "", "einsum"], [182, 3, 1, "", "empty_like"], [404, 3, 1, "", "equal"], [408, 3, 1, "", "erf"], [412, 3, 1, "", "exp"], [788, 3, 1, "", "expand_dims"], [416, 3, 1, "", "expm1"], [792, 3, 1, "", "flip"], [420, 3, 1, "", "floor"], [424, 3, 1, "", "floor_divide"], [190, 3, 1, "", "from_dlpack"], [196, 3, 1, "", "full_like"], [591, 3, 1, "", "gather_nd"], [646, 3, 1, "", "gradient_descent_update"], [428, 3, 1, "", "greater"], [432, 3, 1, "", "greater_equal"], [650, 3, 1, "", "is_variable"], [436, 3, 1, "", "isfinite"], [440, 3, 1, "", "isinf"], [444, 3, 1, "", "isnan"], [654, 3, 1, "", "lamb_update"], [658, 3, 1, "", "lars_update"], [857, 3, 1, "", "layer_norm"], [448, 3, 1, "", "less"], [452, 3, 1, "", "less_equal"], [456, 3, 1, "", "log"], [460, 3, 1, "", "log10"], [464, 3, 1, "", "log1p"], [468, 3, 1, "", "log2"], [472, 3, 1, "", "logaddexp"], [476, 3, 1, "", "logical_and"], [480, 3, 1, "", "logical_not"], [484, 3, 1, "", "logical_or"], [488, 3, 1, "", "logical_xor"], [710, 3, 1, "", "matmul"], [903, 3, 1, "", "max"], [907, 3, 1, "", "mean"], [207, 3, 1, "", "meshgrid"], [911, 3, 1, "", "min"], [494, 3, 1, "", "multiply"], [212, 3, 1, "", "native_array"], [499, 3, 1, "", "negative"], [503, 3, 1, "", "not_equal"], [220, 3, 1, "", "ones_like"], [662, 3, 1, "", "optimizer_update"], [796, 3, 1, "", "permute_dims"], [507, 3, 1, "", "positive"], [511, 3, 1, "", "pow"], [915, 3, 1, "", "prod"], [866, 3, 1, "", "random_uniform"], [515, 3, 1, "", "remainder"], [800, 3, 1, "", "repeat"], [804, 3, 1, "", "reshape"], [808, 3, 1, "", "roll"], [519, 3, 1, "", "round"], [523, 3, 1, "", "sign"], [527, 3, 1, "", "sin"], [531, 3, 1, "", "sinh"], [163, 3, 1, "", "softplus"], [893, 3, 1, "", "sort"], [769, 3, 1, "", "sparse_cross_entropy"], [535, 3, 1, "", "sqrt"], [539, 3, 1, "", "square"], [814, 3, 1, "", "squeeze"], [818, 3, 1, "", "stack"], [327, 3, 1, "", "static_abs"], [639, 3, 1, "", "static_adam_step"], [643, 3, 1, "", "static_adam_update"], [340, 3, 1, "", "static_add"], [934, 3, 1, "", "static_all"], [565, 3, 1, "", "static_all_equal"], [939, 3, 1, "", "static_any"], [173, 3, 1, "", "static_arange"], [890, 3, 1, "", "static_argsort"], [178, 3, 1, "", "static_asarray"], [761, 3, 1, "", "static_binary_cross_entropy"], [251, 3, 1, "", "static_can_cast"], [689, 3, 1, "", "static_cholesky"], [777, 3, 1, "", "static_clip"], [766, 3, 1, "", "static_cross_entropy"], [401, 3, 1, "", "static_divide"], [184, 3, 1, "", "static_empty_like"], [187, 3, 1, "", "static_eye"], [192, 3, 1, "", "static_from_dlpack"], [198, 3, 1, "", "static_full_like"], [593, 3, 1, "", "static_gather_nd"], [648, 3, 1, "", "static_gradient_descent_update"], [652, 3, 1, "", "static_is_variable"], [656, 3, 1, "", "static_lamb_update"], [660, 3, 1, "", "static_lars_update"], [201, 3, 1, "", "static_linspace"], [204, 3, 1, "", "static_logspace"], [209, 3, 1, "", "static_meshgrid"], [496, 3, 1, "", "static_multiply"], [214, 3, 1, "", "static_native_array"], [217, 3, 1, "", "static_ones"], [222, 3, 1, "", "static_ones_like"], [664, 3, 1, "", "static_optimizer_update"], [863, 3, 1, "", "static_randint"], [868, 3, 1, "", "static_random_uniform"], [810, 3, 1, "", "static_roll"], [165, 3, 1, "", "static_softplus"], [895, 3, 1, "", "static_sort"], [771, 3, 1, "", "static_sparse_cross_entropy"], [542, 3, 1, "", "static_subtract"], [547, 3, 1, "", "static_tan"], [552, 3, 1, "", "static_tanh"], [224, 3, 1, "", "static_tril"], [229, 3, 1, "", "static_triu"], [879, 3, 1, "", "static_unique_counts"], [234, 3, 1, "", "static_zeros"], [237, 3, 1, "", "static_zeros_like"], [919, 3, 1, "", "std"], [544, 3, 1, "", "subtract"], [923, 3, 1, "", "sum"], [822, 3, 1, "", "swapaxes"], [549, 3, 1, "", "tan"], [554, 3, 1, "", "tanh"], [826, 3, 1, "", "tile"], [226, 3, 1, "", "tril"], [231, 3, 1, "", "triu"], [558, 3, 1, "", "trunc"], [881, 3, 1, "", "unique_counts"], [927, 3, 1, "", "var"], [830, 3, 1, "", "zero_pad"], [239, 3, 1, "", "zeros_like"]], "ivy.container.creation": [[74, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[74, 2, 1, "", "asarray"], [74, 2, 1, "", "empty_like"], [74, 2, 1, "", "from_dlpack"], [74, 2, 1, "", "full_like"], [74, 2, 1, "", "meshgrid"], [74, 2, 1, "", "native_array"], [74, 2, 1, "", "ones_like"], [74, 2, 1, "", "static_arange"], [74, 2, 1, "", "static_asarray"], [74, 2, 1, "", "static_empty_like"], [74, 2, 1, "", "static_eye"], [74, 2, 1, "", "static_from_dlpack"], [74, 2, 1, "", "static_full_like"], [74, 2, 1, "", "static_linspace"], [74, 2, 1, "", "static_logspace"], [74, 2, 1, "", "static_meshgrid"], [74, 2, 1, "", "static_native_array"], [74, 2, 1, "", "static_ones"], [74, 2, 1, "", "static_ones_like"], [74, 2, 1, "", "static_tril"], [74, 2, 1, "", "static_triu"], [74, 2, 1, "", "static_zeros"], [74, 2, 1, "", "static_zeros_like"], [74, 2, 1, "", "tril"], [74, 2, 1, "", "triu"], [74, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[76, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[76, 2, 1, "", "can_cast"], [76, 2, 1, "", "static_can_cast"]], "ivy.container.device": [[78, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[80, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[80, 2, 1, "", "abs"], [80, 2, 1, "", "acos"], [80, 2, 1, "", "acosh"], [80, 2, 1, "", "add"], [80, 2, 1, "", "asin"], [80, 2, 1, "", "asinh"], [80, 2, 1, "", "atan"], [80, 2, 1, "", "atan2"], [80, 2, 1, "", "atanh"], [80, 2, 1, "", "bitwise_and"], [80, 2, 1, "", "bitwise_invert"], [80, 2, 1, "", "bitwise_left_shift"], [80, 2, 1, "", "bitwise_or"], [80, 2, 1, "", "bitwise_right_shift"], [80, 2, 1, "", "bitwise_xor"], [80, 2, 1, "", "ceil"], [80, 2, 1, "", "cos"], [80, 2, 1, "", "cosh"], [80, 2, 1, "", "divide"], [80, 2, 1, "", "equal"], [80, 2, 1, "", "erf"], [80, 2, 1, "", "exp"], [80, 2, 1, "", "expm1"], [80, 2, 1, "", "floor"], [80, 2, 1, "", "floor_divide"], [80, 2, 1, "", "greater"], [80, 2, 1, "", "greater_equal"], [80, 2, 1, "", "isfinite"], [80, 2, 1, "", "isinf"], [80, 2, 1, "", "isnan"], [80, 2, 1, "", "less"], [80, 2, 1, "", "less_equal"], [80, 2, 1, "", "log"], [80, 2, 1, "", "log10"], [80, 2, 1, "", "log1p"], [80, 2, 1, "", "log2"], [80, 2, 1, "", "logaddexp"], [80, 2, 1, "", "logical_and"], [80, 2, 1, "", "logical_not"], [80, 2, 1, "", "logical_or"], [80, 2, 1, "", "logical_xor"], [80, 2, 1, "", "multiply"], [80, 2, 1, "", "negative"], [80, 2, 1, "", "not_equal"], [80, 2, 1, "", "positive"], [80, 2, 1, "", "pow"], [80, 2, 1, "", "remainder"], [80, 2, 1, "", "round"], [80, 2, 1, "", "sign"], [80, 2, 1, "", "sin"], [80, 2, 1, "", "sinh"], [80, 2, 1, "", "sqrt"], [80, 2, 1, "", "square"], [80, 2, 1, "", "static_abs"], [80, 2, 1, "", "static_add"], [80, 2, 1, "", "static_divide"], [80, 2, 1, "", "static_multiply"], [80, 2, 1, "", "static_subtract"], [80, 2, 1, "", "static_tan"], [80, 2, 1, "", "static_tanh"], [80, 2, 1, "", "subtract"], [80, 2, 1, "", "tan"], [80, 2, 1, "", "tanh"], [80, 2, 1, "", "trunc"]], "ivy.container.general": [[82, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[82, 2, 1, "", "all_equal"], [82, 2, 1, "", "clip_vector_norm"], [82, 2, 1, "", "gather_nd"], [82, 2, 1, "", "static_all_equal"], [82, 2, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[84, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[84, 2, 1, "", "adam_step"], [84, 2, 1, "", "adam_update"], [84, 2, 1, "", "gradient_descent_update"], [84, 2, 1, "", "is_variable"], [84, 2, 1, "", "lamb_update"], [84, 2, 1, "", "lars_update"], [84, 2, 1, "", "optimizer_update"], [84, 2, 1, "", "static_adam_step"], [84, 2, 1, "", "static_adam_update"], [84, 2, 1, "", "static_gradient_descent_update"], [84, 2, 1, "", "static_is_variable"], [84, 2, 1, "", "static_lamb_update"], [84, 2, 1, "", "static_lars_update"], [84, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[86, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[88, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[90, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[90, 2, 1, "", "cholesky"], [90, 2, 1, "", "matmul"], [90, 2, 1, "", "static_cholesky"]], "ivy.container.losses": [[92, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[92, 2, 1, "", "binary_cross_entropy"], [92, 2, 1, "", "cross_entropy"], [92, 2, 1, "", "sparse_cross_entropy"], [92, 2, 1, "", "static_binary_cross_entropy"], [92, 2, 1, "", "static_cross_entropy"], [92, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[94, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[94, 2, 1, "", "clip"], [94, 2, 1, "", "concat"], [94, 2, 1, "", "constant_pad"], [94, 2, 1, "", "expand_dims"], [94, 2, 1, "", "flip"], [94, 2, 1, "", "permute_dims"], [94, 2, 1, "", "repeat"], [94, 2, 1, "", "reshape"], [94, 2, 1, "", "roll"], [94, 2, 1, "", "squeeze"], [94, 2, 1, "", "stack"], [94, 2, 1, "", "static_clip"], [94, 2, 1, "", "static_roll"], [94, 2, 1, "", "swapaxes"], [94, 2, 1, "", "tile"], [94, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[96, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[96, 2, 1, "", "layer_norm"]], "ivy.container.random": [[98, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[98, 2, 1, "", "random_uniform"], [98, 2, 1, "", "static_randint"], [98, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[100, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[102, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[102, 2, 1, "", "static_unique_counts"], [102, 2, 1, "", "unique_counts"]], "ivy.container.sorting": [[104, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[104, 2, 1, "", "argsort"], [104, 2, 1, "", "sort"], [104, 2, 1, "", "static_argsort"], [104, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[106, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[106, 2, 1, "", "einsum"], [106, 2, 1, "", "max"], [106, 2, 1, "", "mean"], [106, 2, 1, "", "min"], [106, 2, 1, "", "prod"], [106, 2, 1, "", "std"], [106, 2, 1, "", "sum"], [106, 2, 1, "", "var"]], "ivy.container.utility": [[108, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[108, 2, 1, "", "all"], [108, 2, 1, "", "any"], [108, 2, 1, "", "static_all"], [108, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[110, 3, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[146, 3, 1, "", "handle_nestable"], [147, 3, 1, "", "handle_out_argument"], [148, 3, 1, "", "infer_device"], [149, 3, 1, "", "infer_dtype"], [150, 3, 1, "", "inputs_to_ivy_arrays"], [151, 3, 1, "", "inputs_to_native_arrays"], [152, 3, 1, "", "outputs_to_ivy_arrays"], [153, 3, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[155, 0, 0, "-", "activations"], [167, 0, 0, "-", "compilation"], [169, 0, 0, "-", "constants"], [170, 0, 0, "-", "creation"], [241, 0, 0, "-", "data_type"], [275, 0, 0, "-", "device"], [322, 0, 0, "-", "elementwise"], [560, 0, 0, "-", "general"], [634, 0, 0, "-", "gradients"], [671, 0, 0, "-", "layers"], [684, 0, 0, "-", "linear_algebra"], [756, 0, 0, "-", "losses"], [772, 0, 0, "-", "manipulation"], [832, 0, 0, "-", "meta"], [836, 0, 0, "-", "nest"], [854, 0, 0, "-", "norms"], [859, 0, 0, "-", "random"], [871, 0, 0, "-", "searching"], [876, 0, 0, "-", "set"], [885, 0, 0, "-", "sorting"], [896, 0, 0, "-", "statistical"], [929, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[156, 3, 1, "", "gelu"], [157, 3, 1, "", "leaky_relu"], [158, 3, 1, "", "relu"], [159, 3, 1, "", "sigmoid"], [160, 3, 1, "", "softmax"], [164, 3, 1, "", "softplus"], [166, 3, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[168, 3, 1, "", "compile"]], "ivy.functional.ivy.constants": [[169, 5, 1, "", "e"], [169, 5, 1, "", "inf"], [169, 5, 1, "", "nan"], [169, 5, 1, "", "newaxis"], [169, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[172, 3, 1, "", "arange"], [170, 3, 1, "", "array"], [177, 3, 1, "", "asarray"], [179, 3, 1, "", "empty"], [183, 3, 1, "", "empty_like"], [186, 3, 1, "", "eye"], [191, 3, 1, "", "from_dlpack"], [193, 3, 1, "", "full"], [197, 3, 1, "", "full_like"], [200, 3, 1, "", "linspace"], [203, 3, 1, "", "logspace"], [208, 3, 1, "", "meshgrid"], [213, 3, 1, "", "native_array"], [216, 3, 1, "", "ones"], [221, 3, 1, "", "ones_like"], [227, 3, 1, "", "tril"], [232, 3, 1, "", "triu"], [235, 3, 1, "", "zeros"], [240, 3, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[241, 1, 1, "", "DefaultDtype"], [241, 1, 1, "", "DefaultFloatDtype"], [241, 1, 1, "", "DefaultIntDtype"], [242, 3, 1, "", "as_ivy_dtype"], [243, 3, 1, "", "as_native_dtype"], [244, 3, 1, "", "astype"], [245, 3, 1, "", "broadcast_arrays"], [246, 3, 1, "", "broadcast_to"], [250, 3, 1, "", "can_cast"], [252, 3, 1, "", "closest_valid_dtype"], [253, 3, 1, "", "default_dtype"], [254, 3, 1, "", "default_float_dtype"], [255, 3, 1, "", "default_int_dtype"], [256, 3, 1, "", "dtype"], [257, 3, 1, "", "dtype_bits"], [258, 3, 1, "", "finfo"], [259, 3, 1, "", "function_supported_dtypes"], [260, 3, 1, "", "function_unsupported_dtypes"], [261, 3, 1, "", "iinfo"], [262, 3, 1, "", "invalid_dtype"], [263, 3, 1, "", "is_float_dtype"], [264, 3, 1, "", "is_int_dtype"], [265, 3, 1, "", "promote_types"], [266, 3, 1, "", "result_type"], [267, 3, 1, "", "set_default_dtype"], [268, 3, 1, "", "set_default_float_dtype"], [269, 3, 1, "", "set_default_int_dtype"], [270, 3, 1, "", "type_promote_arrays"], [271, 3, 1, "", "unset_default_dtype"], [272, 3, 1, "", "unset_default_float_dtype"], [273, 3, 1, "", "unset_default_int_dtype"], [274, 3, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[241, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[241, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[241, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[275, 1, 1, "", "DefaultDevice"], [276, 1, 1, "", "DevClonedItem"], [277, 1, 1, "", "DevClonedIter"], [278, 1, 1, "", "DevClonedNest"], [279, 1, 1, "", "DevDistItem"], [280, 1, 1, "", "DevDistIter"], [281, 1, 1, "", "DevDistNest"], [275, 1, 1, "", "DevManager"], [282, 1, 1, "", "DevMapper"], [283, 1, 1, "", "DevMapperMultiProc"], [275, 1, 1, "", "MultiDev"], [284, 1, 1, "", "MultiDevItem"], [285, 1, 1, "", "MultiDevIter"], [286, 1, 1, "", "MultiDevNest"], [287, 1, 1, "", "Profiler"], [288, 3, 1, "", "as_ivy_dev"], [289, 3, 1, "", "as_native_dev"], [290, 3, 1, "", "clear_mem_on_dev"], [291, 3, 1, "", "default_device"], [292, 3, 1, "", "dev"], [293, 3, 1, "", "dev_clone"], [294, 3, 1, "", "dev_clone_array"], [295, 3, 1, "", "dev_clone_iter"], [296, 3, 1, "", "dev_clone_nest"], [297, 3, 1, "", "dev_dist"], [298, 3, 1, "", "dev_dist_array"], [299, 3, 1, "", "dev_dist_iter"], [300, 3, 1, "", "dev_dist_nest"], [301, 3, 1, "", "dev_unify"], [302, 3, 1, "", "dev_unify_array"], [303, 3, 1, "", "dev_unify_iter"], [304, 3, 1, "", "dev_unify_nest"], [305, 3, 1, "", "dev_util"], [306, 3, 1, "", "get_all_ivy_arrays_on_dev"], [307, 3, 1, "", "gpu_is_available"], [308, 3, 1, "", "num_cpu_cores"], [309, 3, 1, "", "num_gpus"], [310, 3, 1, "", "num_ivy_arrays_on_dev"], [311, 3, 1, "", "percent_used_mem_on_dev"], [312, 3, 1, "", "print_all_ivy_arrays_on_dev"], [313, 3, 1, "", "set_default_device"], [314, 3, 1, "", "set_split_factor"], [315, 3, 1, "", "split_factor"], [316, 3, 1, "", "split_func_call"], [317, 3, 1, "", "to_device"], [318, 3, 1, "", "total_mem_on_dev"], [319, 3, 1, "", "tpu_is_available"], [320, 3, 1, "", "unset_default_device"], [321, 3, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[275, 2, 1, "", "__enter__"], [275, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "da_tune_step"], [275, 4, 1, "", "dim_size"], [275, 2, 1, "", "ds_tune_step"], [275, 2, 1, "", "map"], [275, 2, 1, "", "repeated_config_check"], [275, 4, 1, "", "tune_step"], [275, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[283, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[275, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "items"], [284, 2, 1, "", "keys"], [284, 4, 1, "", "shape"], [284, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[285, 2, 1, "", "__init__"], [285, 2, 1, "", "at_dev"], [285, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[286, 2, 1, "", "__init__"], [286, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[287, 2, 1, "", "__init__"], [287, 2, 1, "", "start"], [287, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[326, 3, 1, "", "abs"], [331, 3, 1, "", "acos"], [335, 3, 1, "", "acosh"], [339, 3, 1, "", "add"], [344, 3, 1, "", "asin"], [348, 3, 1, "", "asinh"], [352, 3, 1, "", "atan"], [356, 3, 1, "", "atan2"], [360, 3, 1, "", "atanh"], [364, 3, 1, "", "bitwise_and"], [368, 3, 1, "", "bitwise_invert"], [372, 3, 1, "", "bitwise_left_shift"], [376, 3, 1, "", "bitwise_or"], [380, 3, 1, "", "bitwise_right_shift"], [384, 3, 1, "", "bitwise_xor"], [388, 3, 1, "", "ceil"], [392, 3, 1, "", "cos"], [396, 3, 1, "", "cosh"], [400, 3, 1, "", "divide"], [405, 3, 1, "", "equal"], [409, 3, 1, "", "erf"], [413, 3, 1, "", "exp"], [417, 3, 1, "", "expm1"], [421, 3, 1, "", "floor"], [425, 3, 1, "", "floor_divide"], [429, 3, 1, "", "greater"], [433, 3, 1, "", "greater_equal"], [437, 3, 1, "", "isfinite"], [441, 3, 1, "", "isinf"], [445, 3, 1, "", "isnan"], [449, 3, 1, "", "less"], [453, 3, 1, "", "less_equal"], [457, 3, 1, "", "log"], [461, 3, 1, "", "log10"], [465, 3, 1, "", "log1p"], [469, 3, 1, "", "log2"], [473, 3, 1, "", "logaddexp"], [477, 3, 1, "", "logical_and"], [481, 3, 1, "", "logical_not"], [485, 3, 1, "", "logical_or"], [489, 3, 1, "", "logical_xor"], [490, 3, 1, "", "maximum"], [491, 3, 1, "", "minimum"], [495, 3, 1, "", "multiply"], [500, 3, 1, "", "negative"], [504, 3, 1, "", "not_equal"], [508, 3, 1, "", "positive"], [512, 3, 1, "", "pow"], [516, 3, 1, "", "remainder"], [520, 3, 1, "", "round"], [524, 3, 1, "", "sign"], [528, 3, 1, "", "sin"], [532, 3, 1, "", "sinh"], [536, 3, 1, "", "sqrt"], [540, 3, 1, "", "square"], [545, 3, 1, "", "subtract"], [550, 3, 1, "", "tan"], [555, 3, 1, "", "tanh"], [559, 3, 1, "", "trunc"]], "ivy.functional.ivy.general": [[564, 3, 1, "", "all_equal"], [566, 3, 1, "", "arg_info"], [567, 3, 1, "", "arg_names"], [568, 3, 1, "", "array_equal"], [569, 3, 1, "", "arrays_equal"], [570, 3, 1, "", "assert_supports_inplace"], [571, 3, 1, "", "cache_fn"], [572, 3, 1, "", "clip_matrix_norm"], [575, 3, 1, "", "clip_vector_norm"], [576, 3, 1, "", "container_types"], [577, 3, 1, "", "copy_array"], [578, 3, 1, "", "cumprod"], [579, 3, 1, "", "cumsum"], [580, 3, 1, "", "current_backend_str"], [581, 3, 1, "", "default"], [582, 3, 1, "", "einops_rearrange"], [583, 3, 1, "", "einops_reduce"], [584, 3, 1, "", "einops_repeat"], [585, 3, 1, "", "exists"], [586, 3, 1, "", "floormod"], [587, 3, 1, "", "fourier_encode"], [588, 3, 1, "", "gather"], [592, 3, 1, "", "gather_nd"], [594, 3, 1, "", "get_all_arrays_in_memory"], [595, 3, 1, "", "get_min_base"], [596, 3, 1, "", "get_min_denominator"], [597, 3, 1, "", "get_num_dims"], [598, 3, 1, "", "get_referrers_recursive"], [599, 3, 1, "", "has_nans"], [600, 3, 1, "", "indices_where"], [601, 3, 1, "", "inplace_arrays_supported"], [602, 3, 1, "", "inplace_decrement"], [603, 3, 1, "", "inplace_increment"], [604, 3, 1, "", "inplace_update"], [605, 3, 1, "", "inplace_variables_supported"], [606, 3, 1, "", "is_array"], [607, 3, 1, "", "is_ivy_array"], [608, 3, 1, "", "is_ivy_container"], [609, 3, 1, "", "is_native_array"], [610, 3, 1, "", "match_kwargs"], [611, 3, 1, "", "multiprocessing"], [612, 3, 1, "", "num_arrays_in_memory"], [613, 3, 1, "", "one_hot"], [614, 3, 1, "", "print_all_arrays_in_memory"], [615, 3, 1, "", "queue_timeout"], [616, 3, 1, "", "scatter_flat"], [617, 3, 1, "", "scatter_nd"], [618, 3, 1, "", "set_min_base"], [619, 3, 1, "", "set_min_denominator"], [620, 3, 1, "", "set_queue_timeout"], [621, 3, 1, "", "set_tmp_dir"], [622, 3, 1, "", "shape"], [623, 3, 1, "", "shape_to_tuple"], [624, 3, 1, "", "stable_divide"], [625, 3, 1, "", "stable_pow"], [626, 3, 1, "", "supports_inplace"], [627, 3, 1, "", "tmp_dir"], [628, 3, 1, "", "to_list"], [629, 3, 1, "", "to_numpy"], [630, 3, 1, "", "to_scalar"], [631, 3, 1, "", "try_else_none"], [632, 3, 1, "", "unstack"], [633, 3, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[634, 1, 1, "", "GradientTracking"], [638, 3, 1, "", "adam_step"], [642, 3, 1, "", "adam_update"], [644, 3, 1, "", "execute_with_gradients"], [647, 3, 1, "", "gradient_descent_update"], [651, 3, 1, "", "is_variable"], [655, 3, 1, "", "lamb_update"], [659, 3, 1, "", "lars_update"], [663, 3, 1, "", "optimizer_update"], [665, 3, 1, "", "set_with_grads"], [666, 3, 1, "", "stop_gradient"], [667, 3, 1, "", "unset_with_grads"], [668, 3, 1, "", "variable"], [669, 3, 1, "", "variable_data"], [670, 3, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[634, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[672, 3, 1, "", "conv1d"], [673, 3, 1, "", "conv1d_transpose"], [674, 3, 1, "", "conv2d"], [675, 3, 1, "", "conv2d_transpose"], [676, 3, 1, "", "conv3d"], [677, 3, 1, "", "conv3d_transpose"], [678, 3, 1, "", "depthwise_conv2d"], [679, 3, 1, "", "dropout"], [680, 3, 1, "", "linear"], [681, 3, 1, "", "lstm_update"], [682, 3, 1, "", "multi_head_attention"], [683, 3, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[688, 3, 1, "", "cholesky"], [692, 3, 1, "", "cross"], [695, 3, 1, "", "det"], [698, 3, 1, "", "diagonal"], [701, 3, 1, "", "eigh"], [704, 3, 1, "", "eigvalsh"], [707, 3, 1, "", "inv"], [711, 3, 1, "", "matmul"], [714, 3, 1, "", "matrix_norm"], [715, 3, 1, "", "matrix_power"], [718, 3, 1, "", "matrix_rank"], [721, 3, 1, "", "matrix_transpose"], [724, 3, 1, "", "outer"], [727, 3, 1, "", "pinv"], [730, 3, 1, "", "qr"], [731, 3, 1, "", "slogdet"], [734, 3, 1, "", "solve"], [737, 3, 1, "", "svd"], [740, 3, 1, "", "svdvals"], [743, 3, 1, "", "tensordot"], [746, 3, 1, "", "trace"], [749, 3, 1, "", "vecdot"], [752, 3, 1, "", "vector_norm"], [755, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[760, 3, 1, "", "binary_cross_entropy"], [765, 3, 1, "", "cross_entropy"], [770, 3, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[776, 3, 1, "", "clip"], [781, 3, 1, "", "concat"], [785, 3, 1, "", "constant_pad"], [789, 3, 1, "", "expand_dims"], [793, 3, 1, "", "flip"], [797, 3, 1, "", "permute_dims"], [801, 3, 1, "", "repeat"], [805, 3, 1, "", "reshape"], [809, 3, 1, "", "roll"], [811, 3, 1, "", "split"], [815, 3, 1, "", "squeeze"], [819, 3, 1, "", "stack"], [823, 3, 1, "", "swapaxes"], [827, 3, 1, "", "tile"], [831, 3, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[833, 3, 1, "", "fomaml_step"], [834, 3, 1, "", "maml_step"], [835, 3, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[837, 3, 1, "", "all_nested_indices"], [838, 3, 1, "", "copy_nest"], [839, 3, 1, "", "index_nest"], [840, 3, 1, "", "insert_into_nest_at_index"], [841, 3, 1, "", "insert_into_nest_at_indices"], [842, 3, 1, "", "map"], [843, 3, 1, "", "map_nest_at_index"], [844, 3, 1, "", "map_nest_at_indices"], [845, 3, 1, "", "multi_index_nest"], [846, 3, 1, "", "nested_any"], [847, 3, 1, "", "nested_indices_where"], [848, 3, 1, "", "nested_map"], [849, 3, 1, "", "nested_multi_map"], [850, 3, 1, "", "prune_nest_at_index"], [851, 3, 1, "", "prune_nest_at_indices"], [852, 3, 1, "", "set_nest_at_index"], [853, 3, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[858, 3, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[860, 3, 1, "", "multinomial"], [862, 3, 1, "", "randint"], [864, 3, 1, "", "random_normal"], [867, 3, 1, "", "random_uniform"], [869, 3, 1, "", "seed"], [870, 3, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[872, 3, 1, "", "argmax"], [873, 3, 1, "", "argmin"], [874, 3, 1, "", "nonzero"], [875, 3, 1, "", "where"]], "ivy.functional.ivy.set": [[877, 3, 1, "", "unique_all"], [882, 3, 1, "", "unique_counts"], [883, 3, 1, "", "unique_inverse"], [884, 3, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[889, 3, 1, "", "argsort"], [894, 3, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[900, 3, 1, "", "einsum"], [904, 3, 1, "", "max"], [908, 3, 1, "", "mean"], [912, 3, 1, "", "min"], [916, 3, 1, "", "prod"], [920, 3, 1, "", "std"], [924, 3, 1, "", "sum"], [928, 3, 1, "", "var"]], "ivy.functional.ivy.utility": [[933, 3, 1, "", "all"], [938, 3, 1, "", "any"]], "ivy.inspection": [[944, 3, 1, "", "add_array_specs"], [945, 3, 1, "", "fn_array_spec"]], "ivy.stateful": [[948, 0, 0, "-", "activations"], [951, 0, 0, "-", "converters"], [953, 0, 0, "-", "initializers"], [959, 0, 0, "-", "layers"], [971, 0, 0, "-", "module"], [973, 0, 0, "-", "norms"], [975, 0, 0, "-", "optimizers"], [981, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[949, 1, 1, "", "GEGLU"], [950, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[949, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[950, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[952, 3, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[953, 1, 1, "", "Constant"], [954, 1, 1, "", "FirstLayerSiren"], [955, 1, 1, "", "GlorotUniform"], [953, 1, 1, "", "KaimingNormal"], [956, 1, 1, "", "Ones"], [957, 1, 1, "", "Siren"], [953, 1, 1, "", "Uniform"], [958, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[953, 2, 1, "", "__init__"], [953, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[954, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[955, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[953, 2, 1, "", "__init__"], [953, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[956, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[957, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[953, 2, 1, "", "__init__"], [953, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[958, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[960, 1, 1, "", "Conv1D"], [961, 1, 1, "", "Conv1DTranspose"], [962, 1, 1, "", "Conv2D"], [963, 1, 1, "", "Conv2DTranspose"], [964, 1, 1, "", "Conv3D"], [965, 1, 1, "", "Conv3DTranspose"], [966, 1, 1, "", "DepthwiseConv2D"], [967, 1, 1, "", "Dropout"], [968, 1, 1, "", "LSTM"], [969, 1, 1, "", "Linear"], [970, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[960, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[961, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[962, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[963, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[964, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[965, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[966, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[967, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[968, 2, 1, "", "__init__"], [968, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[969, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[970, 2, 1, "", "__init__"]], "ivy.stateful.module": [[972, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[972, 2, 1, "", "__init__"], [972, 2, 1, "", "build"], [972, 4, 1, "", "build_mode"], [972, 4, 1, "", "built"], [972, 2, 1, "", "check_submod_rets"], [972, 2, 1, "", "get_mod_key"], [972, 2, 1, "", "mod_depth"], [972, 2, 1, "", "mod_height"], [972, 2, 1, "", "mod_with_top_mod_key_chain"], [972, 2, 1, "", "save_weights"], [972, 2, 1, "", "show_mod_in_top_mod"], [972, 2, 1, "", "show_structure"], [972, 2, 1, "", "show_v_in_top_v"], [972, 2, 1, "", "sub_mods"], [972, 2, 1, "", "track_submod_call_order"], [972, 2, 1, "", "track_submod_rets"], [972, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[974, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[974, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[976, 1, 1, "", "Adam"], [977, 1, 1, "", "LAMB"], [978, 1, 1, "", "LARS"], [979, 1, 1, "", "Optimizer"], [980, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[976, 2, 1, "", "__init__"], [976, 2, 1, "", "set_state"], [976, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[977, 2, 1, "", "__init__"], [977, 2, 1, "", "set_state"], [977, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[978, 2, 1, "", "__init__"], [978, 2, 1, "", "set_state"], [978, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[979, 2, 1, "", "__init__"], [979, 2, 1, "", "set_state"], [979, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[980, 2, 1, "", "__init__"], [980, 2, 1, "", "set_state"], [980, 4, 1, "", "state"]], "ivy.stateful.sequential": [[982, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[982, 2, 1, "", "__init__"]], "ivy.verbosity": [[985, 3, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 112, 118, 127, 144], "handler": [0, 127], "choose_random_backend": 1, "clear_backend_stack": 2, "current_backend": 3, "get_backend": 4, "set_backend": 5, "try_import_ivy_jax": 6, "try_import_ivy_mxnet": 7, "try_import_ivy_numpi": 8, "try_import_ivy_tf": 9, "try_import_ivy_torch": 10, "unset_backend": 11, "background": [12, 940], "ml": 13, "explos": 13, "standard": 14, "skeptic": 14, "complimentari": 14, "v": [14, 144], "competit": 14, "do": 14, "work": [14, 20], "The": [14, 18, 129, 144], "arrai": [14, 115, 120, 125, 129, 162, 175, 181, 189, 195, 206, 211, 219, 225, 230, 238, 248, 324, 329, 333, 337, 342, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 493, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 538, 543, 548, 553, 557, 562, 590, 636, 686, 691, 694, 697, 700, 703, 706, 709, 713, 717, 720, 723, 726, 729, 733, 736, 739, 742, 745, 748, 751, 754, 758, 763, 768, 774, 779, 783, 787, 791, 795, 799, 803, 807, 813, 817, 821, 825, 829, 856, 880, 887, 892, 898, 902, 906, 910, 914, 918, 922, 926, 931, 936], "api": [14, 19, 112, 115, 121, 127, 129, 131, 132], "why": 15, "unifi": [15, 129], "No": [15, 17], "more": 15, "re": 15, "implement": 15, "infinit": 15, "shelf": 15, "life": 15, "contribut": [16, 940], "set": [17, 56, 101, 118, 876], "up": 17, "clone": 17, "ivi": [17, 112, 114, 116, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 248, 249, 250, 251, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 562, 563, 564, 565, 574, 575, 590, 591, 592, 593, 636, 637, 638, 639, 641, 642, 643, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 686, 687, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 711, 713, 714, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 758, 759, 760, 761, 763, 764, 765, 766, 768, 769, 770, 771, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 787, 788, 789, 791, 792, 793, 795, 796, 797, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 821, 822, 823, 825, 826, 827, 829, 830, 831, 856, 857, 858, 862, 863, 866, 867, 868, 879, 880, 881, 882, 887, 888, 889, 890, 892, 893, 894, 895, 898, 899, 900, 902, 903, 904, 906, 907, 908, 910, 911, 912, 914, 915, 916, 918, 919, 920, 922, 923, 924, 926, 927, 928, 931, 932, 933, 934, 936, 937, 938, 939], "pycharm": 17, "virtual": 17, "environ": 17, "docker": [17, 18, 20], "us": [17, 20, 130], "miniconda": [17, 20], "venv": [17, 20], "interpret": 17, "window": 17, "maco": 17, "ubuntu": 17, "github": 17, "codespac": 17, "pre": 17, "commit": [17, 18], "basic": 18, "get": 18, "help": 18, "todo": 18, "list": 18, "issu": 18, "manag": 18, "your": 18, "fork": 18, "who": 18, "To": 18, "ask": 18, "With": 18, "command": 18, "line": 18, "browser": 18, "pull": 18, "request": 18, "small": 18, "often": 18, "run": 18, "test": [18, 115, 116], "local": 18, "open": 19, "task": 19, "function": [19, 117, 119, 121, 122, 123, 125, 127, 132, 144], "format": 19, "frontend": [19, 132], "build": [20, 127], "doc": 20, "dockerless": 20, "document": 20, "pipelin": [20, 144], "make_doc": 20, "sh": 20, "entrypoint": 20, "_make_doc": 20, "generate_src_rst_fil": 20, "py": 20, "sphinx": 20, "correct_built_html_fil": 20, "remove_fil": 20, "activ": [21, 66, 155, 948], "arraywithactiv": 22, "convers": 23, "args_to_ivi": 24, "args_to_n": 25, "to_ivi": 26, "to_n": 27, "creation": [28, 73, 170], "arraywithcr": 29, "data": [30, 75, 116, 122, 130, 144, 241, 876, 877, 878, 882, 884], "type": [30, 75, 117, 122, 144, 241], "arraywithdatatyp": 31, "devic": [32, 77, 123, 125, 275], "arraywithdevic": 33, "elementwis": [34, 79, 322], "arraywithelementwis": 35, "gener": [36, 81, 116, 560], "arraywithgener": 37, "gradient": [38, 83, 634], "arraywithgradi": 39, "imag": [40, 85], "arraywithimag": 41, "layer": [42, 87, 671, 959], "arraywithlay": 43, "linear": [44, 89, 680, 684, 969], "algebra": [44, 89, 684], "arraywithlinearalgebra": 45, "loss": [46, 91, 756], "arraywithloss": 47, "manipul": [48, 93, 772], "arraywithmanipul": 49, "norm": [50, 95, 854, 973], "arraywithnorm": 51, "random": [52, 97, 859], "arraywithrandom": 53, "search": [54, 99, 871], "arraywithsearch": 55, "arraywithset": 57, "sort": [58, 103, 885, 891, 892, 893, 894], "arraywithsort": 59, "statist": [60, 105, 896], "arraywithstatist": 61, "util": [62, 107, 929], "arraywithutil": 63, "wrap": [64, 109, 119], "add_ivy_array_instance_method": 65, "containerwithactiv": 67, "base": 68, "containerbas": 69, "contain": [70, 71, 121, 130, 163, 165, 173, 176, 178, 182, 184, 187, 190, 192, 196, 198, 201, 204, 207, 209, 212, 214, 217, 220, 222, 224, 226, 229, 231, 234, 237, 239, 249, 251, 325, 327, 330, 334, 338, 340, 343, 347, 351, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 401, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 494, 496, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 539, 542, 544, 547, 549, 552, 554, 558, 563, 565, 574, 591, 593, 637, 639, 641, 643, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 687, 689, 710, 759, 761, 764, 766, 769, 771, 775, 777, 780, 784, 788, 792, 796, 800, 804, 808, 810, 814, 818, 822, 826, 830, 857, 863, 866, 868, 879, 881, 888, 890, 893, 895, 899, 903, 907, 911, 915, 919, 923, 927, 932, 934, 937, 939], "multidevcontain": 72, "containerwithcr": 74, "containerwithdatatyp": 76, "containerwithdevic": 78, "containerwithelementwis": 80, "containerwithgener": 82, "containerwithgradi": 84, "containerwithimag": 86, "containerwithlay": 88, "containerwithlinearalgebra": 90, "containerwithloss": 92, "containerwithmanipul": 94, "containerwithnorm": 96, "containerwithrandom": 98, "containerwithsearch": 100, "containerwithset": 102, "containerwithsort": 104, "containerwithstatist": 106, "containerwithutil": 108, "add_ivy_container_instance_method": 110, "deep": 111, "dive": 111, "navig": 112, "code": 112, "categor": 112, "submodul": 112, "design": [112, 126, 940], "docstr": [113, 114], "exampl": [114, 125], "tan": [114, 546, 548, 549, 550], "roll": [114, 806, 807, 808, 809], "add": [114, 336, 337, 338, 339], "hypothesi": 116, "self": 116, "consist": 116, "explicit": 116, "test_array_funct": 116, "primari": 117, "composit": 117, "mix": 117, "standalon": 117, "nestabl": [117, 121, 125], "conveni": 117, "nativ": 120, "handl": 120, "instanc": [121, 129], "method": [121, 129, 130], "static": 121, "special": 121, "modul": [122, 123, 131, 971, 972], "argument": [122, 123, 124, 125], "other": [122, 123], "inplac": 124, "updat": 124, "out": [124, 125], "copi": 124, "dtype": [125, 256], "number": 125, "oper": [125, 129, 144], "integ": 125, "sequenc": 125, "block": 127, "framework": [127, 128, 947], "graph": [127, 132], "compil": [127, 132, 167, 168], "class": [129, 947], "monkei": 129, "patch": 129, "construct": 130, "represent": 130, "recurs": 130, "built": 130, "ins": 130, "access": 130, "save": 130, "load": 130, "comparison": 130, "custom": [130, 144], "case": 130, "compartment": 130, "configur": 130, "network": [130, 132], "weight": 130, "state": [131, 144], "initi": [131, 953], "optim": [131, 975, 979], "transpil": 132, "role": 132, "convert": [132, 951], "model": [132, 139, 144], "builder": 134, "ecosystem": 135, "gym": [136, 143], "mech": 137, "memori": [138, 143], "robot": [140, 143], "vision": [141, 143], "extens": [142, 940], "appli": 143, "librari": 143, "mechan": 143, "faq": 144, "maintain": 144, "version": 144, "dynam": 144, "size": 144, "shape": [144, 622, 876, 877, 878, 882, 884], "check": 144, "control": 144, "flow": 144, "auto": 144, "differenti": 144, "replica": 144, "parallel": 144, "support": 144, "altern": 144, "structur": 144, "func": 145, "wrapper": 145, "handle_nest": 146, "handle_out_argu": 147, "infer_devic": 148, "infer_dtyp": 149, "inputs_to_ivy_arrai": 150, "inputs_to_native_arrai": 151, "outputs_to_ivy_arrai": 152, "to_native_arrays_and_back": 153, "gelu": [156, 950], "leaky_relu": 157, "relu": 158, "sigmoid": 159, "softmax": 160, "softplu": [161, 162, 163, 164], "static_softplu": 165, "tanh": [166, 551, 553, 554, 555], "constant": 169, "note": [170, 188, 191], "arang": [171, 172], "static_arang": 173, "asarrai": [174, 175, 176, 177], "static_asarrai": 178, "empti": 179, "empty_lik": [180, 181, 182, 183], "static_empty_lik": 184, "ey": [185, 186], "static_ey": 187, "from_dlpack": [188, 189, 190, 191], "static_from_dlpack": 192, "full": 193, "full_lik": [194, 195, 196, 197], "static_full_lik": 198, "linspac": [199, 200], "static_linspac": 201, "logspac": [202, 203], "static_logspac": 204, "meshgrid": [205, 206, 207, 208], "static_meshgrid": 209, "native_arrai": [210, 211, 212, 213], "static_native_arrai": 214, "ones": [215, 216], "static_on": 217, "ones_lik": [218, 219, 220, 221], "static_ones_lik": 222, "tril": [223, 225, 226, 227], "static_tril": 224, "triu": [228, 230, 231, 232], "static_triu": 229, "zero": [233, 235, 958], "static_zero": 234, "zeros_lik": [236, 238, 239, 240], "static_zeros_lik": 237, "as_ivy_dtyp": 242, "as_native_dtyp": 243, "astyp": 244, "broadcast_arrai": 245, "broadcast_to": 246, "can_cast": [247, 248, 249, 250], "static_can_cast": 251, "closest_valid_dtyp": 252, "default_dtyp": 253, "default_float_dtyp": 254, "default_int_dtyp": 255, "dtype_bit": 257, "finfo": 258, "function_supported_dtyp": 259, "function_unsupported_dtyp": 260, "iinfo": 261, "invalid_dtyp": 262, "is_float_dtyp": 263, "is_int_dtyp": 264, "promote_typ": 265, "result_typ": 266, "set_default_dtyp": 267, "set_default_float_dtyp": 268, "set_default_int_dtyp": 269, "type_promote_arrai": 270, "unset_default_dtyp": 271, "unset_default_float_dtyp": 272, "unset_default_int_dtyp": 273, "valid_dtyp": 274, "devcloneditem": 276, "devclonedit": 277, "devclonednest": 278, "devdistitem": 279, "devdistit": 280, "devdistnest": 281, "devmapp": 282, "devmappermultiproc": 283, "multidevitem": 284, "multidevit": 285, "multidevnest": 286, "profil": 287, "as_ivy_dev": 288, "as_native_dev": 289, "clear_mem_on_dev": 290, "default_devic": 291, "dev": 292, "dev_clon": 293, "dev_clone_arrai": 294, "dev_clone_it": 295, "dev_clone_nest": 296, "dev_dist": 297, "dev_dist_arrai": 298, "dev_dist_it": 299, "dev_dist_nest": 300, "dev_unifi": 301, "dev_unify_arrai": 302, "dev_unify_it": 303, "dev_unify_nest": 304, "dev_util": 305, "get_all_ivy_arrays_on_dev": 306, "gpu_is_avail": 307, "num_cpu_cor": 308, "num_gpu": 309, "num_ivy_arrays_on_dev": 310, "percent_used_mem_on_dev": 311, "print_all_ivy_arrays_on_dev": 312, "set_default_devic": 313, "set_split_factor": 314, "split_factor": 315, "split_func_cal": 316, "to_devic": 317, "total_mem_on_dev": 318, "tpu_is_avail": 319, "unset_default_devic": 320, "used_mem_on_dev": 321, "ab": [323, 324, 325, 326], "static_ab": 327, "aco": [328, 329, 330, 331], "acosh": [332, 333, 334, 335], "static_add": 340, "asin": [341, 342, 343, 344], "asinh": [345, 346, 347, 348], "atan": [349, 350, 351, 352], "atan2": [353, 354, 355, 356], "atanh": [357, 358, 359, 360], "bitwise_and": [361, 362, 363, 364], "bitwise_invert": [365, 366, 367, 368], "bitwise_left_shift": [369, 370, 371, 372], "bitwise_or": [373, 374, 375, 376], "bitwise_right_shift": [377, 378, 379, 380], "bitwise_xor": [381, 382, 383, 384], "ceil": [385, 386, 387, 388], "co": [389, 390, 391, 392], "cosh": [393, 394, 395, 396], "divid": [397, 398, 399, 400], "static_divid": 401, "equal": [402, 403, 404, 405], "erf": [406, 407, 408, 409], "exp": [410, 411, 412, 413], "expm1": [414, 415, 416, 417], "floor": [418, 419, 420, 421], "floor_divid": [422, 423, 424, 425], "greater": [426, 427, 428, 429], "greater_equ": [430, 431, 432, 433], "isfinit": [434, 435, 436, 437], "isinf": [438, 439, 440, 441], "isnan": [442, 443, 444, 445], "less": [446, 447, 448, 449], "less_equ": [450, 451, 452, 453], "log": [454, 455, 456, 457], "log10": [458, 459, 460, 461], "log1p": [462, 463, 464, 465], "log2": [466, 467, 468, 469], "logaddexp": [470, 471, 472, 473], "logical_and": [474, 475, 476, 477], "logical_not": [478, 479, 480, 481], "logical_or": [482, 483, 484, 485], "logical_xor": [486, 487, 488, 489], "maximum": 490, "minimum": 491, "multipli": [492, 493, 494, 495], "static_multipli": 496, "neg": [497, 498, 499, 500], "not_equ": [501, 502, 503, 504], "posit": [505, 506, 507, 508], "pow": [509, 510, 511, 512], "remaind": [513, 514, 515, 516], "round": [517, 518, 519, 520], "sign": [521, 522, 523, 524], "sin": [525, 526, 527, 528], "sinh": [529, 530, 531, 532], "sqrt": [533, 534, 535, 536], "squar": [537, 538, 539, 540], "subtract": [541, 543, 544, 545], "static_subtract": 542, "static_tan": 547, "static_tanh": 552, "trunc": [556, 557, 558, 559], "all_equ": [561, 562, 563, 564], "static_all_equ": 565, "arg_info": 566, "arg_nam": 567, "array_equ": 568, "arrays_equ": 569, "assert_supports_inplac": 570, "cache_fn": 571, "clip_matrix_norm": 572, "clip_vector_norm": [573, 574, 575], "container_typ": 576, "copy_arrai": 577, "cumprod": 578, "cumsum": 579, "current_backend_str": 580, "default": 581, "einops_rearrang": 582, "einops_reduc": 583, "einops_repeat": 584, "exist": 585, "floormod": 586, "fourier_encod": 587, "gather": 588, "gather_nd": [589, 590, 591, 592], "static_gather_nd": 593, "get_all_arrays_in_memori": 594, "get_min_bas": 595, "get_min_denomin": 596, "get_num_dim": 597, "get_referrers_recurs": 598, "has_nan": 599, "indices_wher": 600, "inplace_arrays_support": 601, "inplace_decr": 602, "inplace_incr": 603, "inplace_upd": 604, "inplace_variables_support": 605, "is_arrai": 606, "is_ivy_arrai": 607, "is_ivy_contain": 608, "is_native_arrai": 609, "match_kwarg": 610, "multiprocess": 611, "num_arrays_in_memori": 612, "one_hot": 613, "print_all_arrays_in_memori": 614, "queue_timeout": 615, "scatter_flat": 616, "scatter_nd": 617, "set_min_bas": 618, "set_min_denomin": 619, "set_queue_timeout": 620, "set_tmp_dir": 621, "shape_to_tupl": 623, "stable_divid": 624, "stable_pow": 625, "supports_inplac": 626, "tmp_dir": 627, "to_list": 628, "to_numpi": 629, "to_scalar": 630, "try_else_non": 631, "unstack": 632, "value_is_nan": 633, "adam_step": [635, 636, 637, 638], "static_adam_step": 639, "adam_upd": [640, 641, 642], "static_adam_upd": 643, "execute_with_gradi": 644, "gradient_descent_upd": [645, 646, 647], "static_gradient_descent_upd": 648, "is_vari": [649, 650, 651], "static_is_vari": 652, "lamb_upd": [653, 654, 655], "static_lamb_upd": 656, "lars_upd": [657, 658, 659], "static_lars_upd": 660, "optimizer_upd": [661, 662, 663], "static_optimizer_upd": 664, "set_with_grad": 665, "stop_gradi": 666, "unset_with_grad": 667, "variabl": 668, "variable_data": 669, "with_grad": 670, "conv1d": [672, 960], "conv1d_transpos": 673, "conv2d": [674, 962], "conv2d_transpos": 675, "conv3d": [676, 964], "conv3d_transpos": 677, "depthwise_conv2d": 678, "dropout": [679, 967], "lstm_updat": 681, "multi_head_attent": 682, "scaled_dot_product_attent": 683, "choleski": [685, 686, 687, 688], "static_choleski": 689, "cross": [690, 691, 692], "det": [693, 694, 695], "diagon": [696, 697, 698], "eigh": [699, 700, 701], "eigvalsh": [702, 703, 704], "inv": [705, 706, 707], "matmul": [708, 709, 710, 711], "matrix_norm": [712, 713, 714], "matrix_pow": 715, "matrix_rank": [716, 717, 718], "matrix_transpos": [719, 720, 721], "outer": [722, 723, 724], "pinv": [725, 726, 727], "qr": [728, 729, 730], "slogdet": 731, "solv": [732, 733, 734], "svd": [735, 736, 737], "svdval": [738, 739, 740], "tensordot": [741, 742, 743], "trace": [744, 745, 746], "vecdot": [747, 748, 749], "vector_norm": [750, 751, 752], "vector_to_skew_symmetric_matrix": [753, 754, 755], "binary_cross_entropi": [757, 758, 759, 760], "static_binary_cross_entropi": 761, "cross_entropi": [762, 763, 764, 765], "static_cross_entropi": 766, "sparse_cross_entropi": [767, 768, 769, 770], "static_sparse_cross_entropi": 771, "clip": [773, 774, 775, 776], "static_clip": 777, "concat": [778, 779, 780, 781], "constant_pad": [782, 783, 784, 785], "expand_dim": [786, 787, 788, 789], "flip": [790, 791, 792, 793], "permute_dim": [794, 795, 796, 797], "repeat": [798, 799, 800, 801], "reshap": [802, 803, 804, 805], "static_rol": 810, "split": 811, "squeez": [812, 813, 814, 815], "stack": [816, 817, 818, 819], "swapax": [820, 821, 822, 823], "tile": [824, 825, 826, 827], "zero_pad": [828, 829, 830, 831], "meta": 832, "fomaml_step": 833, "maml_step": 834, "reptile_step": 835, "nest": 836, "all_nested_indic": 837, "copy_nest": 838, "index_nest": 839, "insert_into_nest_at_index": 840, "insert_into_nest_at_indic": 841, "map": 842, "map_nest_at_index": 843, "map_nest_at_indic": 844, "multi_index_nest": 845, "nested_ani": 846, "nested_indices_wher": 847, "nested_map": 848, "nested_multi_map": 849, "prune_nest_at_index": 850, "prune_nest_at_indic": 851, "set_nest_at_index": 852, "set_nest_at_indic": 853, "layer_norm": [855, 856, 857, 858], "multinomi": 860, "randint": [861, 862], "static_randint": 863, "random_norm": 864, "random_uniform": [865, 866, 867], "static_random_uniform": 868, "seed": 869, "shuffl": 870, "argmax": 872, "argmin": 873, "nonzero": 874, "where": 875, "depend": [876, 877, 878, 882, 884], "output": [876, 877, 878, 882, 884], "unique_al": 877, "unique_count": [878, 880, 881, 882], "static_unique_count": 879, "unique_invers": 883, "unique_valu": 884, "argsort": [886, 887, 888, 889], "static_argsort": 890, "static_sort": 895, "einsum": [897, 898, 899, 900], "max": [901, 902, 903, 904], "mean": [905, 906, 907, 908], "min": [909, 910, 911, 912], "prod": [913, 914, 915, 916], "std": [917, 918, 919, 920], "sum": [921, 922, 923, 924], "var": [925, 926, 927, 928], "all": [930, 931, 932, 933], "static_al": 934, "ani": [935, 936, 937, 938], "static_ani": 939, "content": 940, "overview": 940, "quick": 940, "start": 940, "roadmap": [940, 946], "citat": 940, "inspect": 943, "add_array_spec": 944, "fn_array_spec": 945, "geglu": 949, "to_ivy_modul": 952, "firstlayersiren": 954, "glorotuniform": 955, "Ones": 956, "siren": 957, "conv1dtranspos": 961, "conv2dtranspos": 963, "conv3dtranspos": 965, "depthwiseconv2d": 966, "lstm": 968, "multiheadattent": 970, "layernorm": 974, "adam": 976, "lamb": 977, "lar": 978, "sgd": 980, "sequenti": [981, 982], "verbos": 984, "cprint": 985}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})