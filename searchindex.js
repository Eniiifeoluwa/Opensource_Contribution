Search.setIndex({"docnames": ["backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "DevMapper", "DevMapperMultiProc", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "FirstLayerSiren", "GlorotUniform", "Ones", "Siren", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 5, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 120, 121, 122, 123, 125, 127, 128, 130, 131, 132, 142, 143, 144, 185, 205, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 503, 510, 547, 553, 572, 577, 578, 580, 582, 609, 774, 776, 786, 809, 812, 872, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 275, 279, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 345, 349, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 434, 435, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 489, 494, 499, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 583, 587, 588, 592, 593, 597, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 631, 634, 637, 640, 643, 646, 650, 653, 654, 657, 660, 663, 666, 669, 670, 673, 676, 679, 682, 685, 688, 691, 694, 695, 700, 705, 710, 711, 716, 720, 724, 728, 732, 736, 740, 744, 749, 750, 754, 758, 762, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 825, 830, 831, 835, 839, 843, 847, 851, 855, 859, 863, 864, 868, 872, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917], "backend_handl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 872], "contextmanag": 0, "modul": [0, 3, 4, 15, 17, 20, 64, 65, 68, 69, 70, 71, 72, 109, 110, 116, 117, 118, 120, 124, 127, 128, 130, 132, 143, 144, 503, 554, 797, 798, 802, 872, 880, 881, 882, 883, 884, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 913, 914], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120, 121, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917], "base": [0, 18, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 119, 121, 127, 143, 166, 176, 185, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 266, 353, 356, 397, 400, 401, 404, 405, 408, 409, 412, 452, 455, 503, 538, 561, 568, 577, 814, 815, 816, 818, 830, 831, 834, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "object": [0, 68, 69, 70, 71, 72, 129, 132, 166, 172, 185, 202, 219, 261, 577, 774, 777, 779, 781, 782, 783, 788, 789, 790, 791, 797, 808, 885, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 903, 904], "__init__": [0, 3, 4, 68, 69, 70, 71, 72, 112, 118, 122, 127, 129, 130, 131, 132, 185, 219, 226, 227, 228, 229, 230, 231, 577, 797, 798, 802, 872, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "choose_random_backend": 0, "exclud": [0, 1, 114, 127, 166, 167, 797, 803, 805], "none": [0, 1, 4, 11, 23, 24, 25, 26, 27, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 117, 121, 122, 123, 124, 125, 127, 129, 131, 132, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 191, 193, 195, 197, 198, 199, 202, 205, 219, 226, 227, 234, 235, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 541, 543, 544, 548, 554, 556, 559, 560, 561, 562, 567, 568, 574, 577, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 780, 785, 786, 787, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 883, 884, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "clear_backend_stack": 0, "current_backend": [0, 70, 71, 112, 117], "arg": [0, 3, 20, 23, 24, 25, 68, 69, 127, 129, 131, 219, 226, 240, 244, 248, 260, 503, 560, 883, 884, 903, 904], "kwarg": [0, 3, 23, 24, 25, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 129, 131, 219, 226, 240, 244, 248, 503, 553, 883, 884, 903, 904], "return": [0, 3, 4, 11, 23, 24, 25, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 877, 883, 884, 891, 900, 901, 907, 911], "current": [0, 3, 4, 11, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 117, 123, 127, 132, 143, 144, 185, 203, 204, 206, 218, 219, 226, 249, 250, 254, 256, 503, 537, 544, 548, 555, 557, 774, 775, 784, 785, 872], "prioriti": [0, 3, 18, 68, 69, 124], "global_backend": [0, 3], "argument": [0, 3, 4, 13, 19, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 111, 112, 113, 114, 116, 117, 118, 120, 121, 127, 129, 130, 163, 164, 166, 167, 185, 191, 194, 210, 219, 226, 227, 240, 244, 248, 266, 279, 282, 284, 287, 328, 331, 361, 364, 444, 447, 476, 479, 480, 483, 489, 493, 503, 509, 510, 514, 524, 531, 553, 560, 611, 614, 623, 710, 744, 747, 774, 780, 792, 793, 796, 830, 835, 838, 855, 858, 863, 864, 867, 875, 877, 883, 884, 903, 904], "": [0, 3, 4, 5, 11, 14, 15, 16, 17, 18, 20, 23, 26, 27, 68, 69, 111, 113, 114, 116, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 165, 166, 177, 181, 182, 185, 203, 204, 219, 235, 259, 266, 456, 459, 503, 512, 577, 583, 585, 588, 590, 593, 595, 601, 603, 624, 673, 675, 676, 678, 774, 780, 786, 830, 851, 854, 859, 862, 872, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "paramet": [0, 3, 4, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 112, 113, 116, 129, 130, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 507, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 581, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 875, 877, 883, 884, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "from": [0, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 166, 167, 168, 170, 172, 173, 174, 177, 178, 180, 184, 185, 191, 194, 210, 219, 226, 227, 235, 250, 254, 259, 260, 266, 369, 372, 476, 479, 503, 524, 531, 532, 535, 571, 577, 583, 585, 593, 595, 611, 619, 622, 624, 634, 636, 673, 675, 685, 687, 710, 728, 731, 740, 743, 750, 753, 770, 771, 772, 773, 774, 776, 786, 787, 797, 798, 799, 800, 802, 803, 805, 809, 813, 814, 815, 817, 830, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 878, 883, 884, 891, 899, 902, 907, 911], "which": [0, 3, 4, 13, 14, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 155, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 191, 194, 196, 200, 202, 205, 206, 218, 219, 226, 227, 236, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 256, 258, 259, 260, 266, 456, 459, 503, 509, 521, 522, 524, 531, 532, 535, 537, 543, 547, 555, 556, 557, 559, 560, 575, 577, 583, 585, 587, 588, 590, 593, 595, 597, 599, 601, 603, 606, 608, 609, 611, 622, 624, 628, 630, 634, 636, 650, 652, 670, 672, 673, 675, 685, 687, 688, 690, 694, 700, 703, 705, 708, 710, 716, 719, 728, 731, 736, 739, 744, 747, 749, 754, 757, 774, 779, 780, 781, 782, 787, 788, 789, 790, 791, 797, 798, 799, 800, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 875, 877, 883, 884, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "try": [0, 3, 12, 14, 15, 17, 18, 19, 20, 68, 69, 120, 121, 129, 144, 503, 574, 872], "infer": [0, 3, 111, 118, 122, 123, 127, 132, 163, 164, 166, 167, 168, 170, 173, 174, 178, 180, 184, 266, 369, 372, 503, 540, 565, 710, 740, 743], "when": [0, 3, 13, 14, 17, 18, 19, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 144, 185, 188, 219, 266, 279, 282, 357, 360, 452, 455, 503, 514, 547, 568, 694, 695, 698, 700, 703, 705, 708, 774, 785, 809, 810, 811, 813, 830, 835, 838, 843, 846, 851, 854, 859, 862, 872, 903, 904], "i": [0, 3, 4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 155, 156, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 191, 194, 200, 206, 207, 208, 218, 219, 226, 227, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 255, 259, 260, 262, 263, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 304, 307, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 365, 368, 377, 380, 381, 384, 385, 388, 397, 400, 401, 404, 409, 412, 413, 416, 433, 434, 435, 438, 440, 443, 444, 447, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 489, 493, 494, 498, 499, 502, 503, 504, 507, 511, 512, 514, 515, 516, 518, 521, 522, 524, 528, 530, 531, 542, 543, 547, 549, 550, 551, 552, 553, 554, 558, 559, 560, 563, 575, 576, 577, 583, 585, 588, 590, 592, 593, 595, 597, 599, 601, 603, 606, 611, 614, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 646, 649, 650, 652, 654, 656, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 679, 681, 682, 684, 685, 687, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 754, 757, 766, 769, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 787, 792, 793, 796, 797, 798, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 883, 884, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912], "global": [0, 3, 4, 5, 11, 68, 69, 70, 71, 72, 117, 118, 122, 123, 127, 185, 197, 198, 199, 219, 226, 227, 258, 259, 260, 503, 538, 539, 558, 561, 562, 563, 567, 568, 792, 793, 796, 905, 906], "set": [0, 3, 4, 5, 11, 13, 16, 18, 23, 26, 27, 57, 68, 69, 102, 111, 112, 117, 119, 120, 121, 122, 123, 124, 127, 129, 130, 219, 235, 245, 246, 257, 258, 259, 260, 266, 296, 299, 503, 504, 507, 561, 562, 563, 564, 577, 583, 585, 588, 590, 592, 593, 595, 597, 599, 601, 603, 624, 628, 630, 650, 652, 654, 656, 663, 665, 670, 672, 774, 775, 784, 785, 786, 790, 791, 797, 807, 809, 810, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 851, 854, 859, 862, 891, 900, 907, 908, 909, 910, 911, 912], "ret": [0, 3, 4, 11, 23, 24, 25, 26, 27, 68, 69, 112, 113, 127, 132, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 219, 226, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 507, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 559, 560, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 581, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 875, 877, 883, 884, 907, 911], "exampl": [0, 3, 4, 5, 11, 15, 17, 18, 19, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 64, 65, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 143, 144, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 173, 174, 177, 179, 180, 183, 184, 185, 188, 191, 192, 193, 194, 195, 203, 204, 219, 235, 236, 238, 250, 251, 252, 253, 254, 257, 259, 261, 263, 264, 266, 279, 280, 281, 282, 283, 284, 287, 300, 303, 304, 307, 308, 311, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 353, 356, 361, 362, 363, 364, 369, 372, 373, 376, 389, 392, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 507, 508, 511, 512, 520, 521, 528, 531, 532, 533, 534, 535, 536, 539, 550, 565, 566, 571, 572, 573, 577, 578, 579, 580, 581, 582, 611, 612, 614, 616, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 643, 645, 654, 656, 660, 662, 673, 675, 679, 681, 682, 684, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 757, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 851, 854, 855, 858, 863, 864, 867, 872], "If": [0, 3, 4, 5, 13, 16, 17, 18, 19, 20, 23, 26, 27, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 132, 144, 166, 167, 169, 170, 171, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 188, 190, 210, 219, 235, 259, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 397, 400, 401, 404, 409, 412, 413, 416, 421, 424, 425, 428, 435, 438, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 503, 547, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 624, 625, 627, 628, 630, 650, 652, 654, 656, 663, 665, 666, 668, 670, 672, 673, 675, 685, 687, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 724, 727, 728, 731, 744, 747, 749, 750, 753, 754, 757, 770, 771, 772, 774, 786, 787, 797, 802, 803, 805, 809, 810, 811, 812, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872], "import": [0, 3, 14, 19, 64, 65, 109, 110, 112, 113, 114, 118, 120, 121, 122, 123, 124, 127, 129, 130, 132, 144, 219, 257, 872, 878], "numpi": [0, 3, 4, 5, 13, 14, 18, 19, 68, 69, 116, 118, 122, 123, 124, 125, 127, 129, 132, 503, 572, 830, 831, 834, 872], "np": [0, 3, 120, 122, 123, 124, 125, 129, 130, 132, 872], "x": [0, 3, 11, 20, 23, 26, 27, 30, 31, 34, 35, 36, 37, 48, 49, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 93, 94, 97, 98, 103, 104, 112, 113, 114, 117, 118, 121, 124, 125, 127, 129, 130, 131, 132, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 170, 172, 174, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 200, 219, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 250, 254, 259, 261, 266, 267, 270, 271, 274, 275, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 349, 352, 353, 356, 357, 360, 361, 362, 363, 364, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 397, 400, 401, 404, 405, 408, 409, 412, 421, 424, 433, 434, 440, 443, 448, 451, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 507, 511, 512, 513, 515, 516, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 542, 543, 545, 546, 547, 549, 550, 551, 552, 556, 565, 566, 569, 571, 572, 573, 575, 576, 577, 587, 592, 606, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 650, 652, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 673, 675, 676, 678, 679, 681, 682, 684, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 761, 762, 765, 766, 769, 774, 775, 780, 784, 785, 786, 792, 793, 796, 797, 799, 800, 801, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 828, 829, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 891, 902], "arrai": [0, 3, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 144, 145, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 193, 194, 195, 200, 202, 205, 207, 208, 210, 214, 219, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 256, 260, 261, 266, 267, 270, 271, 274, 275, 278, 279, 281, 282, 283, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 330, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 363, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 502, 503, 504, 506, 507, 508, 511, 512, 513, 515, 516, 518, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 549, 550, 552, 555, 556, 557, 559, 560, 565, 566, 569, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 585, 588, 590, 592, 593, 595, 597, 599, 601, 603, 606, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 713, 714, 715, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 746, 747, 748, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 776, 786, 787, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 875, 877, 891, 899, 902], "2": [0, 3, 17, 18, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 114, 118, 121, 125, 126, 127, 129, 130, 131, 132, 144, 155, 157, 158, 159, 160, 162, 165, 166, 173, 174, 177, 179, 180, 184, 185, 188, 191, 192, 193, 194, 195, 219, 235, 236, 238, 250, 252, 254, 261, 266, 279, 280, 281, 282, 283, 284, 287, 292, 295, 296, 299, 304, 307, 308, 311, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 353, 356, 361, 362, 363, 364, 369, 372, 373, 376, 389, 392, 409, 412, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 507, 511, 512, 515, 516, 518, 521, 528, 531, 532, 533, 534, 535, 536, 550, 565, 566, 571, 577, 578, 579, 580, 581, 582, 611, 614, 615, 616, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 635, 636, 643, 645, 646, 649, 650, 652, 654, 656, 660, 662, 663, 665, 666, 668, 673, 675, 679, 680, 681, 682, 684, 688, 689, 690, 694, 695, 698, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 753, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 863, 864, 867, 872], "0": [0, 3, 18, 34, 35, 36, 37, 38, 39, 44, 45, 48, 49, 50, 51, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 127, 129, 130, 131, 132, 155, 157, 158, 159, 160, 161, 162, 166, 167, 171, 175, 176, 180, 181, 182, 183, 184, 185, 188, 191, 193, 194, 195, 202, 219, 220, 223, 226, 228, 232, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 257, 259, 260, 264, 266, 267, 270, 271, 274, 275, 278, 279, 282, 283, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 312, 315, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 362, 363, 364, 373, 376, 397, 400, 401, 404, 409, 412, 433, 434, 435, 438, 440, 443, 444, 447, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 511, 512, 515, 516, 518, 520, 521, 522, 528, 531, 532, 535, 536, 541, 550, 556, 559, 560, 565, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 611, 612, 614, 616, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 635, 636, 643, 645, 673, 675, 679, 681, 682, 683, 684, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 735, 736, 739, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 761, 766, 768, 774, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 830, 831, 834, 835, 838, 839, 842, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 867, 872, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914], "print": [0, 3, 4, 5, 11, 17, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 64, 65, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 109, 110, 114, 121, 127, 129, 130, 131, 155, 157, 158, 159, 160, 161, 162, 166, 173, 174, 177, 179, 180, 183, 184, 185, 188, 191, 192, 193, 194, 195, 203, 204, 219, 236, 250, 251, 252, 253, 254, 256, 259, 263, 266, 279, 280, 281, 282, 283, 284, 287, 300, 303, 304, 307, 308, 311, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 353, 356, 361, 362, 363, 364, 369, 372, 373, 376, 389, 392, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 507, 508, 511, 512, 520, 521, 528, 531, 532, 533, 534, 535, 536, 539, 557, 565, 566, 571, 572, 573, 577, 578, 579, 581, 582, 611, 612, 614, 616, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 643, 645, 660, 662, 673, 675, 679, 681, 682, 684, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 724, 727, 728, 731, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 753, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 851, 854, 855, 858, 863, 864, 867, 872], "function": [0, 3, 4, 5, 13, 18, 20, 23, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 64, 65, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 124, 126, 128, 129, 130, 131, 142, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 362, 363, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 875, 877, 880, 881, 882, 907, 910, 912], "py": [0, 3, 4, 18, 112, 113, 117, 118, 122, 123, 125, 127, 129, 131, 132, 797, 798, 802], "noqa": [0, 3, 4, 166, 177, 185, 191, 194, 266, 279, 282, 304, 307, 324, 327, 328, 331, 336, 339, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 830, 835, 838], "The": [0, 3, 4, 12, 13, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 143, 155, 156, 157, 160, 162, 163, 164, 166, 167, 172, 176, 177, 181, 182, 185, 186, 187, 188, 196, 201, 203, 204, 206, 209, 214, 218, 219, 226, 227, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 503, 509, 511, 514, 515, 523, 524, 530, 532, 535, 545, 546, 547, 549, 550, 551, 552, 554, 559, 560, 561, 562, 563, 566, 567, 568, 576, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 606, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 749, 762, 765, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 802, 809, 810, 811, 812, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 883, 884, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911], "set_backend": [0, 3, 4, 11, 117, 118, 119, 122, 185, 203, 204, 219, 257, 503, 565, 872], "ha": [0, 3, 4, 13, 14, 15, 18, 68, 69, 113, 114, 117, 118, 119, 122, 123, 127, 129, 131, 132, 143, 144, 166, 177, 219, 235, 266, 267, 270, 435, 438, 452, 455, 624, 646, 649, 669, 670, 672, 673, 675, 682, 684, 710, 724, 727, 750, 753, 814, 815, 816, 818, 830, 839, 842, 847, 850, 851, 854, 855, 858, 859, 862], "over": [0, 3, 13, 15, 17, 64, 65, 68, 69, 109, 110, 113, 114, 118, 124, 129, 144, 624, 650, 652, 679, 681, 685, 687, 688, 690, 792, 793, 796, 797, 803, 805, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 905, 906], "ani": [0, 3, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 62, 63, 64, 65, 68, 69, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 163, 164, 166, 168, 178, 185, 191, 194, 219, 261, 266, 279, 282, 284, 287, 328, 331, 345, 348, 361, 364, 373, 376, 393, 396, 444, 447, 476, 479, 480, 483, 489, 493, 503, 504, 507, 524, 525, 526, 527, 528, 531, 542, 549, 550, 551, 552, 567, 568, 577, 587, 611, 614, 621, 623, 710, 744, 747, 770, 771, 772, 773, 774, 780, 784, 792, 793, 796, 797, 803, 805, 830, 835, 838, 863, 864, 867, 872], "pass": [0, 3, 19, 64, 65, 68, 69, 70, 71, 72, 109, 110, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 129, 144, 185, 196, 219, 226, 260, 266, 296, 299, 503, 514, 547, 577, 609, 770, 771, 772, 883, 884, 903, 904, 907, 911, 913, 914], "jax": [0, 3, 4, 5, 14, 15, 18, 19, 118, 122, 123, 124, 125, 127, 129, 132, 144, 577, 592, 814, 815, 816, 818, 872], "get_backend": [0, 117, 118], "specifi": [0, 4, 68, 69, 111, 116, 117, 122, 123, 124, 125, 127, 130, 131, 132, 166, 167, 169, 173, 175, 176, 179, 181, 182, 183, 185, 188, 190, 219, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 254, 256, 259, 260, 261, 266, 456, 459, 503, 509, 521, 531, 532, 535, 542, 575, 624, 634, 636, 650, 652, 679, 681, 682, 684, 685, 687, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 728, 731, 744, 747, 750, 753, 754, 757, 766, 769, 774, 779, 781, 782, 788, 789, 790, 791, 809, 810, 811, 814, 815, 816, 818, 819, 820, 823, 830, 831, 834, 847, 850, 855, 858, 863, 864, 867, 868, 871], "isn": [0, 4, 18, 130, 144], "t": [0, 4, 14, 15, 17, 18, 19, 20, 64, 65, 109, 110, 114, 122, 127, 129, 130, 131, 132, 144, 503, 512, 611, 620, 621], "associ": [0, 4, 18, 117, 119, 144, 266, 279, 282, 435, 438, 624, 654, 656, 663, 665, 691, 693], "option": [0, 4, 17, 18, 23, 24, 25, 26, 27, 64, 65, 68, 69, 109, 110, 112, 113, 114, 117, 121, 122, 123, 124, 125, 127, 132, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 196, 197, 198, 199, 206, 218, 219, 235, 259, 260, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 509, 515, 516, 518, 521, 522, 523, 525, 526, 527, 529, 531, 532, 535, 543, 554, 556, 559, 560, 567, 568, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 775, 780, 785, 786, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 813, 814, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "str": [0, 4, 23, 24, 25, 68, 69, 122, 123, 166, 177, 185, 186, 196, 197, 198, 201, 202, 205, 206, 207, 208, 211, 212, 213, 218, 219, 232, 235, 236, 238, 241, 242, 243, 244, 260, 503, 509, 523, 525, 526, 527, 554, 559, 560, 611, 612, 614, 616, 617, 618, 624, 666, 668, 770, 771, 772, 773, 774, 780, 830, 831, 834], "we": [0, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 64, 65, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 143, 144, 577, 587, 872, 878], "want": [0, 4, 14, 16, 17, 18, 64, 65, 109, 110, 116, 130, 131, 132, 144], "retriev": [0, 4, 18, 503, 509], "e": [0, 4, 14, 15, 16, 18, 20, 111, 121, 130, 144, 165, 166, 177, 185, 187, 210, 219, 232, 266, 267, 270, 296, 299, 312, 315, 320, 323, 328, 331, 353, 356, 361, 364, 365, 368, 377, 380, 397, 400, 405, 408, 433, 434, 440, 443, 452, 455, 456, 459, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 624, 628, 630, 646, 649, 654, 656, 663, 665, 670, 672, 673, 675, 688, 690, 710, 754, 757, 797, 802, 803, 805, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862], "one": [0, 4, 14, 15, 17, 18, 68, 69, 79, 80, 81, 82, 93, 94, 97, 98, 114, 117, 120, 121, 122, 124, 125, 126, 129, 130, 132, 144, 166, 167, 177, 185, 189, 191, 194, 219, 245, 246, 247, 248, 260, 279, 283, 503, 504, 506, 507, 508, 532, 536, 553, 556, 559, 560, 624, 646, 649, 650, 652, 660, 662, 666, 668, 685, 687, 688, 690, 710, 711, 715, 724, 727, 728, 731, 744, 747, 748, 750, 753, 799, 801, 809, 810, 812, 814, 815, 816, 817, 818, 830, 831, 834, 872], "default": [0, 4, 18, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 113, 114, 117, 118, 121, 122, 123, 125, 131, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 197, 198, 199, 200, 219, 226, 227, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 255, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 507, 509, 515, 516, 518, 521, 522, 525, 526, 527, 529, 530, 531, 532, 535, 540, 541, 542, 543, 544, 547, 548, 549, 550, 552, 553, 554, 556, 558, 559, 560, 563, 565, 567, 568, 575, 576, 577, 578, 581, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 787, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 883, 884, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "torch": [0, 4, 11, 18, 112, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 163, 164, 185, 203, 204, 219, 257, 503, 565, 710, 724, 727, 872], "tensorflow": [0, 4, 11, 14, 15, 18, 19, 122, 123, 124, 125, 127, 132, 144, 872], "mxnet": [0, 4, 14, 19, 122, 123, 124, 127, 132, 872], "either": [0, 4, 11, 17, 18, 20, 68, 69, 113, 114, 117, 118, 121, 122, 123, 127, 129, 130, 144, 166, 172, 266, 279, 282, 296, 299, 381, 384, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 456, 459, 464, 467, 468, 471, 489, 493, 503, 524, 549, 553, 554, 624, 646, 649, 770, 771, 772, 773, 830, 847, 850, 855, 858, 891, 902, 903, 904], "doesn": [0, 4, 17, 20, 114, 122, 127, 144], "matter": [0, 4, 13, 114], "been": [0, 4, 18, 113, 117, 118, 121, 122, 123, 125, 127, 143, 144, 219, 235, 503, 525, 526, 527, 797, 798], "ivy_np": [0, 4], "us": [0, 4, 11, 15, 18, 19, 64, 65, 68, 69, 70, 71, 72, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 143, 144, 155, 157, 158, 159, 160, 161, 162, 165, 185, 201, 219, 226, 227, 251, 255, 258, 259, 260, 261, 263, 265, 266, 284, 287, 304, 307, 324, 327, 336, 339, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 503, 531, 538, 539, 553, 559, 560, 561, 562, 567, 568, 577, 578, 581, 583, 585, 593, 595, 597, 599, 611, 617, 619, 620, 622, 623, 624, 631, 633, 634, 636, 650, 652, 694, 695, 698, 710, 724, 727, 728, 731, 736, 739, 744, 747, 758, 761, 770, 771, 772, 773, 774, 775, 777, 783, 784, 785, 787, 792, 793, 796, 809, 810, 811, 812, 814, 815, 816, 830, 831, 834, 863, 864, 867, 872, 891, 899, 902, 903, 904, 905, 906, 907, 909, 910], "ivy_jax": [0, 4], "subsequ": [0, 5, 17, 114, 116, 117, 120, 124, 125, 131], "call": [0, 5, 11, 14, 20, 70, 71, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 219, 260, 503, 558, 563, 574, 577, 587, 774, 775, 780, 784, 785, 891, 902, 903, 904, 907, 911], "nativ": [0, 5, 23, 25, 26, 27, 68, 69, 122, 124, 129, 130, 166, 178, 185, 186, 187, 196, 219, 232, 233, 234, 235, 236, 255, 262, 265, 503, 547, 549, 552, 883, 884], "native_arrai": [0, 5, 11, 36, 37, 70, 71, 81, 82, 155, 157, 158, 159, 160, 161, 162, 166, 177, 185, 191, 194, 219, 238, 254, 266, 284, 287, 304, 307, 324, 327, 328, 331, 361, 364, 373, 376, 433, 434, 440, 443, 444, 447, 476, 479, 480, 483, 494, 498, 503, 504, 505, 506, 507, 508, 512, 520, 521, 528, 531, 532, 535, 566, 571, 572, 573, 577, 578, 581, 611, 614, 617, 618, 623, 624, 628, 630, 631, 633, 634, 636, 679, 681, 694, 695, 698, 705, 708, 710, 711, 714, 724, 727, 728, 731, 736, 739, 749, 758, 761, 792, 793, 796, 797, 798, 809, 810, 811, 812, 813, 814, 815, 816, 830, 831, 834, 835, 838, 863, 864, 867], "1": [0, 5, 11, 14, 15, 20, 30, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 114, 117, 121, 124, 125, 126, 127, 129, 130, 131, 132, 144, 155, 157, 158, 159, 160, 162, 166, 167, 174, 175, 176, 177, 179, 180, 184, 185, 188, 191, 192, 193, 194, 195, 202, 219, 222, 225, 226, 230, 235, 236, 238, 240, 244, 248, 250, 253, 254, 261, 266, 271, 274, 275, 278, 279, 280, 281, 282, 283, 284, 287, 296, 299, 304, 307, 308, 311, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 362, 363, 364, 369, 372, 373, 376, 389, 392, 397, 400, 401, 404, 405, 408, 409, 412, 433, 434, 440, 443, 444, 447, 452, 455, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 507, 508, 511, 512, 520, 521, 528, 531, 532, 533, 534, 535, 536, 550, 556, 559, 560, 565, 566, 568, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 643, 645, 654, 656, 660, 662, 670, 672, 673, 675, 679, 681, 682, 684, 685, 686, 687, 688, 690, 694, 695, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 757, 758, 761, 774, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "type": [0, 5, 11, 17, 19, 23, 24, 25, 26, 27, 31, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 232, 233, 234, 235, 236, 238, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 545, 546, 547, 549, 550, 551, 552, 556, 559, 560, 561, 562, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902], "ndarrai": [0, 5, 120, 122, 123, 124, 125, 129, 166, 168, 178, 503, 572], "Or": [0, 5, 130], "jaxlib": [0, 5, 17, 122, 123, 125, 129], "xla_extens": [0, 5, 122, 123, 125, 129], "devicearrai": [0, 5, 129], "try_import_ivy_jax": 0, "warn": [0, 6, 7, 8, 9, 10], "fals": [0, 6, 7, 8, 9, 10, 23, 24, 25, 26, 27, 36, 37, 44, 45, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 121, 124, 130, 131, 132, 185, 188, 191, 193, 194, 195, 200, 219, 235, 236, 247, 251, 252, 255, 260, 263, 265, 266, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 307, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 424, 425, 427, 428, 429, 431, 435, 437, 439, 440, 442, 444, 446, 447, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 503, 504, 505, 506, 507, 508, 511, 512, 516, 517, 521, 524, 528, 530, 532, 534, 536, 540, 547, 549, 550, 552, 553, 565, 575, 577, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 624, 625, 626, 627, 646, 648, 650, 651, 652, 673, 675, 688, 689, 690, 695, 697, 699, 700, 702, 704, 705, 707, 709, 710, 711, 713, 715, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 749, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 787, 793, 795, 797, 798, 803, 804, 806, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 883, 884, 903, 904, 907, 908, 909, 910, 911, 912], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 118], "unset": [0, 11, 118, 127, 129], "adjust": [0, 11, 830, 851, 854, 859, 862], "dict": [0, 11, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 121, 130, 131, 219, 226, 227, 235, 238, 241, 242, 243, 244, 503, 509, 525, 526, 527, 774, 776, 777, 780, 783, 786, 787], "previous": [0, 11, 17, 20, 116, 117, 127, 503, 514], "otherwis": [0, 11, 23, 24, 25, 26, 27, 68, 69, 120, 122, 123, 125, 127, 129, 166, 167, 185, 188, 191, 194, 197, 198, 199, 219, 235, 266, 377, 380, 381, 384, 385, 388, 503, 513, 574, 577, 592, 606, 624, 625, 627, 631, 633, 685, 687, 688, 690, 770, 771, 772, 774, 787, 809, 810, 811, 813, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "implement": [0, 11, 18, 19, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 185, 188, 210, 219, 261, 266, 267, 270, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 296, 299, 332, 335, 336, 339, 353, 356, 357, 360, 397, 400, 401, 404, 405, 408, 409, 412, 435, 438, 452, 455, 456, 459, 468, 471, 472, 475, 489, 493, 494, 498, 624, 637, 639, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 872], "wa": [0, 11, 14, 68, 69, 114, 127, 129, 503, 574, 774, 787, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "last": [0, 11, 15, 18, 68, 69, 114, 118, 144, 155, 160, 219, 235, 611, 621, 624, 628, 630, 634, 636, 650, 652, 682, 684, 685, 687, 694, 700, 703, 705, 708, 710, 728, 731, 744, 747, 749, 754, 757, 819, 820, 823, 825, 828, 863, 864, 867, 868, 871, 891, 901], "henc": [0, 11, 814, 815, 816, 818], "here": [0, 11, 17, 18, 19, 112, 114, 121, 125, 127, 128, 129, 130, 131, 132, 143, 144], "tensor": [0, 11, 13, 68, 69, 112, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 166, 175, 176, 185, 200, 266, 304, 307, 433, 434, 503, 556, 559, 560, 611, 619, 621, 624, 679, 681, 710, 724, 727, 740, 743, 749, 797, 798, 809, 812, 872, 891, 899, 901], "howev": [0, 11, 14, 17, 19, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 129, 130, 131, 132, 144], "befor": [0, 11, 17, 18, 19, 68, 69, 113, 116, 120, 122, 123, 124, 127, 130, 144, 219, 260, 266, 499, 502, 611, 622, 623, 770, 771, 772, 774, 786, 814, 815, 816, 818, 830, 847, 850, 855, 858], "becom": [0, 11, 13, 15, 18, 114, 121, 127, 132, 144, 710, 711, 714], "swap": [0, 11, 710, 758, 761], "python": [0, 11, 12, 13, 14, 17, 18, 20, 127, 129, 130, 144, 166, 167, 219, 255, 265, 266, 456, 459, 872, 878], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 23, 24, 25, 26, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 68, 69, 71, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 111, 115, 117, 118, 119, 120, 123, 125, 126, 129, 132, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 877, 878, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 917], "op": [0, 11, 112, 127, 144], "eagertensor": [0, 11], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 24, 25, 26, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 68, 69, 71, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 877, 878, 881, 882, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 917], "backend": [3, 4, 5, 11, 13, 18, 19, 23, 25, 27, 68, 69, 111, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 129, 132, 185, 203, 204, 206, 218, 219, 251, 253, 263, 503, 544, 547, 548, 554, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 609, 872, 878, 883, 884, 907, 908, 909, 910, 911, 912], "ml": [12, 14, 15, 16, 126, 127, 128, 130, 131, 132, 143, 872, 878], "explos": [12, 14, 872], "A": [12, 13, 14, 15, 20, 68, 69, 70, 71, 72, 111, 116, 117, 121, 122, 123, 127, 130, 144, 166, 171, 178, 219, 226, 227, 260, 266, 448, 451, 503, 539, 571, 624, 660, 662, 669, 670, 672, 673, 675, 710, 749, 754, 757, 774, 775, 777, 779, 781, 782, 783, 784, 785, 788, 789, 790, 791, 830, 831, 834, 863, 864, 867, 868, 871, 872, 913, 914], "huge": [12, 14, 130, 872], "number": [12, 13, 17, 68, 69, 70, 71, 72, 114, 121, 123, 124, 127, 130, 132, 163, 164, 165, 166, 167, 168, 171, 175, 176, 177, 178, 185, 189, 201, 202, 205, 207, 208, 210, 219, 252, 253, 254, 266, 279, 282, 296, 299, 328, 331, 361, 364, 365, 368, 433, 434, 435, 438, 452, 455, 456, 459, 460, 463, 464, 467, 499, 502, 503, 504, 507, 530, 539, 540, 555, 573, 576, 611, 622, 624, 637, 639, 654, 656, 669, 673, 675, 685, 687, 710, 711, 714, 720, 723, 732, 735, 736, 739, 744, 747, 749, 754, 757, 762, 765, 766, 769, 770, 771, 772, 773, 797, 798, 807, 809, 812, 814, 815, 816, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902], "tool": [12, 15, 18, 128, 132, 143, 144, 872], "have": [12, 13, 14, 15, 17, 18, 19, 20, 68, 69, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 143, 144, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 202, 219, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 525, 526, 527, 529, 532, 535, 543, 556, 559, 560, 577, 592, 606, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872], "explod": [12, 13, 872], "onto": [12, 13, 219, 245, 246, 774, 780, 786, 872], "scene": [12, 13, 111, 126, 128, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 872], "b": [12, 15, 16, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 111, 114, 117, 118, 121, 126, 127, 128, 130, 131, 132, 142, 185, 191, 193, 194, 195, 219, 238, 266, 279, 281, 282, 283, 284, 287, 304, 307, 324, 327, 328, 330, 331, 336, 339, 361, 363, 364, 373, 376, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 492, 493, 494, 495, 497, 498, 503, 504, 506, 507, 508, 511, 512, 520, 521, 528, 531, 532, 534, 535, 536, 573, 577, 578, 580, 581, 582, 611, 614, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 660, 662, 670, 672, 679, 681, 691, 693, 694, 695, 698, 710, 711, 713, 714, 715, 724, 727, 728, 731, 736, 739, 744, 746, 747, 748, 754, 757, 758, 761, 792, 793, 796, 797, 799, 801, 802, 803, 805, 809, 811, 812, 813, 819, 820, 823, 830, 831, 834, 835, 838, 863, 864, 867, 872, 878], "why": [12, 14, 18, 121, 124, 125, 129, 872], "unifi": [12, 14, 68, 69, 120, 127, 144, 219, 245, 246, 247, 248, 260, 872], "should": [12, 14, 17, 18, 19, 20, 68, 69, 70, 71, 72, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 131, 163, 164, 166, 177, 181, 182, 185, 190, 219, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 353, 356, 357, 360, 361, 364, 377, 380, 381, 384, 385, 388, 389, 392, 397, 400, 401, 404, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 514, 547, 556, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 643, 645, 646, 649, 654, 656, 660, 662, 663, 665, 666, 668, 670, 672, 673, 675, 679, 681, 682, 684, 685, 687, 688, 690, 710, 740, 743, 797, 808, 809, 810, 811, 814, 815, 816, 818, 830, 831, 834, 835, 838, 839, 842, 847, 850, 851, 854, 855, 858, 859, 862, 872], "them": [12, 13, 14, 15, 116, 118, 120, 121, 127, 129, 130, 131, 144, 872], "c": [12, 14, 15, 16, 17, 97, 98, 111, 114, 117, 121, 126, 127, 128, 130, 144, 266, 444, 447, 503, 511, 512, 520, 573, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 617, 710, 754, 757, 799, 801, 809, 812, 830, 831, 834, 851, 854, 859, 862, 872, 878], "standard": [12, 111, 112, 113, 115, 116, 120, 124, 125, 144, 166, 177, 185, 191, 194, 202, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 797, 802, 814, 815, 816, 819, 820, 823, 830, 835, 838, 851, 854, 859, 862, 863, 864, 867, 872, 878, 905, 906], "re": [12, 13, 14, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 144, 219, 260, 503, 525, 624, 679, 681, 710, 744, 747, 809, 813, 872], "collabor": [12, 13, 14, 872], "consortium": [12, 14, 872, 878], "data": [12, 14, 68, 69, 70, 71, 72, 111, 112, 113, 117, 119, 121, 123, 124, 125, 129, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 194, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 232, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 511, 512, 549, 550, 552, 569, 577, 592, 609, 611, 620, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 670, 672, 673, 675, 679, 681, 682, 684, 685, 687, 688, 690, 710, 724, 727, 728, 731, 732, 735, 740, 743, 744, 747, 750, 753, 754, 757, 797, 808, 809, 810, 811, 812, 819, 820, 823, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 878, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902], "api": [12, 13, 17, 18, 111, 113, 114, 116, 117, 119, 120, 122, 123, 124, 125, 126, 128, 130, 144, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867, 872, 878], "open": [13, 14, 15, 16, 17, 20, 113, 143, 166, 167, 797, 799, 800, 803, 805, 872], "project": [13, 14, 15, 17, 18, 20, 112, 118, 129, 131, 143, 144, 797, 798, 802], "grown": 13, "consider": [13, 114, 125], "recent": [13, 14, 17, 18], "year": [13, 15, 144, 872], "especi": [13, 17], "deep": [13, 16, 18, 19, 68, 69, 126, 130, 872], "learn": [13, 14, 17, 19, 111, 117, 126, 132, 143, 266, 369, 372, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 770, 771, 772, 773, 872, 907, 908, 909, 910, 911, 912], "can": [13, 14, 15, 16, 17, 18, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 166, 168, 178, 185, 191, 194, 219, 258, 259, 260, 624, 643, 645, 710, 740, 743, 797, 799, 800, 872, 878], "seen": [13, 14, 114, 129, 130], "rapidli": 13, "increas": [13, 219, 240, 244, 248, 710, 720, 723, 766, 769, 774, 786], "github": [13, 18, 19, 113, 116], "repo": [13, 14, 15, 17, 18, 115, 127, 129, 130, 131, 132, 143, 872, 878], "contain": [13, 17, 18, 19, 20, 23, 26, 27, 36, 37, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 122, 124, 125, 126, 127, 128, 131, 132, 144, 155, 158, 159, 161, 166, 167, 170, 172, 179, 181, 182, 183, 185, 191, 194, 219, 237, 238, 241, 250, 254, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 505, 507, 509, 512, 515, 516, 518, 520, 521, 528, 531, 532, 535, 542, 551, 571, 572, 573, 577, 578, 581, 583, 588, 593, 597, 601, 611, 614, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 720, 724, 727, 728, 731, 732, 735, 736, 739, 740, 744, 747, 749, 750, 754, 758, 761, 762, 766, 770, 771, 772, 773, 774, 787, 792, 793, 796, 797, 798, 799, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 825, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 907, 911, 913, 914], "term": [13, 18, 121, 611, 621, 891, 901], "time": [13, 14, 15, 17, 18, 19, 116, 117, 121, 122, 125, 127, 130, 132, 144, 577, 583, 585, 593, 595, 611, 621, 710, 762, 765, 770, 771, 772, 773, 809, 810, 811, 814, 815, 816, 891, 902, 903, 904], "These": [13, 14, 15, 18, 113, 114, 116, 117, 121, 122, 124, 125, 127, 128, 130, 131, 132, 144, 624, 637, 639, 872, 878], "ar": [13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 145, 153, 166, 167, 219, 226, 227, 250, 254, 256, 260, 266, 332, 335, 421, 424, 425, 428, 460, 463, 468, 471, 489, 493, 503, 504, 507, 511, 512, 513, 537, 543, 544, 548, 555, 557, 569, 611, 620, 624, 628, 630, 646, 649, 650, 652, 654, 656, 663, 665, 673, 675, 676, 678, 685, 687, 710, 711, 714, 728, 731, 744, 747, 774, 776, 780, 786, 797, 802, 803, 805, 809, 810, 811, 812, 814, 815, 872, 913, 914], "written": [13, 17, 112, 113, 120, 124, 125, 127, 129, 132, 144], "mani": [13, 14, 15, 17, 18, 19, 68, 69, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 144, 710, 749], "differ": [13, 14, 15, 17, 18, 68, 69, 70, 71, 72, 111, 112, 113, 114, 116, 117, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 144, 185, 202, 219, 237, 238, 241, 242, 266, 279, 282, 435, 438, 484, 488, 611, 620, 710, 754, 757, 830, 847, 850, 855, 858, 872], "while": [13, 14, 17, 18, 68, 69, 70, 71, 72, 114, 118, 124, 131, 132, 144, 266, 421, 424, 425, 428, 814, 815, 830, 839, 842], "thi": [13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 166, 167, 168, 177, 178, 185, 191, 192, 193, 194, 195, 219, 240, 244, 248, 255, 260, 265, 266, 267, 268, 270, 279, 280, 281, 282, 283, 284, 287, 304, 307, 320, 323, 324, 327, 328, 329, 330, 331, 336, 339, 357, 360, 361, 362, 363, 364, 421, 424, 425, 428, 444, 447, 456, 459, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 508, 530, 531, 532, 533, 534, 536, 547, 558, 563, 577, 578, 579, 580, 582, 583, 585, 588, 590, 592, 593, 595, 597, 599, 601, 603, 609, 611, 614, 620, 623, 624, 631, 633, 650, 652, 669, 710, 711, 712, 713, 715, 724, 727, 728, 731, 740, 743, 744, 745, 746, 747, 748, 754, 757, 774, 780, 786, 787, 792, 793, 796, 799, 801, 809, 810, 814, 815, 816, 818, 819, 820, 823, 830, 835, 838, 839, 842, 851, 854, 859, 862, 863, 864, 867, 872, 878, 903, 904, 907, 908, 909, 910, 911, 912], "wonder": [13, 15, 129], "thing": [13, 14, 15, 17, 18, 19, 118, 129, 130], "research": [13, 143], "develop": [13, 14, 15, 16, 17, 18, 19, 143, 144, 872], "also": [13, 14, 16, 17, 18, 23, 24, 25, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 166, 177, 185, 191, 192, 193, 194, 195, 266, 267, 268, 279, 280, 281, 282, 283, 284, 287, 304, 307, 324, 327, 328, 329, 330, 331, 336, 339, 361, 362, 363, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 508, 531, 532, 533, 534, 536, 547, 577, 578, 579, 580, 582, 583, 585, 611, 614, 620, 623, 624, 631, 633, 710, 711, 712, 713, 715, 724, 727, 728, 731, 744, 745, 746, 747, 748, 770, 771, 772, 773, 774, 775, 776, 784, 785, 786, 792, 793, 796, 799, 801, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867, 891, 901], "consid": [13, 14, 68, 69, 112, 117, 128, 129, 130, 266, 421, 424, 425, 428, 814, 815, 816, 818], "speed": 13, "evolv": 13, "sharabl": 13, "code": [13, 14, 15, 17, 18, 19, 20, 68, 69, 70, 71, 72, 83, 84, 111, 113, 114, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 155, 157, 158, 159, 160, 161, 162, 219, 238, 261, 266, 324, 327, 480, 483, 577, 578, 580, 581, 582, 611, 617, 618, 814, 815, 816, 819, 820, 823, 830, 831, 834, 872, 878], "significantli": 13, "hinder": [13, 125], "librari": [13, 14, 15, 127, 132, 142, 144, 219, 261, 266, 357, 360, 421, 424, 425, 428, 624, 637, 639, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 872], "outdat": 13, "month": 13, "rigor": 13, "maintain": [13, 18, 819, 820, 823, 825, 828], "against": [13, 68, 69, 116, 144, 185, 189, 624, 646, 649, 650, 652, 654, 656, 663, 665, 809, 810], "newest": 13, "version": [13, 14, 15, 17, 113, 127, 129, 624, 637, 639, 872], "For": [13, 14, 15, 17, 18, 19, 20, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 166, 167, 177, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 577, 592, 609, 624, 673, 675, 682, 684, 710, 711, 714, 754, 757, 814, 815, 816, 818, 830, 835, 838, 843, 846, 855, 858, 883, 884], "softwar": [13, 14, 17, 18], "pipelin": [13, 120, 132], "where": [13, 14, 15, 16, 17, 18, 19, 20, 68, 69, 70, 71, 113, 117, 118, 120, 121, 122, 123, 124, 127, 130, 131, 132, 144, 166, 173, 174, 177, 266, 296, 299, 353, 356, 405, 408, 435, 438, 452, 455, 503, 543, 547, 556, 624, 637, 639, 654, 656, 663, 665, 666, 668, 673, 675, 676, 678, 682, 684, 685, 687, 710, 711, 714, 720, 723, 724, 727, 732, 735, 754, 757, 766, 769, 774, 775, 785, 797, 798, 809, 812, 830, 851, 854, 859, 862, 863, 864, 867, 868, 871, 872], "rapid": [13, 14, 17], "prototyp": 13, "vital": [13, 132], "signific": [13, 14, 144], "bottleneck": 13, "As": [13, 18, 64, 65, 109, 110, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 144, 814, 815, 816, 818], "new": [13, 14, 15, 16, 17, 18, 19, 20, 68, 69, 111, 112, 113, 114, 116, 119, 121, 122, 124, 126, 129, 132, 143, 166, 169, 172, 173, 174, 179, 180, 183, 184, 185, 214, 266, 300, 303, 405, 408, 448, 451, 503, 525, 526, 527, 530, 531, 532, 535, 559, 560, 561, 562, 567, 568, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 710, 724, 727, 740, 743, 754, 757, 774, 779, 790, 791, 792, 793, 796, 872, 883, 884, 891, 901, 905, 906, 907, 908, 909, 910, 911, 912], "futur": [13, 15, 17, 18, 129, 144, 624, 637, 639], "avail": [13, 17, 18, 68, 69, 113, 123, 144, 219, 235, 251, 252, 253, 263, 503, 526], "specif": [13, 19, 68, 69, 117, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 143, 144, 185, 210, 219, 258, 261, 266, 421, 424, 425, 428, 503, 525, 526, 527, 554, 624, 637, 639, 679, 681, 710, 754, 757, 770, 771, 772, 773, 797, 798, 830, 835, 838, 839, 842, 843, 846, 872, 875, 877, 878, 903, 904], "quickli": [13, 15, 17, 18, 130, 131], "obsolet": [13, 15], "user": [13, 14, 17, 18, 20, 111, 116, 118, 121, 124, 126, 144, 891, 902, 903, 904], "constantli": 13, "invent": 13, "wheel": 13, "our": [13, 14, 16, 17, 18, 64, 65, 109, 110, 114, 121, 126, 129, 130, 131, 132, 144, 872], "desir": [13, 68, 69, 185, 188, 191, 194, 219, 261, 503, 543, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902], "provid": [13, 17, 18, 68, 69, 113, 114, 117, 120, 121, 122, 123, 124, 125, 127, 131, 143, 144, 163, 164, 166, 177, 185, 197, 198, 199, 206, 210, 218, 219, 235, 503, 524, 556, 560, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 624, 685, 687, 710, 728, 731, 754, 757, 809, 810, 830, 851, 854, 859, 862, 863, 864, 867, 868, 871, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 907, 908, 909, 910, 911, 912], "simultan": [13, 15], "all": [13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 62, 63, 64, 65, 68, 69, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 145, 153, 163, 164, 166, 167, 181, 182, 219, 226, 250, 256, 503, 504, 507, 511, 512, 537, 557, 572, 611, 621, 624, 670, 672, 679, 681, 688, 690, 710, 728, 731, 744, 747, 770, 771, 772, 773, 774, 775, 776, 785, 786, 787, 797, 798, 803, 805, 863, 872, 875, 877], "modern": [13, 14], "simpl": [13, 17, 18, 112, 113, 114, 116, 117, 120, 121, 122, 123, 124, 127, 129, 131, 132, 144, 503, 528], "scalabl": [13, 127], "manner": [13, 23, 26, 27, 68, 69, 112, 113, 123, 130, 143, 144, 774, 786], "must": [13, 15, 17, 18, 19, 68, 69, 70, 71, 72, 112, 113, 114, 117, 120, 121, 122, 123, 125, 127, 131, 132, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 219, 245, 246, 247, 248, 260, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 525, 526, 527, 529, 532, 535, 543, 556, 559, 560, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 907, 911], "determin": [13, 68, 69, 113, 117, 121, 122, 123, 185, 191, 194, 196, 201, 206, 207, 208, 218, 219, 251, 252, 253, 263, 266, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 332, 335, 336, 339, 340, 343, 353, 356, 357, 360, 377, 380, 381, 384, 385, 388, 397, 400, 401, 404, 409, 412, 413, 416, 429, 432, 435, 438, 452, 455, 456, 459, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 503, 504, 507, 511, 512, 542, 544, 548, 549, 550, 551, 552, 569, 576, 577, 592, 611, 622, 624, 625, 627, 628, 630, 631, 633, 634, 636, 643, 645, 646, 649, 654, 656, 660, 662, 663, 665, 669, 670, 672, 682, 684, 685, 687, 688, 690, 770, 771, 772, 773, 814, 815, 816, 818, 863, 864, 867, 868, 871], "exactli": [13, 15, 114, 121, 123, 872, 878], "common": [13, 18, 19, 68, 69, 114, 117, 119, 121, 123, 144], "ground": [13, 116], "li": 13, "between": [13, 68, 69, 70, 71, 72, 114, 116, 117, 120, 121, 125, 126, 128, 129, 130, 132, 143, 166, 167, 185, 202, 266, 296, 299, 452, 455, 694, 695, 698, 700, 703, 705, 708, 710, 724, 727, 754, 757, 774, 780, 797, 799, 800, 814, 815, 816, 818, 872, 907, 909], "find": [13, 17, 18, 68, 69, 127, 130, 814, 815, 816, 818, 872], "exist": [13, 14, 17, 19, 20, 68, 69, 70, 71, 113, 114, 115, 116, 117, 118, 119, 124, 127, 144, 503, 524, 907, 911], "essenti": [13, 14, 19, 114, 117, 123], "order": [13, 17, 18, 20, 68, 69, 70, 71, 72, 113, 114, 118, 120, 121, 122, 123, 125, 129, 130, 132, 144, 266, 296, 299, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 624, 637, 639, 650, 652, 673, 675, 676, 678, 688, 690, 710, 728, 731, 770, 771, 772, 809, 812, 814, 815, 816, 818, 819, 820, 823, 825, 828, 913, 914], "design": [13, 14, 111, 124, 127, 129, 144], "univers": 13, "abstract": [13, 121, 131, 144, 219, 231, 907, 911], "In": [13, 15, 17, 18, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 219, 255, 261, 262, 265, 266, 279, 282, 435, 438, 456, 459, 503, 509, 547, 710, 740, 743, 797, 803, 805, 872], "search": [13, 17, 23, 26, 27, 55, 68, 69, 100, 112, 114, 116, 810, 811, 812, 813], "languag": [13, 15, 127], "first": [13, 14, 17, 18, 20, 114, 117, 120, 121, 125, 127, 129, 130, 132, 163, 164, 166, 175, 176, 185, 209, 214, 219, 235, 247, 266, 279, 282, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 345, 348, 365, 368, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 484, 488, 503, 511, 577, 587, 624, 628, 630, 634, 636, 637, 639, 646, 649, 660, 662, 666, 668, 673, 675, 679, 681, 685, 687, 710, 716, 719, 744, 747, 754, 757, 758, 761, 770, 771, 772, 773, 774, 775, 784, 785, 797, 808, 809, 810, 811, 814, 815, 816, 891, 902, 903, 904, 907, 911], "see": [13, 16, 17, 18, 19, 115, 117, 121, 123, 125, 129, 130, 143, 144, 166, 167, 172, 175, 176, 185, 190, 210, 266, 279, 282, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 357, 360, 389, 392, 413, 416, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 484, 488, 624, 654, 656, 663, 665, 670, 672, 685, 687, 688, 690, 809, 811, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872], "clear": [13, 14, 15, 18, 19, 114, 116, 122, 123, 127, 129, 219, 234], "front": [13, 126, 127, 130, 872, 878], "runner": 13, "look": [13, 17, 18, 20, 112, 114, 117, 118, 121, 122, 123, 125, 127, 129, 131, 132, 872], "littl": [13, 129], "deeper": [13, 18, 111, 126, 219, 240, 244, 248, 774, 785, 786], "follow": [13, 14, 17, 18, 19, 20, 68, 69, 112, 113, 114, 116, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 144, 185, 205, 219, 260, 266, 456, 459, 503, 545, 546, 547, 567, 568, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 622, 623, 624, 666, 668, 688, 690, 774, 780, 786, 814, 815, 816, 818, 872, 891, 901, 907, 911], "same": [13, 15, 17, 18, 20, 23, 24, 25, 68, 69, 112, 114, 116, 117, 120, 121, 123, 124, 125, 127, 129, 131, 132, 166, 167, 170, 174, 177, 180, 181, 182, 184, 185, 188, 189, 190, 219, 226, 227, 260, 266, 267, 270, 279, 282, 308, 311, 328, 331, 361, 364, 435, 438, 456, 459, 460, 463, 464, 467, 499, 502, 503, 529, 531, 532, 535, 556, 559, 560, 577, 592, 606, 611, 612, 613, 614, 615, 616, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 657, 659, 663, 665, 666, 668, 670, 672, 673, 675, 682, 684, 685, 687, 710, 716, 719, 728, 731, 732, 735, 744, 747, 750, 753, 754, 757, 770, 771, 772, 774, 787, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 855, 858, 859, 862, 872, 891, 892, 893, 894, 895, 896, 897, 898], "core": [13, 17, 19, 123, 127, 132, 219, 252, 872], "principl": 13, "oper": [13, 17, 19, 68, 69, 70, 71, 113, 114, 117, 120, 121, 123, 124, 130, 131, 166, 175, 176, 185, 210, 266, 279, 282, 320, 323, 324, 327, 373, 376, 440, 443, 444, 447, 456, 459, 480, 483, 503, 513, 525, 526, 527, 569, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 612, 613, 614, 615, 616, 617, 618, 620], "expos": [13, 127, 131, 503, 519], "almost": [13, 18, 121, 128, 130], "ident": [13, 15, 68, 69, 117, 119, 121, 129, 130, 144, 219, 250, 774, 787, 872], "uniqu": [13, 117, 121, 144, 219, 226, 227, 770, 771, 772, 773, 774, 780, 814, 815, 816, 817, 818], "syntax": [13, 14], "There": [13, 17, 18, 114, 117, 120, 121, 122, 127, 130, 144], "onli": [13, 16, 17, 18, 68, 69, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 142, 144, 219, 256, 266, 421, 424, 425, 428, 624, 646, 649, 666, 668, 710, 728, 731, 774, 775, 776, 784, 785, 809, 810, 811, 830, 839, 842, 872, 907, 908, 909, 910, 911, 912], "so": [13, 14, 17, 18, 23, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 112, 113, 114, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 144, 145, 153, 191, 192, 193, 195, 267, 268, 279, 280, 281, 283, 328, 329, 330, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 504, 505, 506, 508, 532, 533, 534, 536, 578, 579, 580, 582, 711, 712, 713, 715, 744, 745, 746, 748, 774, 775, 785, 799, 801, 872], "wai": [13, 14, 17, 118, 124, 129, 130, 131, 132, 144], "manipul": [13, 49, 94, 112, 132, 143, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769], "unsurprisingli": [13, 114], "fundament": [13, 121, 127], "consist": [13, 68, 69, 120, 124, 219, 248, 624, 637, 639, 830, 831, 834, 903, 904], "each": [13, 14, 15, 18, 19, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 132, 143, 144, 155, 158, 159, 161, 166, 177, 185, 189, 219, 226, 227, 237, 238, 239, 240, 241, 242, 243, 247, 260, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 507, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 612, 613, 614, 615, 616, 617, 618, 619, 624, 625, 627, 628, 630, 631, 633, 637, 639, 646, 649, 654, 656, 657, 659, 663, 665, 670, 672, 673, 675, 710, 720, 723, 736, 739, 744, 747, 749, 754, 757, 762, 765, 766, 769, 774, 780, 787, 797, 798, 809, 812, 814, 815, 816, 830, 831, 834, 872, 878, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "veri": [13, 14, 17, 18, 112, 114, 116, 117, 121, 123, 124, 125, 128, 130, 131, 132, 144, 872], "similar": [13, 112, 121, 122, 123, 130, 144, 266, 456, 459, 611, 622, 891, 902], "convent": [13, 143, 624, 646, 649, 830, 831, 834], "those": [13, 17, 18, 19, 68, 69, 121, 127, 132, 166, 167, 577, 609, 624, 666, 668, 673, 675, 710, 711, 714], "introduc": [13, 121, 130, 710, 744, 747, 814, 815], "2006": 13, "layer": [13, 43, 88, 112, 113, 127, 128, 131, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 792, 793, 796, 872, 885, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "therefor": [13, 18, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 131, 144, 185, 191, 194, 266, 279, 282, 284, 287, 328, 331, 361, 364, 444, 447, 476, 479, 480, 483, 489, 493, 503, 531, 611, 614, 623, 710, 744, 747, 792, 793, 796, 830, 835, 838, 863, 864, 867], "present": [13, 18, 68, 69, 115, 121, 122, 123, 124, 125, 127], "itself": [13, 17, 18, 121, 124, 125, 131, 143, 144, 503, 509, 774, 786], "cut": 13, "cloth": 13, "adher": [13, 14, 113, 115, 127, 132], "semant": [13, 127, 132, 266, 456, 459], "round": [13, 14, 15, 17, 18, 19, 20, 34, 35, 79, 80, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 266, 279, 282, 328, 331, 361, 364, 365, 368, 435, 438, 476, 479, 499, 502, 872], "up": [13, 14, 15, 16, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 143, 144], "hopefulli": [13, 14, 15, 17, 18, 19, 20, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143], "paint": [13, 127], "pictur": [13, 127], "how": [13, 15, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 143, 144, 872, 878, 891, 902, 903, 904], "pleas": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 872], "check": [13, 14, 15, 17, 18, 23, 24, 25, 26, 27, 68, 69, 121, 126, 127, 129, 130, 131, 132, 143, 185, 196, 203, 204, 206, 218, 219, 255, 265, 503, 513, 528, 542, 549, 550, 551, 552, 569, 576, 577, 592, 624, 637, 639, 774, 775, 784, 785, 786, 872], "out": [13, 14, 15, 16, 17, 18, 19, 20, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 79, 80, 81, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 143, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 219, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 515, 516, 517, 518, 520, 521, 522, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 543, 556, 559, 560, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 891, 899], "discuss": [13, 14, 15, 16, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 872], "faq": [13, 14, 15, 127, 129, 130, 131, 132, 143], "reach": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 219, 240, 244, 248, 774, 786], "discord": [13, 14, 15, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 872], "you": [13, 14, 15, 16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 872, 878], "question": [13, 14, 15, 17, 18, 114, 116, 127, 129, 130, 131, 132, 143, 144, 872], "With": [14, 15, 17, 36, 37, 38, 39, 68, 69, 70, 71, 79, 80, 81, 82, 93, 94, 97, 98, 114, 116, 127, 155, 157, 158, 159, 160, 161, 162, 166, 177, 185, 191, 194, 219, 238, 254, 266, 279, 282, 283, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 493, 494, 495, 498, 503, 504, 505, 506, 507, 508, 512, 520, 521, 528, 531, 532, 535, 536, 566, 571, 572, 573, 577, 578, 579, 581, 611, 614, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 650, 652, 679, 681, 694, 695, 698, 705, 708, 710, 711, 714, 715, 724, 727, 728, 731, 736, 739, 744, 747, 748, 749, 758, 761, 792, 793, 796, 797, 798, 799, 801, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 863, 864, 867], "central": 14, "goal": [14, 19], "being": [14, 15, 17, 18, 68, 69, 114, 116, 119, 120, 121, 122, 123, 124, 125, 127, 130, 143, 144, 166, 167, 503, 558, 563, 814, 817, 872], "would": [14, 17, 18, 20, 111, 113, 114, 116, 118, 119, 120, 121, 124, 125, 126, 127, 129, 131, 132, 144, 155, 160, 219, 261, 872], "entir": [14, 15, 18, 68, 69, 114, 115, 116, 120, 121, 124, 129, 130, 131, 132, 144, 219, 260, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 891, 900], "forgiven": 14, "rais": [14, 18, 68, 69, 124, 127, 129, 185, 190, 266, 353, 356, 452, 455, 503, 513, 538, 547, 561, 568, 574, 624, 646, 649, 653, 685, 687, 710, 750, 753, 754, 757, 809, 812, 830, 835, 838, 843, 846, 863, 864, 867, 868, 871, 903, 904, 907, 911], "an": [14, 15, 17, 18, 19, 20, 23, 26, 27, 64, 65, 68, 69, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 155, 158, 159, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 194, 202, 207, 208, 210, 219, 238, 242, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 514, 515, 516, 518, 520, 529, 530, 531, 543, 547, 549, 550, 551, 552, 572, 573, 574, 577, 592, 606, 608, 609, 611, 614, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 653, 654, 656, 657, 659, 663, 665, 666, 668, 669, 670, 672, 673, 675, 682, 684, 685, 687, 688, 690, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 774, 780, 792, 793, 796, 797, 799, 800, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 883, 884, 903, 904, 907, 908, 909, 911], "eyebrow": 14, "somehow": 14, "pytorch": [14, 15, 19, 117, 122, 123, 124, 125, 127, 129, 132, 144, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 872, 907, 908, 909, 910, 911, 912], "other": [14, 17, 18, 68, 69, 70, 71, 112, 113, 114, 116, 117, 120, 121, 124, 127, 129, 131, 132, 142, 143, 144, 163, 164, 166, 167, 266, 357, 360, 503, 504, 507, 509, 577, 587, 797, 803, 805, 814, 817, 830, 851, 854, 859, 862, 872], "strong": [14, 144], "industri": 14, "back": [14, 120, 126, 127, 129, 144, 872, 878, 903, 904, 907, 911], "momentum": 14, "won": [14, 15, 18, 132], "ad": [14, 17, 18, 19, 109, 110, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 127, 131, 144, 503, 567, 568, 624, 637, 639, 710, 724, 727, 913, 914], "just": [14, 15, 17, 18, 113, 114, 116, 117, 124, 127, 129, 130, 144, 830, 831, 834, 891, 900], "make": [14, 15, 17, 18, 19, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 219], "problem": [14, 18, 120, 129], "even": [14, 15, 17, 18, 113, 117, 122, 123, 125, 129, 130, 131, 132, 144, 266, 452, 455, 460, 463], "wors": 14, "rather": [14, 68, 69, 112, 113, 116, 121, 132, 144, 166, 167, 219, 260, 503, 549, 550, 552, 577, 592], "funni": 14, "comic": 14, "strip": 14, "easi": [14, 17, 18, 117, 121], "feasibl": 14, "space": [14, 166, 167, 175, 176, 503, 530], "case": [14, 17, 18, 19, 23, 26, 27, 68, 69, 70, 71, 72, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 144, 166, 177, 219, 255, 262, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 324, 327, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 503, 547, 559, 560, 624, 650, 652, 710, 740, 743, 774, 777, 783, 830, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862, 891, 902, 903, 904, 907, 911], "unlik": [14, 114, 121, 219], "charger": 14, "charact": 14, "encod": [14, 130, 503, 530], "instant": [14, 872], "messag": [14, 18, 127, 129, 916, 917], "much": [14, 18, 112, 120, 121, 124, 127, 129, 130], "doe": [14, 18, 20, 68, 69, 111, 112, 113, 114, 116, 117, 118, 122, 124, 125, 127, 129, 130, 144, 266, 324, 327, 503, 547, 710, 749], "mandat": [14, 116, 124], "adopt": [14, 18, 120], "continu": [14, 15, 115, 116, 144], "own": [14, 15, 17, 113, 127, 144], "signatur": [14, 112, 113, 114, 121, 122, 123, 124, 125, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "replac": [14, 18, 20, 68, 69, 114, 116, 119, 121, 122, 123, 127, 129, 132, 144, 503, 559, 560, 710, 711, 714, 797, 798], "your": [14, 15, 16, 17, 19, 20, 112, 113, 130, 131, 144, 872], "10": [14, 17, 20, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 121, 127, 129, 130, 166, 173, 176, 219, 266, 304, 307, 308, 311, 336, 339, 373, 376, 401, 404, 476, 479, 503, 521, 531, 558, 563, 577, 593, 594, 595, 596, 611, 617, 624, 631, 633, 634, 636, 660, 662, 679, 681, 710, 728, 731, 736, 739, 749, 792, 793, 796, 797, 798, 799, 800, 801, 809, 812, 814, 815, 830, 831, 834, 835, 838, 907, 909], "100": [14, 15, 97, 98, 130, 131, 132, 144, 266, 476, 479, 799, 801, 872], "despit": [14, 121, 123], "distinct": [14, 113, 121, 124, 126, 814, 815, 816, 818, 872], "still": [14, 68, 69, 113, 116, 122, 129, 131, 144, 872], "believ": [14, 18], "share": [14, 68, 69, 114, 116, 117, 118, 121, 127, 185, 214], "bring": [14, 127, 128], "benefit": [14, 15, 17, 18, 120, 121, 124, 129, 130, 144], "unrel": [14, 18], "what": [14, 15, 18, 111, 113, 114, 119, 121, 125, 126, 127, 129, 130, 131, 132, 143, 144, 872], "again": [14, 15, 18, 112, 114, 121, 124, 130, 132, 144], "contrari": 14, "bumpi": 14, "road": 14, "allud": [14, 130], "most": [14, 17, 18, 68, 69, 112, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 144, 624, 637, 639], "technologi": 14, "sector": [14, 266, 275, 278, 288, 291, 300, 303], "full": [14, 15, 18, 70, 71, 113, 122, 125, 127, 144, 166, 185, 202, 266, 373, 376, 611, 617, 624, 666, 668, 670, 672, 673, 675, 792, 793, 796], "success": 14, "reason": [14, 18, 112, 114, 117, 120, 121, 122, 124, 127, 129, 266, 456, 459], "build": [14, 16, 17, 117, 126, 128, 131, 132, 144, 814, 815, 816, 818, 872, 891, 902, 903, 904], "custom": [14, 131], "comput": [14, 15, 17, 68, 69, 117, 121, 127, 130, 144, 219, 260, 266, 279, 282, 304, 307, 316, 319, 324, 327, 345, 348, 349, 352, 369, 372, 373, 376, 389, 392, 393, 396, 417, 420, 421, 424, 425, 428, 429, 432, 435, 438, 440, 443, 444, 447, 503, 515, 516, 518, 521, 522, 577, 578, 581, 583, 585, 587, 588, 590, 593, 595, 597, 599, 601, 603, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 624, 625, 627, 628, 630, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 666, 668, 669, 670, 672, 673, 675, 685, 687, 688, 690, 694, 695, 698, 700, 703, 705, 708, 774, 780, 814, 815, 816, 818, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862], "thank": [14, 130], "interoper": 14, "compon": [14, 127], "bio": [14, 17], "hardwar": [14, 17], "initi": [14, 18, 68, 69, 70, 71, 72, 118, 122, 123, 219, 611, 621, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 907, 911], "pcie": 14, "interfac": [14, 132, 144], "motherboard": 14, "raid": 14, "storag": [14, 130], "virtual": [14, 18, 20], "bluetooth": 14, "wireless": 14, "exchang": 14, "btx": 14, "form": [14, 16, 23, 24, 25, 26, 27, 68, 69, 117, 131, 132, 166, 168, 178, 181, 182, 503, 509, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 654, 656, 657, 659, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684, 774, 776, 786], "factor": [14, 219, 226, 258, 259, 260, 577, 578, 581, 583, 585, 593, 595, 597, 599, 611, 612, 613, 614, 615, 616, 617, 618, 624, 625, 627, 891, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 910], "sata": 14, "connect": [14, 17, 131, 132, 891, 901, 902], "host": [14, 144], "bu": 14, "adapt": [14, 577, 597, 599, 907, 910], "devic": [14, 18, 33, 68, 69, 78, 97, 98, 111, 112, 117, 119, 122, 129, 130, 144, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 503, 531, 532, 535, 556, 559, 560, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 883, 884, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "html": [14, 20, 113, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "enabl": [14, 17, 18, 68, 69, 70, 71, 72, 116, 117, 120, 121, 124, 126, 127, 128, 130, 132, 144], "anyon": [14, 16, 144], "websit": 14, "tcp": 14, "ip": 14, "node": [14, 68, 69, 121, 774, 775, 784, 785], "commun": [14, 16, 18, 19, 144, 872, 878], "network": [14, 117, 121, 127, 131, 143, 611, 620, 872, 880, 891, 903, 904], "smtp": 14, "possibl": [14, 16, 17, 18, 19, 113, 114, 116, 121, 122, 124, 127, 130, 143, 144, 503, 553, 830, 835, 838, 843, 846], "send": 14, "gmail": 14, "outlook": 14, "pop": 14, "u": [14, 16, 17, 18, 116, 121, 124, 131, 144, 624, 625, 627, 673, 675, 872], "email": 14, "ieee": [14, 165, 185, 202, 266, 279, 282, 357, 360, 435, 438, 456, 459, 476, 479], "754": [14, 165, 185, 202, 266, 279, 282, 357, 360, 435, 438, 456, 459, 476, 479], "allow": [14, 127, 144, 166, 175, 176, 503, 553, 903, 904], "calcul": [14, 68, 69, 70, 71, 72, 113, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 332, 335, 336, 339, 340, 343, 353, 356, 357, 360, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 435, 438, 452, 455, 468, 471, 472, 475, 476, 479, 484, 488, 489, 493, 494, 498, 694, 695, 698, 700, 703, 705, 708, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862], "live": [14, 15], "depend": [14, 17, 18, 113, 119, 121, 122, 127, 144, 185, 188, 266, 267, 270, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 296, 299, 332, 335, 336, 339, 353, 356, 357, 360, 397, 400, 401, 404, 405, 408, 409, 412, 452, 455, 468, 471, 472, 475, 489, 493, 494, 498, 624, 637, 639, 666, 668, 670, 672, 673, 675, 809, 813, 819, 820, 823, 825, 828], "did": [14, 19, 132], "aris": [14, 144], "until": [14, 18, 144, 872], "substanti": [14, 18, 116, 120], "innov": 14, "growth": 14, "usag": [14, 127, 219, 260], "relev": [14, 17, 19, 114, 121, 122, 130, 907, 908, 909, 910, 911, 912], "area": [14, 124, 142, 266, 275, 278, 288, 291, 300, 303, 872], "necess": 14, "parti": [14, 144], "could": [14, 15, 17, 18, 114, 116, 121, 122, 124, 127, 129, 130, 131, 814, 815, 816, 818], "easili": [14, 18, 130, 131, 132, 144, 872], "engag": [14, 16, 17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "regard": [14, 121, 219], "effect": [14, 113, 120, 121, 125, 144, 166, 177, 577, 601, 603, 830, 851, 854, 859, 862], "2015": 14, "sinc": [14, 17, 18, 144], "alongsid": 14, "machin": [14, 17, 117, 143, 185, 202, 205, 266, 369, 372, 624, 654, 656, 663, 665], "givenframe": [14, 143], "less": [14, 18, 34, 35, 68, 69, 79, 80, 114, 121, 125, 126, 127, 266, 271, 274, 275, 278, 284, 287, 296, 299, 328, 331, 397, 400, 401, 404, 409, 412, 452, 455, 456, 459, 464, 467, 476, 479, 624, 654, 656, 663, 665, 688, 690, 797, 803, 805, 830, 859, 862], "matur": [14, 144], "state": [14, 113, 125, 126, 127, 128, 130, 143, 266, 435, 438, 611, 621, 872, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "than": [14, 18, 68, 69, 112, 114, 116, 121, 124, 127, 130, 131, 132, 144, 166, 167, 185, 202, 219, 260, 266, 271, 274, 275, 278, 284, 287, 296, 299, 312, 315, 320, 323, 328, 331, 361, 364, 365, 368, 397, 400, 401, 404, 409, 412, 433, 452, 455, 456, 459, 464, 467, 476, 479, 499, 502, 503, 549, 550, 552, 577, 592, 624, 628, 630, 646, 649, 654, 656, 663, 665, 688, 690, 710, 711, 714, 728, 731, 750, 753, 797, 803, 805, 814, 815, 816, 818, 830, 847, 850, 851, 854, 855, 858, 859, 862], "preced": [14, 131], "mention": [14, 17, 18, 114, 117, 124, 125], "aros": 14, "70": [14, 624, 660, 662, 830, 831, 834], "80": [14, 624, 660, 662, 830, 831, 834], "90": [14, 97, 98, 266, 324, 327, 460, 463, 624, 660, 662, 799, 801, 830, 831, 834], "effort": [14, 16, 144], "stage": [14, 16, 18, 20, 111, 872], "complet": [14, 18, 19, 68, 69, 120, 121, 129, 130, 624, 666, 668], "natur": [14, 114, 120, 121, 143, 266, 353, 356, 397, 400, 405, 408, 624, 669], "like": [14, 17, 18, 20, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 129, 130, 131, 132, 143, 144, 577, 592, 797, 803, 805, 872], "certainli": 14, "mission": [14, 872], "creat": [14, 16, 17, 18, 20, 68, 69, 122, 123, 124, 127, 128, 131, 142, 143, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 183, 184, 219, 226, 227, 503, 531, 532, 535, 556, 559, 560, 571, 577, 608, 797, 798, 799, 800, 803, 805, 872, 878, 883, 884, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "At": [14, 19], "process": [14, 15, 16, 17, 18, 20, 117, 121, 127, 132, 219, 226, 227, 255, 265], "ourselv": 14, "lead": [14, 15, 68, 69, 70, 71, 72, 144, 624, 666, 668, 673, 675], "quansight": 14, "compani": 14, "made": [14, 18, 19, 121, 124, 127, 129], "organ": [14, 112, 117, 120, 121], "panda": 14, "scipi": 14, "conda": [14, 17, 20], "dask": [14, 814, 815, 816, 818], "apach": 14, "onnx": 14, "scikit": 14, "jupyt": 14, "aw": 14, "cupi": 14, "net": [14, 15, 127, 132], "sympi": 14, "rai": [14, 266, 296, 299], "modin": 14, "spyder": 14, "includ": [14, 18, 19, 68, 69, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 143, 144, 166, 167, 168, 178, 503, 542, 576, 624, 688, 690, 774, 775, 797, 803, 805, 809, 811, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 875, 877, 891, 901, 902, 905, 906], "member": [14, 18], "googl": [14, 872], "octoml": 14, "einop": [14, 68, 69, 503, 525, 526, 527], "further": [14, 15, 18, 20, 114, 120, 126, 130, 131, 872], "sponsor": 14, "lg": 14, "electron": 14, "microsoft": 14, "d": [14, 15, 16, 17, 97, 98, 111, 121, 130, 503, 512, 520, 611, 612, 613, 614, 615, 616, 617, 618, 624, 634, 636, 660, 662, 799, 801, 872, 878], "shaw": 14, "co": [14, 34, 35, 79, 80, 127, 143, 266, 503, 530, 872], "intel": 14, "togeth": [14, 68, 69, 120, 121, 131, 132, 144, 913, 914], "major": [14, 122, 123, 144, 809, 812], "involv": [14, 16, 20, 111, 122, 132, 185, 210, 266, 279, 282, 435, 438, 872, 878], "anoth": [14, 17, 18, 68, 69, 117, 121, 122, 129, 132, 166, 172, 185, 189, 191, 194], "promis": 14, "sign": [14, 17, 34, 35, 79, 80, 128, 132, 166, 167, 266, 267, 270, 279, 282, 296, 299, 320, 323, 435, 438, 456, 459, 624, 669, 814, 815, 816, 818, 830, 847, 850, 855, 858], "pursuit": 14, "unif": [14, 16, 129, 872, 878], "clearli": [14, 19, 114], "lot": [14, 15, 119, 129, 144], "thought": [14, 17, 18, 125], "care": [14, 18, 132], "attent": [14, 18, 120, 121, 611, 622, 623, 891, 902], "gone": [14, 126], "simplifi": [14, 127, 128, 129, 131], "compat": [14, 125, 144, 185, 190, 266, 279, 282, 296, 299, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 345, 348, 365, 368, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 484, 488, 624, 654, 656, 663, 665, 670, 672, 679, 681, 685, 687, 688, 690, 710, 740, 743, 809, 811, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872], "excit": [14, 16, 111, 872], "complianc": 14, "hope": [14, 144], "due": [14, 17, 121, 124, 266, 435, 438], "suit": [14, 17, 18, 111, 115, 116, 130, 143], "some": [14, 15, 17, 18, 19, 68, 69, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 143, 144, 266, 357, 360, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 609, 611, 619, 872, 891, 899], "motiv": [14, 129], "great": [14, 15, 116, 127, 129], "convinc": 14, "celebr": 14, "encourag": [14, 143, 144, 872, 878], "foundat": 14, "point": [15, 18, 113, 114, 120, 124, 125, 127, 129, 130, 143, 165, 166, 167, 169, 171, 173, 179, 183, 185, 188, 202, 207, 210, 266, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 353, 356, 357, 360, 361, 364, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 624, 625, 627, 631, 633, 637, 639, 640, 642, 643, 645, 654, 656, 663, 665, 666, 668, 670, 672, 673, 675, 688, 690, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862], "mai": [15, 17, 18, 121, 129, 131, 166, 167, 172, 219, 261, 266, 345, 348, 373, 376, 393, 396, 421, 424, 425, 428, 503, 524, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846], "ask": [15, 127, 129, 144, 872], "perfectli": 15, "happi": [15, 17, 144], "abund": 15, "better": [15, 18, 111, 126, 129, 130, 131], "ll": [15, 16, 18, 114, 121, 124, 130], "give": [15, 17, 18, 111, 113, 114, 118, 125, 129, 710, 740, 743], "two": [15, 70, 71, 113, 114, 116, 120, 121, 126, 130, 132, 166, 167, 171, 177, 181, 182, 185, 209, 214, 266, 320, 323, 460, 463, 503, 511, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 682, 684, 685, 687, 710, 758, 761, 814, 815, 816, 817, 818, 872], "streamlin": 15, "workflow": [15, 18, 130, 142, 872], "save": [15, 68, 69, 144, 503, 564, 903, 904], "week": [15, 18, 19, 872], "let": [15, 113, 114, 121, 122, 123, 127, 129, 130, 131, 132, 830, 839, 842, 851, 854, 855, 858, 859, 862, 872], "sai": [15, 17, 119, 129], "deepmind": 15, "releas": [15, 17, 19, 872], "awesom": 15, "paper": 15, "love": 15, "choic": [15, 17, 124, 130, 830, 851, 854, 859, 862], "perceiverio": 15, "happen": [15, 17, 18, 130], "slew": 15, "rush": 15, "f": [15, 20, 111, 121, 127, 130, 132, 266, 369, 372, 503, 544, 548], "g": [15, 111, 121, 144, 185, 187, 210, 219, 232, 797, 802, 803, 805, 814, 815, 816, 818, 830, 835, 838, 843, 846, 847, 850, 855, 858], "inevit": 15, "deviat": [15, 792, 793, 796, 797, 802, 830, 851, 854, 905, 906], "origin": [15, 68, 69, 70, 71, 72, 118, 119, 122, 127, 129, 266, 296, 299, 624, 650, 652, 710, 740, 743, 744, 747], "often": [15, 117, 144], "erron": 15, "train": [15, 117, 121, 123, 130, 131, 132, 142, 143, 144, 577, 578, 581, 583, 585, 593, 595, 872], "poor": 15, "converg": 15, "perform": [15, 68, 69, 112, 114, 116, 117, 118, 120, 121, 123, 124, 125, 127, 130, 144, 155, 160, 166, 175, 176, 219, 503, 521, 525, 526, 527, 545, 546, 547, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 619, 621, 624, 673, 675, 770, 771, 772, 773, 774, 781, 782, 863, 864, 867, 868, 871], "issu": [15, 16, 19, 127, 129, 131, 144], "etc": [15, 17, 18, 19, 64, 65, 68, 69, 109, 110, 112, 114, 116, 120, 121, 122, 125, 127, 129, 130, 144, 166, 175, 176, 503, 531, 532, 535, 556, 559, 560, 797, 798, 799, 800, 803, 805, 814, 815, 816, 818, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "publish": [15, 144], "manag": [15, 16, 124, 144, 219], "get": [15, 16, 17, 19, 68, 69, 111, 117, 122, 123, 124, 127, 128, 129, 130, 131, 185, 200, 201, 202, 205, 219, 226, 227, 235, 236, 249, 250, 255, 259, 262, 265, 503, 510, 537, 538, 539, 558, 872, 878, 891, 900], "work": [15, 17, 18, 19, 111, 116, 121, 122, 123, 126, 127, 128, 129, 131, 132, 872, 878], "repositori": [15, 17, 18, 20, 115], "pull": [15, 16, 17, 20, 112, 144], "request": [15, 16, 112, 219, 252], "confus": [15, 124], "do": [15, 17, 18, 19, 68, 69, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 266, 456, 459, 503, 547, 577, 592, 609, 774, 775, 784, 785, 786], "don": [15, 17, 18, 19, 64, 65, 109, 110, 122, 131, 144], "expect": [15, 144, 503, 510, 872], "codebas": [15, 16, 111, 112, 124, 126, 219, 258, 259, 872], "total": [15, 16, 18, 68, 69, 70, 71, 72, 114, 116, 123, 130, 131, 144, 219, 262, 809, 812, 830, 851, 854, 859, 862], "hour": 15, "spent": 15, "spin": 15, "off": [15, 126, 624, 634, 636, 682, 684], "test": [15, 17, 19, 111, 114, 144, 185, 207, 208, 266, 377, 380, 381, 384, 385, 388, 863, 864, 867, 868, 871], "error": [15, 17, 68, 69, 116, 120, 123, 125, 129, 144, 155, 156, 219, 266, 349, 352, 830, 835, 838, 843, 846, 903, 904, 907, 911], "iter": [15, 23, 24, 25, 26, 27, 64, 65, 68, 69, 70, 71, 72, 109, 110, 121, 127, 130, 163, 164, 219, 238, 239, 241, 242, 243, 244, 247, 260, 503, 504, 507, 560, 565, 710, 720, 723, 736, 739, 749, 762, 765, 766, 769, 774, 775, 776, 780, 784, 785, 786], "address": [15, 18, 19, 120, 127], "sake": 15, "singl": [15, 18, 68, 69, 112, 114, 116, 117, 119, 121, 124, 125, 127, 130, 131, 132, 144, 219, 226, 227, 245, 246, 247, 248, 503, 573, 576, 797, 802, 803, 805, 814, 815], "multipl": [15, 18, 68, 69, 79, 80, 81, 82, 93, 94, 97, 98, 114, 117, 121, 144, 266, 279, 283, 435, 438, 503, 504, 506, 507, 508, 532, 536, 553, 624, 643, 645, 710, 711, 714, 715, 744, 747, 748, 749, 792, 793, 796, 799, 801, 809, 810, 811, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 891, 901], "line": [15, 17, 114, 120, 128, 129, 130, 131, 142, 872, 878], "convert": [15, 23, 24, 25, 26, 27, 68, 69, 120, 127, 144, 145, 153, 166, 168, 178, 185, 186, 187, 219, 232, 233, 234, 235, 255, 262, 265, 503, 566, 572, 573, 624, 691, 693, 774, 776, 786, 787, 884], "directli": [15, 18, 112, 113, 117, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 143, 144, 774, 786], "graph": [15, 117, 121, 128, 144, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 814, 815, 816, 818, 903, 904], "guarante": [15, 120, 144, 814, 815], "turn": [15, 114, 121], "4": [15, 20, 34, 35, 48, 49, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 118, 121, 127, 129, 130, 131, 132, 155, 157, 158, 160, 166, 174, 177, 180, 184, 185, 191, 193, 194, 195, 219, 238, 254, 266, 279, 280, 281, 282, 283, 284, 287, 296, 299, 304, 307, 324, 327, 328, 330, 331, 336, 339, 361, 363, 364, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 492, 493, 494, 495, 497, 498, 503, 512, 521, 530, 531, 532, 534, 535, 536, 566, 571, 577, 578, 580, 581, 582, 611, 614, 615, 616, 618, 621, 623, 624, 628, 630, 631, 633, 634, 636, 643, 645, 654, 656, 660, 662, 679, 681, 682, 684, 694, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 746, 747, 748, 749, 758, 761, 792, 793, 796, 797, 798, 799, 801, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 863, 864, 867, 872, 907, 908, 909, 910, 912], "step": [15, 17, 18, 20, 38, 39, 68, 69, 83, 84, 114, 118, 120, 121, 122, 123, 127, 130, 131, 132, 143, 166, 167, 175, 176, 219, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 590, 593, 594, 595, 596, 597, 599, 601, 603, 770, 771, 772, 773, 872, 907, 908, 909, 910, 911, 912], "take": [15, 16, 17, 18, 113, 114, 116, 121, 122, 123, 127, 129, 131, 132, 144, 266, 324, 327, 872, 878], "few": [15, 18, 19, 117, 121, 122, 123, 124, 128, 129, 130, 131, 142, 872, 878], "second": [15, 17, 114, 124, 129, 185, 209, 214, 219, 247, 266, 279, 282, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 345, 348, 365, 368, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 484, 488, 503, 511, 558, 563, 577, 578, 581, 583, 585, 593, 595, 624, 628, 630, 634, 636, 637, 639, 646, 649, 660, 662, 666, 668, 673, 675, 679, 681, 685, 687, 710, 754, 757, 758, 761, 770, 772, 814, 815, 816, 907, 908, 909], "automat": [15, 17, 18, 117, 121, 125, 126, 127, 128, 131, 132, 872], "convers": [15, 24, 25, 26, 27, 68, 69, 126, 128, 132, 143, 144, 872, 878], "everyon": [15, 16, 18, 144], "regardless": [15, 16, 68, 69, 129, 132, 163, 164], "wouldn": 15, "nice": [15, 116], "write": [15, 18, 19, 20, 68, 69, 111, 112, 113, 114, 116, 117, 118, 124, 127, 129, 132, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 219, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 522, 525, 526, 527, 529, 531, 532, 535, 543, 556, 559, 560, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 813, 814, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "onc": [15, 17, 18, 121, 122, 123, 127, 130, 144, 219, 260, 624, 643, 645, 673, 675, 797, 798], "know": [15, 814, 815, 816, 818], "among": [15, 68, 69, 116], "frantic": 15, "port": 15, "lucid": 15, "honk": 15, "improv": [15, 18, 117, 127], "understand": [15, 17, 18, 19, 20, 111, 113, 114, 115, 125, 126], "pattern": [15, 68, 69, 113, 122, 503, 525, 526, 527], "hasn": 15, "chang": [15, 17, 18, 19, 20, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 113, 115, 116, 121, 127, 131, 144, 191, 192, 193, 195, 219, 267, 268, 279, 280, 281, 283, 328, 329, 330, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 504, 505, 506, 508, 532, 533, 534, 536, 578, 579, 580, 582, 624, 628, 630, 710, 711, 712, 713, 715, 740, 743, 744, 745, 746, 748, 774, 776, 786, 799, 801, 872, 878], "now": [15, 17, 20, 68, 69, 112, 119, 121, 122, 125, 129, 130, 132, 143, 144, 891, 902, 903, 904], "spend": 15, "torchvis": 15, "probabl": [15, 611, 619, 797, 798, 891, 899], "sonnet": 15, "about": [15, 17, 18, 115, 126, 127, 131, 132, 144, 185, 202, 205], "next": [15, 17, 18, 19, 20, 113, 114, 118, 119, 129, 130, 185, 202, 872, 903, 904, 907, 908, 909, 910, 911, 912], "everyth": [15, 18, 19, 128, 144], "zero": [15, 68, 69, 70, 71, 114, 120, 121, 122, 123, 125, 127, 130, 131, 155, 157, 158, 166, 169, 171, 177, 181, 182, 184, 185, 188, 266, 279, 282, 284, 287, 312, 315, 336, 339, 357, 360, 361, 364, 421, 424, 425, 428, 433, 434, 435, 438, 440, 443, 444, 447, 452, 455, 456, 459, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 521, 556, 559, 560, 577, 578, 581, 583, 585, 593, 595, 597, 599, 611, 619, 624, 631, 633, 646, 649, 654, 656, 663, 665, 685, 687, 688, 690, 710, 724, 727, 728, 731, 736, 739, 744, 747, 766, 769, 792, 793, 796, 797, 799, 800, 809, 810, 811, 812, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 907, 908, 909, 910], "need": [15, 17, 18, 19, 20, 112, 113, 114, 115, 117, 120, 121, 124, 127, 129, 130, 143, 144, 503, 515, 516, 518, 710, 711, 714, 724, 727], "said": 15, "high": [15, 19, 68, 69, 97, 98, 130, 797, 799, 800, 801, 803, 804, 805, 806], "level": [15, 16, 19, 117, 126, 127, 130, 131, 132, 144], "optim": [15, 124, 128, 130, 132, 143, 219, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 770, 771, 772, 773, 872, 908, 909, 910, 912], "trainer": [15, 142, 144, 872], "statu": 15, "quo": 15, "kera": 15, "dopamin": 15, "ignit": 15, "catalyst": 15, "lightn": 15, "fastai": 15, "haiku": [15, 132], "flax": [15, 132, 144], "trax": [15, 132], "objax": [15, 132], "idea": [15, 143], "fulli": [15, 120, 121, 125, 127, 128, 129, 130, 131, 132, 144, 891, 901, 902], "offer": [15, 131], "strongli": [16, 17, 872, 878], "welcom": [16, 17, 18, 872, 878], "absolut": [16, 68, 69, 266, 267, 270, 624, 669], "skill": 16, "whether": [16, 17, 23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 109, 110, 122, 124, 125, 155, 156, 163, 164, 185, 188, 200, 206, 207, 208, 218, 219, 235, 236, 247, 251, 252, 255, 256, 260, 263, 265, 266, 385, 388, 503, 504, 507, 511, 512, 521, 524, 528, 530, 540, 542, 544, 547, 548, 549, 550, 551, 552, 553, 565, 569, 575, 576, 577, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 606, 611, 619, 624, 637, 639, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 787, 797, 798, 863, 864, 867, 868, 871, 883, 884, 891, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912], "vetern": 16, "beginn": 16, "start": [16, 17, 18, 19, 20, 68, 69, 111, 113, 114, 122, 126, 127, 129, 130, 131, 143, 144, 166, 167, 175, 176, 219, 231], "aspect": [16, 130, 872], "guid": [16, 17, 18, 116, 872], "through": [16, 18, 19, 111, 114, 117, 118, 121, 126, 127, 129, 130, 131, 132, 143, 266, 296, 299], "journei": [16, 872, 878], "inclusvi": 16, "big": [16, 144], "team": [16, 17, 18], "board": 16, "contributor": [16, 17, 18, 126, 872], "split": [16, 18, 68, 69, 126, 127, 144, 219, 226, 241, 242, 243, 244, 258, 259, 260, 503, 553, 710, 872], "section": [16, 18, 19, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 814, 815, 816, 818], "below": [16, 17, 19, 20, 111, 112, 114, 117, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 143, 166, 177, 181, 182, 266, 304, 307, 324, 327, 336, 339, 460, 463, 494, 498, 624, 631, 633, 634, 636, 682, 684, 710, 724, 727, 728, 731, 814, 815, 816, 819, 820, 823, 872], "best": [16, 17, 18, 19, 20, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 503, 553], "go": [16, 17, 18, 19, 111, 112, 114, 121, 126, 130, 144, 774, 785], "finish": [16, 17, 111, 872], "dive": [16, 18, 19, 126, 129, 130, 144, 872], "right": [16, 17, 18, 68, 69, 111, 114, 130, 266, 312, 315, 320, 323, 624, 673, 675], "environ": [16, 18, 20, 143], "basic": [16, 19, 20], "fork": [16, 17, 503, 554], "doc": [16, 19, 113, 125, 127, 130, 131, 872], "document": [16, 18, 128, 130, 132], "local": [16, 17, 20, 117], "task": [16, 18, 143, 770, 771, 772, 773, 872], "help": [16, 17, 114, 118, 120, 121, 129, 130, 131, 142, 503, 509, 830, 855, 858, 872], "video": [16, 18, 113, 114, 125], "realli": [17, 121, 144], "contribut": [17, 18, 19, 127, 878], "toward": [17, 127, 710, 744, 747, 872, 878], "page": [17, 18, 128, 132, 142, 872, 878], "explain": [17, 18, 19, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 872, 878], "main": [17, 20, 119, 121, 166, 171, 181, 182, 624, 634, 636, 682, 684], "prefer": [17, 121], "mode": [17, 44, 45, 68, 69, 114, 121, 144, 163, 164, 219, 245, 246, 247, 248, 260, 266, 279, 282, 435, 438, 624, 666, 667, 668], "git": [17, 18], "recurs": [17, 20, 23, 24, 25, 26, 27, 68, 69, 117, 121, 131, 144, 774, 775, 776, 784, 785, 786], "submodul": [17, 18, 19, 20, 115, 116, 117, 123, 126, 127, 131, 872, 905, 906, 913, 914], "com": 17, "unifyai": [17, 20], "http": [17, 113, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 577, 578, 581, 583, 585, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "gh": 17, "your_fold": 17, "id": [17, 120, 121, 219, 235, 903, 904], "cours": [17, 18, 114, 130, 144], "whatev": [17, 144], "integr": [17, 116, 185, 188], "familiar": [17, 19], "decid": [17, 68, 69, 774, 785], "sure": [17, 19, 115], "elig": 17, "free": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 143, 872], "student": 17, "licenc": 17, "peopl": [17, 18, 111], "seem": [17, 131, 144], "miss": [17, 114, 116, 120, 121, 907, 911], "add": [17, 18, 19, 34, 35, 64, 65, 68, 69, 70, 71, 79, 80, 81, 82, 109, 110, 111, 112, 113, 117, 118, 120, 121, 125, 127, 129, 144, 266, 283, 504, 508, 792, 793, 796, 872, 878, 905, 906], "explicit": [17, 20, 121, 122, 124, 127, 144], "remind": 17, "channel": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 503, 530, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901], "pace": 17, "updat": [17, 18, 19, 20, 68, 69, 111, 114, 115, 119, 120, 121, 122, 125, 127, 129, 130, 132, 144, 219, 226, 503, 547, 559, 560, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 621, 770, 771, 772, 774, 781, 782, 790, 791, 883, 884, 907, 908, 909, 910, 911, 912], "suggest": [17, 18, 112], "latest": [17, 19, 20, 113, 144, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838, 891, 900], "packag": [17, 20, 144], "ensur": [17, 18, 116, 120, 122, 125, 503, 547], "align": [17, 68, 69, 127, 129, 872, 878], "accord": [17, 20, 68, 69, 117, 122, 185, 191, 194, 202, 266, 279, 282, 320, 323, 435, 438, 503, 531, 559, 560, 624, 685, 687, 710, 720, 723, 766, 769, 830, 851, 854, 859, 862], "stabl": [17, 58, 59, 103, 104, 127, 144, 503, 538, 539, 561, 562, 567, 568, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "pypi": [17, 19, 144], "mayb": [17, 23, 26, 27, 127, 129], "person": [17, 18], "experi": [17, 128, 130, 144], "avoid": [17, 18, 116, 118, 119, 121, 129, 219, 266, 357, 360], "pip": [17, 143, 872], "instal": [17, 20, 143, 872], "abil": [17, 128, 144], "certain": [17, 68, 69, 144, 166, 167, 175, 176], "perhap": [17, 129, 130, 131, 144], "keep": [17, 18, 68, 69, 115, 121, 128, 130, 132, 503, 575], "track": [17, 18, 219, 774, 786, 903, 904], "termin": [17, 18, 20, 68, 69, 70, 71, 72, 121, 127, 130], "run": [17, 20, 115, 116, 118, 125, 127, 128, 129, 130, 131, 132, 143, 144, 219, 226, 577, 578, 581, 583, 585, 593, 595, 770, 771, 772, 773, 891, 902, 903, 904], "command": [17, 20, 872], "ivy_dev": [17, 18, 20], "name": [17, 18, 20, 113, 116, 127, 129, 130, 132, 163, 164, 503, 509, 624, 637, 639, 666, 668, 673, 675, 814, 815, 816], "3": [17, 20, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 114, 118, 121, 127, 129, 130, 131, 132, 155, 157, 158, 159, 160, 165, 166, 174, 177, 180, 183, 184, 185, 191, 192, 193, 194, 195, 219, 235, 238, 254, 261, 266, 279, 280, 281, 282, 283, 284, 287, 304, 307, 320, 323, 324, 327, 328, 330, 331, 336, 339, 353, 356, 361, 362, 363, 364, 369, 372, 373, 376, 389, 392, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 492, 493, 494, 495, 497, 498, 503, 504, 505, 506, 511, 512, 521, 528, 531, 532, 533, 534, 535, 536, 565, 566, 571, 573, 577, 578, 579, 580, 581, 582, 611, 612, 613, 614, 616, 617, 618, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 643, 645, 654, 656, 660, 662, 673, 675, 679, 681, 682, 684, 691, 693, 694, 695, 698, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 746, 747, 748, 749, 750, 753, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 855, 858, 863, 864, 867, 872], "8": [17, 20, 48, 49, 70, 71, 79, 80, 97, 98, 114, 121, 126, 130, 155, 159, 219, 238, 266, 279, 282, 283, 304, 307, 328, 331, 336, 339, 373, 376, 433, 434, 460, 463, 476, 479, 480, 483, 494, 498, 503, 512, 531, 577, 578, 581, 611, 618, 624, 628, 630, 631, 633, 634, 636, 660, 662, 679, 681, 694, 695, 698, 710, 711, 712, 714, 728, 731, 736, 739, 749, 797, 798, 799, 800, 801, 809, 813, 814, 815, 830, 831, 834, 872, 891, 902], "activ": [17, 18, 20, 22, 64, 65, 67, 109, 110, 112, 131, 156, 157, 158, 159, 160, 161, 162, 872, 881, 882], "setup": 17, "click": [17, 18, 113, 872], "icon": [17, 18], "side": [17, 18], "choos": [17, 18, 132, 219, 261, 266, 421, 424, 425, 428, 809, 813, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846], "left": [17, 18, 68, 69, 114, 122, 266, 312, 315, 624, 637, 639, 650, 652, 673, 675, 809, 810, 872], "panel": 17, "select": [17, 18, 116, 127, 129, 132, 144], "drop": [17, 144], "down": [17, 129], "path": [17, 20], "manual": [17, 18, 116, 131, 774, 775, 784, 785], "builtin": [17, 20, 129, 131], "requir": [17, 20, 112, 113, 114, 116, 119, 120, 122, 123, 125, 129, 144, 163, 164, 266, 476, 479, 624, 637, 639, 710, 754, 757, 883, 884], "cmd": [17, 20], "directori": [17, 18, 20, 503, 564], "folder": [17, 18, 20, 112, 115, 116, 117], "file": [17, 18, 20, 68, 69, 112, 113, 117, 118, 120, 121, 127, 130, 503, 564, 903, 904], "abov": [17, 18, 20, 113, 114, 117, 118, 120, 121, 124, 125, 129, 130, 131, 132, 166, 177, 181, 182, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 435, 438, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 611, 614, 623, 624, 631, 633, 634, 636, 637, 639, 682, 684, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 797, 799, 800, 814, 815, 816, 819, 820, 823, 830, 835, 838, 847, 850, 851, 854, 855, 858, 863, 864, 867], "m": [17, 18, 20, 111, 127, 166, 177, 181, 182, 503, 512, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684, 797, 802, 803, 805], "python3": [17, 20], "script": [17, 18, 20, 114, 127, 144], "bat": [17, 18, 20], "OR": [17, 18, 20, 266, 316, 319, 425, 428, 863, 868, 871], "bin": [17, 18, 20], "mac": [17, 18, 20], "linux": [17, 18, 20], "virtualenv": 17, "found": [17, 18, 68, 69, 70, 71, 72, 113, 120, 121, 219, 250], "o": [17, 127, 503, 512], "note": [17, 18, 112, 113, 114, 121, 266, 456, 459, 624, 637, 639, 673, 675, 710, 754, 757, 814, 816, 830, 839, 842], "tick": [17, 18], "abl": [17, 18, 68, 69, 117, 122, 124, 129, 132], "To": [17, 114, 117, 121, 130, 131, 132, 872], "ivy_test": [17, 18], "test_array_api": [17, 18, 115, 116], "cd": [17, 18, 20], "r": [17, 68, 69, 503, 512, 575, 624, 666, 668, 691, 693], "txt": 17, "visual": [17, 144], "jetbrain": 17, "remot": 17, "mitig": 17, "potenti": [17, 126, 266, 357, 360], "conflict": [17, 18, 130], "addit": [17, 18, 68, 69, 112, 113, 116, 121, 122, 129, 130, 132, 219, 261, 266, 279, 282, 503, 525, 526, 527, 792, 793, 796, 891, 901], "yet": [17, 19, 121], "particular": [17, 18, 112, 124, 266, 267, 270], "system": [17, 144, 624, 670, 672], "instruct": [17, 19], "desktop": 17, "wsl": 17, "powershel": 17, "admin": 17, "visit": 17, "link": 17, "imag": [17, 20, 41, 86, 112, 127, 128, 130, 132, 143, 611, 612, 613, 614, 615, 617, 618, 872], "profession": 17, "execut": [17, 20, 121, 124, 127, 129, 132, 144, 503, 574], "deploy": 17, "top": [17, 18, 116, 130, 131, 872], "press": [17, 130, 872], "ok": 17, "correctli": [17, 68, 69, 116, 121, 122, 125, 131, 144, 624, 650, 652, 809, 810], "caus": [17, 18, 114, 116, 121, 124, 144], "earlier": [17, 18], "might": [17, 18, 112, 116, 119, 127, 129, 130, 503, 524], "necessari": [17, 114, 118, 121, 124], "virtualis": 17, "detail": [17, 18, 19, 112, 115, 116, 117, 118, 119, 121, 125, 130, 131, 166, 172, 814, 815, 816, 818], "sudo": 17, "apt": 17, "ca": 17, "certif": 17, "curl": 17, "gnupg": 17, "lsb": 17, "mkdir": 17, "p": [17, 18, 68, 69, 81, 82, 166, 177, 503, 515, 516, 517, 518, 611, 619, 624, 650, 652, 688, 690, 891, 899], "keyr": 17, "fssl": 17, "download": [17, 116], "gpg": 17, "dearmor": 17, "echo": 17, "deb": 17, "arch": 17, "dpkg": 17, "architectur": [17, 132, 144], "lsb_releas": 17, "tee": 17, "list": [17, 19, 20, 23, 24, 25, 26, 27, 64, 65, 68, 69, 83, 84, 109, 110, 112, 114, 122, 123, 125, 127, 130, 131, 132, 144, 166, 167, 168, 169, 177, 178, 179, 183, 185, 189, 219, 226, 227, 235, 237, 238, 241, 242, 245, 246, 260, 503, 512, 566, 571, 575, 578, 580, 582, 611, 612, 613, 614, 615, 616, 617, 618, 624, 679, 681, 710, 716, 719, 728, 731, 749, 754, 757, 774, 775, 776, 780, 785, 786, 792, 793, 796, 809, 812, 863, 864, 867, 868, 871, 872, 891, 892, 893, 894, 895, 896, 897, 898], "dev": [17, 68, 69, 70, 72, 117, 123, 127, 129, 131, 219, 226, 250], "null": 17, "ce": 17, "cli": 17, "containerd": 17, "io": 17, "compos": [17, 121, 144], "plugin": 17, "systemctl": 17, "permiss": 17, "relat": [17, 18, 143, 219], "post": [17, 132, 792, 793, 796, 872, 878], "It": [17, 18, 20, 111, 112, 113, 114, 118, 120, 121, 124, 127, 129, 130, 131, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 219, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 525, 526, 527, 529, 532, 535, 543, 556, 559, 560, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 813, 814, 818, 819, 820, 823, 825, 828, 863, 864, 867, 868, 871], "headach": 17, "arm": 17, "m1": 17, "instead": [17, 18, 19, 113, 114, 116, 117, 121, 124, 125, 127, 129, 130, 144], "featur": [17, 112, 125, 130, 872], "vm": 17, "azur": 17, "cloud": [17, 143], "mean": [17, 18, 60, 61, 68, 69, 105, 106, 109, 110, 111, 114, 117, 121, 122, 123, 124, 127, 129, 130, 131, 132, 143, 144, 219, 245, 246, 247, 248, 260, 503, 526, 770, 771, 772, 773, 774, 780, 797, 802, 814, 815, 830, 872, 885], "configur": [17, 18, 20, 68, 69, 122, 219, 259, 774, 787], "defin": [17, 19, 112, 113, 122, 125, 129, 131, 144, 266, 435, 438, 456, 459, 503, 556, 624, 628, 630, 637, 639, 670, 672, 797, 799, 800, 830, 835, 838, 839, 842, 843, 846], "dockerfil": [17, 20], "longer": [17, 122, 124], "worri": 17, "platform": 17, "agnost": [17, 120, 125, 127, 129, 132, 144, 872], "usual": 17, "studio": 17, "favourit": 17, "extens": [17, 18, 113, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867], "theme": 17, "too": [17, 18, 144, 266, 279, 282, 435, 438], "done": [17, 18, 114, 116, 130], "unsupport": [17, 122, 185, 203, 204], "old": [17, 68, 69, 124], "slow": 17, "ipad": 17, "long": [17, 18, 114, 611, 621], "browser": 17, "cool": [17, 112], "requisit": 17, "head": [17, 121, 611, 622, 872, 891, 902], "pane": [17, 18], "readi": [17, 19], "begin": [17, 774, 775, 785], "outlin": [17, 18, 19, 111, 113, 116, 117, 121, 124, 129], "green": [17, 18, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 916, 917], "dropdown": 17, "tab": [17, 130, 872], "master": [17, 18, 121], "v": [17, 18, 127, 130, 131, 132, 611, 623, 872, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 911, 913, 914], "view": [17, 18, 166, 172, 611, 614, 618], "log": [17, 18, 34, 35, 79, 80, 117, 121, 124, 127, 130, 166, 176, 266, 405, 408, 413, 416, 624, 669, 872], "built": [17, 128, 166, 167, 219, 891, 902, 903, 904], "bottom": 17, "box": 17, "patient": 17, "upto": 17, "15": [17, 97, 98, 114, 266, 304, 307, 460, 463, 611, 614, 624, 634, 636, 660, 662, 679, 681, 710, 744, 747, 792, 793, 796, 797, 799, 800, 801, 809, 812, 814, 815, 830, 831, 834], "minut": 17, "launch": 17, "12": [17, 97, 98, 114, 121, 266, 304, 307, 324, 327, 336, 339, 460, 463, 503, 521, 539, 577, 578, 581, 624, 634, 636, 660, 662, 679, 681, 710, 728, 731, 736, 739, 744, 747, 792, 793, 796, 797, 799, 800, 801, 809, 813, 814, 815, 830, 831, 834], "output": [17, 68, 69, 111, 112, 113, 114, 116, 117, 120, 121, 123, 124, 125, 127, 129, 131, 132, 144, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 188, 190, 219, 226, 227, 260, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 514, 515, 516, 518, 521, 522, 525, 526, 527, 529, 531, 532, 535, 543, 556, 559, 560, 577, 587, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 774, 787, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 813, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902], "That": [17, 18, 129, 130, 131, 266, 456, 459], "alreadi": [17, 18, 68, 69, 118, 121, 125, 129, 144, 219, 266, 328, 331, 361, 364, 435, 438, 460, 463, 499, 502, 624, 660, 662, 872], "refer": [17, 18, 116, 117, 122, 125, 144, 166, 171, 266, 357, 360, 405, 408, 577, 578, 581, 583, 585, 624, 685, 687, 691, 693, 830, 851, 854, 859, 862, 863, 864, 867, 868, 871, 891, 901], "approach": [17, 18, 116, 117, 121, 129, 130, 144], "colour": 17, "applic": [17, 122, 123, 131, 611, 622, 623, 774, 780, 786], "good": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131], "chanc": 17, "vscode": 17, "show": [17, 18, 68, 69, 114, 124, 143, 144, 872], "explor": [17, 128, 132, 143], "troubleshoot": 17, "sometim": [17, 18], "ever": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "64": [17, 130, 131, 266, 476, 479, 480, 483, 611, 617, 618, 624, 660, 662, 830, 831, 834, 872, 891, 902], "bit": [17, 114, 117, 121, 129, 185, 201, 202, 205, 266, 308, 311, 312, 315, 320, 323, 830, 847, 850, 855, 858], "usr": 17, "more": [17, 18, 19, 111, 112, 114, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 166, 167, 185, 189, 266, 357, 360, 624, 646, 649, 710, 728, 731, 814, 815, 816, 818, 872], "nutshel": [17, 125], "hook": 17, "lint": 17, "accept": [17, 18, 23, 113, 114, 116, 117, 120, 121, 123, 124, 125, 129, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 421, 424, 425, 428, 444, 447, 456, 459, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 611, 614, 623, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 814, 815, 816, 819, 820, 823, 830, 835, 838, 839, 842, 863, 864, 867, 872], "fix": [17, 18], "fail": [17, 19, 115, 116, 127, 129], "attempt": [17, 144], "succe": 17, "problemat": 17, "appli": [17, 18, 19, 23, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 142, 144, 155, 156, 157, 158, 159, 160, 161, 162, 185, 191, 192, 193, 195, 210, 267, 268, 279, 280, 281, 283, 328, 329, 330, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 503, 504, 505, 506, 508, 525, 526, 527, 532, 533, 534, 536, 577, 578, 579, 580, 582, 593, 595, 597, 599, 611, 620, 622, 623, 624, 654, 656, 663, 665, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 715, 744, 745, 746, 748, 754, 757, 770, 771, 772, 774, 780, 783, 786, 787, 792, 793, 796, 799, 801, 872, 880, 881, 882, 905, 906], "proce": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifi": [17, 18, 113, 117, 122, 123, 127], "properli": [17, 111], "enter": [17, 18, 120, 122, 123, 125, 219], "unsur": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "feel": [17, 18, 19, 20, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 872], "server": [18, 872], "appropri": [18, 64, 65, 109, 110, 119, 266, 279, 282, 435, 438, 809, 810], "context": [18, 114, 121, 122, 123, 219, 503, 554, 611, 622, 891, 902], "suitabl": [18, 112, 121], "quick": [18, 111, 131], "alwai": [18, 19, 68, 69, 112, 113, 117, 118, 120, 121, 124, 125, 127, 129, 144, 185, 188, 266, 279, 282, 435, 438, 503, 547, 577, 592, 606], "correct": [18, 19, 60, 61, 105, 106, 111, 117, 121, 122, 123, 125, 185, 214, 710, 711, 714, 830, 851, 852, 853, 854, 859, 860, 861, 862, 872], "tendenc": 18, "gener": [18, 19, 20, 37, 64, 65, 68, 69, 82, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 143, 144, 163, 166, 167, 175, 176, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 456, 459, 476, 479, 480, 483, 504, 507, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 592, 710, 724, 727, 744, 747, 797, 798, 799, 800, 803, 805, 807, 814, 815, 816, 819, 820, 823, 830, 835, 838, 872, 907, 911], "land": 18, "end": [18, 121, 124, 126, 143, 144, 166, 167, 266, 296, 299, 872, 878], "world": 18, "come": [18, 19, 131, 142, 872, 878], "fly": 18, "hard": [18, 129], "receiv": [18, 116, 122, 123, 219, 226, 227, 503, 510, 553, 891, 901], "respons": [18, 20], "internship": 18, "comment": 18, "trigger": 18, "unansw": 18, "label": [18, 127, 128, 132, 694, 695, 698, 700, 703, 705, 708], "respond": 18, "remov": [18, 19, 20, 68, 69, 113, 116, 117, 122, 124, 132, 624, 634, 636, 646, 649, 682, 684, 710, 750, 753, 770, 771, 772], "someon": [18, 144], "els": [18, 19, 112, 117, 118, 124, 127, 129, 131, 132, 144, 503, 513, 524, 528, 774, 784], "strive": [18, 144], "repli": 18, "newli": [18, 124, 163, 164, 185, 188, 503, 514], "place": [18, 68, 69, 111, 112, 113, 114, 116, 117, 121, 123, 125, 132, 166, 167, 168, 169, 170, 171, 173, 174, 178, 179, 180, 183, 184, 185, 191, 194, 219, 261, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 545, 546, 547, 611, 614, 623, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867, 907, 908, 909, 910, 911, 912], "bug": [18, 116], "serv": [18, 116, 117, 120, 121, 125, 126, 872], "suspect": 18, "behaviour": [18, 113, 116, 120, 121, 124, 125, 129], "observ": 18, "confid": 18, "noth": [18, 68, 69], "wrong": 18, "someth": [18, 112, 130, 131, 144], "bet": 18, "act": [18, 114, 144], "placehold": [18, 120, 125, 774, 786], "sub": [18, 19, 68, 69, 111, 116, 121, 129, 130, 131, 219, 241, 242, 245, 246, 247, 248, 624, 634, 636, 710, 749, 770, 771, 772, 773, 872], "mark": [18, 116], "ii": [18, 830, 831, 834], "iii": 18, "titl": [18, 872], "issue_numb": 18, "delet": [18, 20], "No": [18, 127], "wait": [18, 68, 69, 70, 71, 72], "progress": [18, 121, 128, 132], "pr": 18, "soon": [18, 121, 142, 144, 872, 878], "partial": [18, 68, 69, 903, 904], "solut": [18, 116, 121, 624, 670, 672], "review": [18, 112], "merg": 18, "everi": [18, 19, 20, 114, 115, 116, 117, 118, 119, 121, 124, 125, 127, 129, 131, 166, 173, 174, 503, 504, 507], "shape": [18, 48, 49, 68, 69, 83, 84, 93, 94, 97, 98, 112, 113, 114, 122, 123, 124, 125, 127, 129, 130, 131, 132, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 219, 228, 256, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 525, 526, 527, 529, 532, 535, 540, 543, 556, 559, 560, 566, 577, 578, 580, 582, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 741, 742, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 812, 813, 819, 820, 823, 825, 828, 830, 831, 834, 863, 864, 867, 868, 871, 872, 891, 893, 894, 895, 896, 897, 898, 905, 906], "move": [18, 68, 69, 112, 219, 261], "within": [18, 23, 26, 27, 116, 131, 144, 166, 167, 797, 803, 805], "7": [18, 20, 34, 35, 48, 49, 70, 71, 79, 80, 97, 98, 114, 117, 121, 124, 155, 157, 158, 219, 238, 266, 279, 280, 281, 282, 283, 304, 307, 308, 311, 324, 327, 328, 331, 336, 339, 353, 356, 361, 364, 373, 376, 433, 434, 460, 463, 476, 479, 489, 493, 494, 498, 503, 512, 521, 531, 577, 578, 581, 583, 585, 593, 595, 611, 617, 618, 623, 624, 628, 630, 631, 633, 634, 636, 660, 662, 679, 681, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 714, 724, 727, 728, 731, 736, 739, 749, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 809, 813, 814, 815, 830, 831, 834], "dai": 18, "close": [18, 113, 266, 357, 360, 460, 463, 624, 673, 675], "likewis": [18, 113, 117, 121, 122, 125, 130], "freed": 18, "flag": [18, 68, 69, 124, 129, 219, 235, 577, 592], "purpos": [18, 20, 114, 116, 117, 119, 120, 121, 125, 126, 129, 266, 357, 360, 872], "remain": [18, 114, 144, 266, 279, 282, 435, 438, 456, 459, 710, 740, 743, 774, 780], "access": [18, 20, 68, 69, 122], "short": [18, 131, 611, 621], "basi": [18, 115, 130], "situat": [18, 132], "alloc": [18, 144, 166, 181, 182, 185, 188, 219], "upon": [18, 114, 116, 124, 144], "period": 18, "prevent": [18, 124, 129, 577, 578, 581, 583, 585, 593, 595, 830, 855, 858, 907, 908, 909], "unabl": 18, "obvious": 18, "never": [18, 121], "reflect": [18, 120], "qualiti": 18, "hypothet": 18, "frustrat": 18, "delai": 18, "busi": 18, "fine": [18, 129, 132], "becaus": [18, 113, 116, 117, 118, 120, 122, 123, 124, 125, 127, 131, 132, 144], "inact": 18, "limit": [18, 68, 69, 70, 71, 72, 114, 116, 127, 130, 132, 144, 185, 202, 205, 503, 515, 516, 518, 710, 711, 714], "me": 18, "unfairli": 18, "definit": [18, 117, 122, 129, 624, 625, 627, 628, 630], "investig": 18, "Then": [18, 20, 129, 144], "practic": [18, 116], "separ": [18, 116, 120, 127, 129, 130], "branch": [18, 121, 144, 163, 164, 266, 296, 299], "simpli": [18, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 113, 114, 116, 117, 120, 121, 123, 124, 125, 127, 131, 132, 191, 192, 193, 195, 266, 267, 268, 279, 280, 281, 283, 328, 329, 330, 357, 360, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 504, 505, 506, 508, 532, 533, 534, 536, 578, 579, 580, 582, 711, 712, 713, 715, 744, 745, 746, 748, 799, 801], "role": [18, 128], "kept": [18, 68, 69, 70, 71, 72, 124, 770, 771, 772], "date": 18, "upstream": [18, 115], "complic": [18, 127], "root": [18, 20, 130, 266, 476, 479, 797, 798, 802], "merge_with_upstream": 18, "sh": 18, "name_of_your_branch": 18, "resolv": [18, 830, 847, 850, 855, 858], "clone": [18, 20, 68, 69, 219, 237, 238, 239, 240], "push": [18, 115], "both": [18, 113, 114, 117, 121, 123, 124, 125, 127, 129, 130, 131, 132, 143, 144, 185, 191, 194, 209, 266, 279, 282, 284, 287, 328, 331, 361, 364, 444, 447, 452, 455, 476, 479, 480, 483, 489, 493, 503, 531, 577, 578, 581, 611, 614, 623, 624, 628, 630, 646, 649, 685, 687, 710, 744, 747, 792, 793, 796, 830, 835, 838, 863, 864, 867], "abort": 18, "tediou": 18, "resolut": 18, "stash": 18, "reinstat": 18, "correspond": [18, 68, 69, 70, 71, 113, 114, 115, 117, 120, 121, 122, 125, 185, 189, 266, 296, 299, 452, 455, 624, 628, 630, 637, 639, 670, 672, 710, 716, 719, 744, 747, 797, 798, 809, 810, 811, 814, 815, 816, 818, 830, 847, 850, 851, 854, 855, 858, 859, 862], "fetch": 18, "uncommit": 18, "unstag": 18, "untrack": 18, "comprehens": 18, "explan": [18, 113, 121, 125, 129], "atlassian": 18, "tutori": 18, "quit": [18, 19, 113, 117, 119, 120], "logic": [18, 119, 120, 122, 123, 129, 219, 252, 266, 417, 420, 421, 424, 425, 428, 863, 864, 867, 868, 871, 872], "around": [18, 68, 69, 70, 71, 72, 117, 120, 125, 129, 144], "blame": 18, "revis": 18, "author": [18, 872], "eg": 18, "16": [18, 79, 80, 97, 98, 114, 130, 266, 489, 490, 492, 493, 611, 617, 624, 634, 636, 660, 662, 799, 801, 809, 813, 830, 831, 834], "5": [18, 20, 34, 35, 36, 37, 48, 49, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 114, 118, 125, 129, 130, 131, 155, 157, 158, 160, 166, 174, 177, 180, 183, 184, 185, 191, 193, 194, 195, 219, 238, 254, 266, 279, 280, 281, 282, 283, 284, 287, 300, 303, 304, 307, 320, 323, 324, 327, 328, 329, 330, 331, 336, 339, 361, 362, 363, 364, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 492, 493, 494, 495, 497, 498, 503, 504, 505, 512, 521, 531, 532, 535, 536, 566, 571, 577, 578, 580, 581, 582, 611, 614, 616, 617, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 643, 645, 660, 662, 679, 681, 682, 684, 694, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 746, 747, 748, 749, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 808, 809, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 863, 864, 867, 891, 902], "past": 18, "l": [18, 111, 624, 625, 627, 637, 639, 646, 649, 682, 684], "filepath": [18, 68, 69], "grep": 18, "commit_id": 18, "handi": 18, "histori": 18, "toggl": 18, "vertic": 18, "highlight": [18, 114], "previou": [18, 116, 125, 132, 144, 577, 583, 585, 593, 595], "inform": [18, 185, 202, 205, 503, 509, 577, 606], "shown": [18, 64, 65, 68, 69, 109, 110, 114, 125, 127, 129, 144, 166, 177, 266, 304, 307, 324, 327, 336, 339, 460, 463, 494, 498, 624, 631, 633, 710, 724, 727, 728, 731, 814, 815, 816, 819, 820, 823], "whenev": [18, 129, 130], "tag": 18, "think": [18, 114], "interact": [18, 872], "gain": [18, 126, 131, 885], "repeat": [18, 48, 49, 68, 69, 93, 94, 113, 114, 118, 120, 121, 503, 527, 710, 762, 765], "yourself": [18, 19, 143], "simpler": [18, 129], "cannot": [18, 118, 122, 132], "least": [18, 114, 117, 120, 624, 646, 649], "final": [18, 113, 114, 117, 120, 122, 124, 127, 129, 130, 166, 175, 176, 503, 530, 891, 902], "tickbox": 18, "lower": [18, 68, 69, 114, 127, 144, 166, 171, 181, 266, 433, 624, 625, 627, 797, 803, 805], "corner": 18, "without": [18, 68, 69, 112, 117, 120, 121, 123, 125, 127, 129, 130, 131, 143, 144, 503, 558, 563, 710, 740, 743, 774, 776, 814, 815, 816, 818], "span": 18, "intent": [18, 124], "larg": [18, 130, 266, 279, 282, 435, 438], "discourag": 18, "philosophi": 18, "increment": [18, 503, 546], "frequent": [18, 19], "valuabl": 18, "infrequ": 18, "earli": [18, 872], "wast": 18, "spot": [18, 117], "mistak": 18, "propos": 18, "mountain": 18, "advoc": [18, 144], "individu": [18, 19, 117], "per": [18, 130, 219, 611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "style": [18, 809, 812], "ve": [18, 126, 129, 797, 798, 872], "were": [18, 68, 69, 112, 116, 121], "actual": [18, 111, 117, 124, 126, 129, 131, 144], "aim": [18, 126], "part": [18, 112, 115, 116, 117, 127, 128, 132, 143, 144, 166, 181, 182, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 903, 904], "subsect": 18, "session": [18, 872], "block": [18, 117, 126, 128, 132, 144, 219, 872], "smaller": [18, 127, 132, 710, 711, 714, 744, 747, 830, 847, 850, 855, 858], "edit": 18, "exact": [18, 68, 69, 127, 814, 815], "beauti": 18, "particularli": [18, 130, 144], "concern": [18, 111, 114, 121, 124, 126], "effici": [18, 116, 117, 121, 124, 125, 127, 130, 144], "difficult": [18, 116, 144, 814, 815, 816, 818], "undo": 18, "stress": 18, "frequenc": [18, 503, 530], "pycharm": 18, "pytest": [18, 116], "button": 18, "declar": 18, "insid": [18, 20, 112, 122], "exec": 18, "rm": 18, "rf": 18, "cp": 18, "ivy_contain": 18, "bash": [18, 20], "test_ivi": [18, 116], "test_funct": 18, "test_cor": 18, "test_imag": 18, "test_random_crop": 18, "header": 18, "summari": [18, 68, 69, 185, 197, 198, 199, 211, 212, 213, 219, 229, 230, 503, 519, 523, 541, 577, 605, 610], "q": [18, 144, 611, 623, 624, 637, 639, 666, 668], "array_api_test": 18, "test_creation_funct": 18, "test_arang": 18, "window": [18, 20, 611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "variou": [18, 113, 119, 125, 143], "valu": [18, 48, 49, 68, 69, 70, 71, 72, 93, 94, 114, 116, 117, 121, 122, 123, 124, 125, 127, 129, 132, 144, 166, 167, 171, 173, 174, 175, 176, 185, 188, 197, 198, 199, 219, 228, 259, 260, 266, 267, 270, 271, 274, 279, 282, 284, 287, 292, 295, 328, 331, 345, 348, 349, 352, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 433, 434, 435, 438, 444, 447, 448, 451, 452, 455, 460, 463, 494, 498, 499, 502, 503, 515, 516, 518, 519, 524, 530, 531, 532, 535, 541, 544, 548, 558, 559, 560, 561, 562, 563, 576, 577, 578, 581, 583, 585, 587, 593, 595, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 654, 656, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 688, 690, 710, 711, 714, 720, 721, 722, 723, 736, 739, 740, 743, 766, 768, 769, 770, 771, 772, 774, 778, 779, 780, 781, 782, 787, 790, 791, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 891, 892, 893, 894, 895, 896, 897, 898, 902, 903, 904, 905, 906, 907, 908, 909, 911], "cpu": [18, 68, 69, 123, 144, 166, 175, 176, 219, 235, 236, 238, 252, 255, 257, 261, 262, 264, 265, 503, 531, 532, 535, 556, 559, 560, 797, 798, 799, 800, 802, 803, 805, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "gpu": [18, 97, 98, 123, 129, 144, 219, 235, 238, 251, 253, 257, 259, 264, 799, 801], "combin": [18, 68, 69, 70, 71, 72, 114, 116, 117, 120, 121, 132, 624, 628, 630], "wherebi": [19, 121, 774, 786], "broad": 19, "distribut": [19, 68, 69, 123, 144, 219, 237, 241, 242, 243, 244, 611, 619, 694, 695, 698, 700, 703, 705, 708, 797, 798, 799, 800, 802, 803, 805, 891, 899, 903, 904], "across": [19, 68, 69, 114, 116, 117, 121, 122, 125, 219, 226, 227, 237, 238, 240, 241, 242, 243, 244, 248, 258, 259, 503, 511, 512, 774, 780, 809, 811], "todo": [19, 116], "commit": [19, 116], "NOT": [19, 266, 421, 424], "static": [19, 68, 69, 75, 76, 79, 80, 81, 82, 83, 84, 91, 92, 93, 94, 97, 98, 103, 104, 109, 110, 113, 114, 117, 144, 163, 164, 191, 195, 279, 283, 489, 490, 494, 495, 504, 508, 532, 536, 711, 715, 744, 748, 799, 801], "method": [19, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 64, 65, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 109, 110, 112, 113, 114, 116, 117, 120, 125, 127, 128, 131, 132, 144, 155, 157, 158, 159, 160, 161, 162, 166, 172, 177, 191, 192, 193, 195, 266, 267, 268, 279, 280, 281, 283, 284, 287, 304, 307, 324, 327, 328, 329, 330, 331, 336, 339, 361, 362, 363, 364, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 494, 495, 496, 497, 498, 503, 504, 505, 506, 508, 519, 520, 531, 532, 533, 534, 536, 559, 560, 571, 573, 577, 578, 579, 580, 582, 593, 595, 597, 599, 611, 617, 623, 624, 625, 627, 628, 630, 631, 633, 694, 695, 698, 710, 711, 712, 713, 715, 724, 727, 728, 731, 736, 739, 744, 745, 746, 748, 749, 758, 761, 774, 775, 785, 786, 787, 792, 793, 796, 797, 799, 801, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 863, 864, 867, 872, 891, 902, 903, 904], "instanc": [19, 23, 24, 25, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 64, 65, 68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 109, 110, 113, 114, 116, 117, 120, 122, 124, 125, 130, 131, 132, 145, 153, 155, 157, 158, 159, 160, 161, 162, 166, 177, 185, 191, 192, 193, 194, 219, 226, 257, 266, 267, 268, 279, 280, 281, 282, 284, 287, 304, 307, 324, 327, 328, 329, 330, 331, 336, 339, 361, 362, 363, 364, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 491, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 520, 531, 532, 533, 534, 547, 571, 573, 578, 579, 580, 582, 611, 614, 617, 623, 624, 625, 627, 628, 630, 631, 633, 694, 695, 698, 710, 711, 712, 713, 724, 727, 728, 731, 736, 739, 744, 745, 746, 747, 749, 758, 761, 792, 793, 796, 797, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 830, 831, 834, 835, 838, 863, 864, 867, 883, 884], "revers": [19, 70, 71, 113, 114, 132, 144, 503, 524, 710, 728, 731], "resourc": 19, "content": [19, 20, 68, 69, 124, 127, 130], "thei": [19, 68, 69, 111, 112, 114, 117, 119, 121, 122, 123, 124, 129, 130, 131, 132, 144, 185, 209, 770, 771, 772, 797, 798, 872, 913, 914], "hypothesi": 19, "cover": [19, 113, 114, 117, 119, 126], "lambda": [19, 127, 130, 907, 910, 912], "direct": [19, 131, 132, 143, 819, 825, 828], "bind": [19, 121], "def": [19, 112, 114, 117, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 872], "special": [19, 70, 71, 112, 113, 114, 120, 125, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 324, 327, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 830, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862], "aforement": 19, "categori": [19, 112, 120, 121, 122, 126, 872], "parent": [19, 129], "arraywithelementwis": [19, 34, 120], "containerwithmanipul": [19, 70, 71, 93], "hint": [19, 112, 113, 117, 120, 124, 125, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 611, 614, 623, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867], "its": [19, 20, 113, 185, 189, 219, 260, 624, 646, 649, 710, 724, 727, 740, 743, 744, 747, 758, 761], "docstr": [19, 20, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 111, 112, 117, 121, 125, 166, 177, 185, 191, 192, 193, 194, 195, 266, 267, 268, 279, 280, 281, 282, 283, 284, 287, 304, 307, 324, 327, 328, 329, 330, 331, 336, 339, 361, 362, 363, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 504, 505, 506, 508, 532, 533, 534, 536, 578, 579, 580, 582, 624, 631, 633, 710, 711, 712, 713, 715, 724, 727, 728, 731, 744, 745, 746, 747, 748, 799, 801, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867], "thorough": [19, 113, 116, 125], "transpil": [19, 126, 128, 872, 878], "builder": [20, 142, 144, 872], "maco": 20, "ubuntu": 20, "uid": 20, "make_docs_without_dock": 20, "rel": [20, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 624, 634, 636, 654, 656, 663, 665, 682, 684, 710, 728, 731, 744, 747, 819, 820, 823, 825, 828, 872], "synchron": 20, "rest": [20, 128, 132], "remove_doc": 20, "_": [20, 113, 121, 124, 129, 130, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 577, 578, 581, 583, 585, 624, 691, 693, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "indic": [20, 36, 37, 68, 69, 81, 82, 128, 132, 155, 160, 266, 464, 467, 503, 531, 532, 533, 534, 535, 536, 543, 556, 559, 560, 611, 612, 613, 614, 615, 616, 617, 618, 624, 688, 690, 710, 744, 747, 774, 775, 777, 779, 781, 782, 783, 785, 788, 789, 790, 791, 792, 793, 796, 797, 798, 809, 810, 811, 812, 814, 815, 817, 819, 820, 823, 825, 828, 872, 875, 877, 891, 892, 893, 894, 895, 896, 897, 898, 903, 904], "privat": [20, 907, 911], "fulfil": [20, 126, 872], "autogenerated_sourc": 20, "format": [20, 68, 69, 113, 122, 123, 127, 129, 130, 185, 200, 219, 236, 830, 831, 834, 872], "png": [20, 130], "_imag": 20, "lastli": 20, "structur": [20, 68, 69, 70, 71, 72, 112, 117, 120, 121, 130, 131, 503, 519, 774, 787], "rst": 20, "skip": [20, 68, 69, 116, 774, 787], "read": [20, 68, 69, 872], "partial_sourc": 20, "conf": 20, "copi": [20, 68, 69, 113, 118, 122, 127, 129, 130, 143, 144, 166, 168, 172, 185, 188, 219, 261, 503, 520, 572, 573, 710, 740, 743, 774, 776, 819, 825, 828], "create_rst_fil": 20, "filter": [20, 611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "repres": [20, 129, 166, 177, 185, 201, 266, 275, 278, 279, 282, 288, 291, 300, 303, 336, 339, 435, 438, 472, 475, 494, 498, 611, 620, 624, 669, 670, 672], "overal": [20, 113, 121, 122, 123, 132], "markup": 20, "6": [20, 34, 35, 38, 39, 48, 49, 70, 71, 79, 80, 81, 82, 97, 98, 114, 118, 121, 129, 130, 131, 155, 157, 158, 160, 166, 174, 219, 238, 254, 266, 279, 280, 281, 282, 283, 284, 287, 304, 307, 308, 311, 324, 327, 328, 329, 330, 331, 336, 339, 361, 364, 373, 376, 433, 434, 440, 443, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 512, 521, 531, 532, 535, 536, 566, 571, 577, 578, 579, 581, 611, 614, 617, 618, 623, 624, 628, 630, 631, 633, 634, 636, 660, 662, 673, 675, 679, 681, 694, 695, 698, 705, 708, 710, 711, 712, 714, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 747, 749, 758, 761, 792, 793, 796, 797, 798, 799, 800, 801, 809, 810, 813, 814, 815, 816, 830, 831, 834, 835, 838], "extract": [20, 112], "get_functions_and_class": 20, "doctr": 20, "readm": [20, 144], "module_nam": 20, "copy_readme_to_rst": 20, "tabl": 20, "toc": 20, "tree": 20, "append": [20, 68, 69, 116, 127, 130, 266, 312, 315, 624, 634, 636, 646, 649], "append_toctree_to_rst": 20, "9": [20, 34, 35, 38, 39, 48, 49, 70, 71, 79, 80, 83, 84, 97, 98, 114, 130, 131, 266, 279, 280, 281, 282, 283, 304, 307, 308, 311, 433, 434, 460, 463, 476, 479, 480, 483, 503, 531, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 611, 614, 617, 618, 624, 628, 630, 631, 633, 634, 636, 660, 662, 673, 675, 679, 681, 710, 711, 712, 714, 728, 731, 736, 739, 744, 747, 749, 797, 798, 799, 800, 801, 809, 813, 814, 815, 830, 831, 834, 907, 908, 909], "index": [20, 68, 69, 117, 121, 129, 165, 166, 171, 177, 219, 257, 503, 509, 531, 532, 535, 710, 754, 757, 774, 777, 778, 781, 782, 783, 788, 790, 809, 810, 811, 812, 814, 815, 816, 819, 820, 823, 875, 877], "create_index_rst": 20, "14": [20, 97, 98, 114, 121, 266, 324, 327, 577, 578, 581, 611, 623, 624, 634, 636, 660, 662, 799, 801, 814, 815, 830, 831, 834], "\u03c0": [20, 266, 271, 274, 284, 287, 292, 295, 296, 299], "namespac": [20, 112, 122, 127, 132], "arraywithactiv": 21, "abc": [21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 129, 219, 226, 231, 503, 528, 903, 904, 907, 911], "collect": [23, 68, 69, 116, 143, 155, 163, 219, 503, 577, 611, 694, 774, 787, 792, 797, 880, 891, 905, 907], "wrap": [23, 30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 65, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 110, 111, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 132, 144, 145, 153, 191, 192, 193, 195, 267, 268, 279, 280, 281, 283, 328, 329, 330, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 503, 504, 505, 506, 508, 514, 532, 533, 534, 536, 577, 578, 579, 580, 582, 609, 711, 712, 713, 715, 744, 745, 746, 748, 799, 801], "args_to_ivi": 23, "include_deriv": [23, 24, 25, 26, 27, 774, 776, 786], "keyword": [23, 24, 25, 68, 69, 70, 71, 72, 112, 122, 123, 124, 125, 130, 166, 177, 219, 226, 227, 240, 244, 248, 503, 510, 553, 774, 780, 830, 855, 858, 903, 904], "variabl": [23, 24, 25, 26, 27, 68, 69, 70, 71, 113, 118, 121, 122, 124, 125, 130, 131, 132, 144, 503, 513, 545, 546, 547, 548, 549, 550, 552, 569, 577, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 606, 609, 611, 622, 624, 670, 672, 770, 771, 772, 773, 792, 793, 796, 872, 883, 884, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "nest": [23, 24, 25, 26, 27, 68, 69, 70, 71, 72, 112, 117, 120, 121, 129, 130, 131, 144, 219, 240, 244, 248, 503, 571, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 903, 904, 907, 908, 909, 910, 911, 912], "unchang": [23, 24, 25, 26, 27], "posit": [23, 24, 25, 34, 35, 79, 80, 125, 130, 143, 165, 166, 171, 185, 202, 219, 240, 244, 248, 266, 267, 270, 377, 380, 381, 384, 435, 438, 456, 459, 503, 530, 624, 625, 627, 710, 724, 727, 744, 747, 797, 807, 809, 812, 863, 864, 867, 868, 871, 883, 884], "bool": [23, 24, 25, 26, 27, 30, 31, 68, 69, 109, 110, 114, 121, 122, 124, 132, 163, 164, 166, 173, 185, 188, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 208, 218, 219, 235, 236, 251, 260, 263, 266, 304, 307, 308, 311, 316, 319, 324, 327, 345, 348, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 417, 420, 421, 424, 425, 428, 444, 447, 503, 504, 507, 511, 512, 521, 524, 528, 530, 540, 542, 547, 549, 550, 551, 552, 565, 575, 576, 577, 606, 624, 625, 627, 650, 652, 673, 675, 688, 690, 710, 749, 770, 771, 772, 773, 774, 775, 776, 780, 784, 785, 786, 797, 798, 809, 810, 811, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "deriv": [23, 24, 25, 26, 27, 122, 123, 129, 131, 166, 170, 174, 180, 184, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 774, 776, 786, 903, 907, 911, 913], "tupl": [23, 24, 25, 26, 27, 44, 45, 68, 69, 112, 121, 122, 123, 125, 129, 130, 131, 144, 163, 164, 166, 168, 169, 173, 178, 179, 183, 185, 190, 204, 219, 235, 503, 530, 566, 611, 614, 617, 618, 621, 624, 654, 656, 663, 665, 673, 674, 675, 679, 681, 688, 690, 710, 716, 719, 720, 723, 728, 731, 732, 735, 740, 743, 744, 747, 750, 753, 754, 757, 766, 769, 770, 771, 772, 773, 774, 776, 777, 779, 781, 782, 783, 785, 786, 788, 789, 790, 791, 797, 802, 803, 805, 809, 812, 814, 815, 816, 817, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "kei": [23, 24, 25, 68, 69, 70, 71, 72, 121, 130, 219, 228, 503, 509, 519, 611, 622, 623, 770, 771, 772, 774, 777, 783, 787, 883, 884, 891, 902, 907, 911], "word": [23, 24, 25, 166, 167, 797, 803, 805, 883, 884], "args_to_n": [23, 124, 129], "to_ivi": [23, 68, 69, 129, 774, 787], "input": [23, 26, 27, 38, 39, 68, 69, 70, 71, 72, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 144, 145, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 207, 208, 209, 210, 214, 219, 226, 227, 235, 236, 237, 238, 240, 241, 244, 248, 254, 260, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 283, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 490, 493, 494, 495, 498, 499, 502, 503, 504, 507, 508, 509, 511, 512, 513, 515, 516, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 540, 542, 543, 545, 546, 547, 549, 550, 551, 552, 556, 559, 560, 565, 566, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 587, 592, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 715, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906], "leaf": [23, 26, 27, 68, 69, 117, 121, 130, 774, 775, 784, 785], "union": [23, 26, 27, 36, 37, 44, 45, 68, 69, 112, 114, 117, 120, 121, 122, 123, 124, 125, 127, 132, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 249, 255, 257, 259, 260, 261, 262, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 507, 511, 512, 515, 516, 518, 521, 522, 525, 526, 527, 529, 530, 531, 532, 533, 535, 540, 542, 543, 545, 546, 547, 556, 559, 560, 565, 566, 571, 572, 573, 575, 576, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 785, 786, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "nativearrai": [23, 26, 27, 36, 37, 112, 114, 117, 120, 121, 124, 125, 127, 129, 132, 145, 153, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 170, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 188, 189, 190, 191, 194, 200, 202, 205, 207, 208, 210, 214, 219, 235, 236, 238, 254, 260, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 504, 505, 507, 511, 512, 515, 516, 518, 520, 521, 522, 525, 526, 527, 529, 530, 531, 532, 533, 535, 540, 542, 543, 545, 546, 547, 556, 559, 560, 565, 566, 571, 572, 573, 575, 576, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 774, 776, 786, 792, 793, 796, 797, 798, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "travers": [23, 26, 27, 68, 69, 121, 127, 129, 774, 786], "lowest": [23, 26, 27, 68, 69, 117, 144, 774, 786, 797, 799, 800], "leav": [23, 26, 27, 68, 69, 70, 71, 113, 114, 116, 117, 121, 122, 124, 125, 130, 131, 710, 754, 757, 774, 775, 776, 784, 785, 786], "to_n": [23, 68, 69], "item": [23, 27, 64, 65, 68, 69, 122, 127, 129, 130, 132, 185, 197, 219, 226, 227, 228, 235, 237, 239, 241, 243, 247, 503, 519, 541, 567, 568, 774, 779, 780, 781, 782, 786, 790, 791, 872, 903, 904], "arraywithcr": 28, "creation": [29, 68, 69, 70, 71, 72, 74, 112, 122, 123, 127, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "data_typ": [30, 31, 75, 76, 112, 122, 185, 186, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "arraywithdatatyp": 30, "can_cast": [30, 31, 75, 76, 117, 122, 185, 195], "variant": [30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 113, 114, 191, 192, 193, 195, 267, 268, 279, 280, 281, 283, 328, 329, 330, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 504, 505, 506, 508, 532, 533, 534, 536, 578, 579, 580, 582, 711, 712, 713, 715, 744, 745, 746, 748, 799, 801], "minim": [30, 31, 34, 35, 36, 37, 38, 39, 48, 49, 75, 76, 79, 80, 81, 82, 83, 84, 93, 94, 97, 98, 113, 124, 127, 191, 192, 193, 195, 267, 268, 279, 280, 281, 283, 328, 329, 330, 361, 362, 363, 489, 490, 491, 492, 494, 495, 496, 497, 504, 505, 506, 508, 532, 533, 534, 536, 578, 579, 580, 582, 711, 712, 713, 715, 744, 745, 746, 748, 799, 801], "dtype": [30, 31, 60, 61, 68, 69, 75, 76, 105, 106, 112, 114, 117, 122, 123, 129, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 256, 266, 320, 323, 503, 511, 512, 556, 572, 611, 619, 710, 724, 727, 792, 793, 796, 797, 803, 805, 809, 810, 811, 819, 825, 828, 830, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 863, 864, 867, 872, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 913, 914], "float32": [30, 31, 75, 76, 114, 122, 185, 186, 187, 191, 192, 193, 194, 195, 203, 792, 793, 796], "float64": [30, 31, 122, 185, 188, 191, 192, 194, 203], "true": [30, 31, 36, 37, 44, 45, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 116, 117, 121, 122, 124, 127, 129, 130, 131, 132, 155, 156, 163, 164, 166, 175, 185, 188, 191, 192, 193, 194, 195, 219, 235, 252, 256, 257, 266, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 307, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 327, 328, 330, 332, 334, 336, 338, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 424, 425, 427, 428, 429, 431, 435, 437, 439, 440, 442, 444, 446, 447, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 516, 517, 521, 528, 530, 532, 534, 536, 542, 543, 550, 565, 571, 573, 576, 577, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 611, 619, 624, 625, 627, 646, 648, 650, 652, 673, 674, 675, 688, 690, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 749, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 771, 772, 773, 774, 775, 784, 785, 787, 793, 795, 797, 798, 803, 804, 806, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 870, 871, 891, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912], "arraywithdevic": [32, 129], "ab": [34, 35, 79, 80, 116, 119, 266, 452, 455, 624, 688, 690, 872], "aco": [34, 35, 79, 80, 266, 872], "acosh": [34, 35, 79, 80, 185, 203, 204, 266, 872], "x2": [34, 35, 36, 37, 44, 45, 68, 69, 79, 80, 81, 82, 89, 90, 114, 125, 185, 214, 219, 254, 266, 279, 280, 281, 282, 283, 296, 297, 298, 299, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 340, 341, 342, 343, 344, 345, 346, 347, 348, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 389, 390, 391, 392, 393, 394, 395, 396, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 484, 485, 486, 487, 488, 503, 504, 505, 506, 507, 508, 611, 616, 624, 628, 629, 630, 646, 647, 648, 649, 660, 661, 662, 670, 671, 672, 679, 680, 681, 685, 686, 687, 809, 813], "y": [34, 35, 36, 37, 48, 49, 70, 71, 79, 80, 81, 82, 93, 94, 97, 98, 112, 114, 118, 121, 127, 129, 155, 157, 158, 159, 160, 161, 162, 166, 173, 174, 177, 179, 180, 184, 185, 188, 219, 236, 250, 254, 259, 266, 279, 280, 281, 282, 283, 284, 287, 296, 299, 304, 307, 308, 311, 320, 323, 324, 327, 328, 329, 330, 331, 332, 335, 336, 339, 353, 356, 361, 362, 363, 364, 373, 376, 433, 434, 440, 443, 444, 447, 460, 463, 476, 479, 480, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 507, 508, 511, 512, 520, 521, 528, 529, 531, 532, 533, 534, 535, 536, 565, 571, 572, 573, 577, 587, 611, 617, 618, 620, 624, 625, 627, 628, 630, 631, 633, 643, 645, 660, 662, 679, 681, 682, 684, 694, 695, 698, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 727, 728, 731, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 758, 761, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 816, 819, 820, 823, 830, 831, 834, 835, 838, 851, 854, 855, 858, 863, 864, 867], "z": [34, 35, 36, 37, 70, 71, 79, 80, 81, 82, 114, 118, 121, 127, 129, 219, 250, 266, 279, 280, 281, 282, 283, 304, 307, 324, 327, 373, 376, 433, 434, 503, 511, 512, 531, 532, 533, 534, 536, 565, 624, 628, 630, 694, 695, 698, 700, 703, 710, 711, 714, 809, 810, 830, 831, 834, 835, 838], "asin": [34, 35, 79, 80, 266, 872], "asinh": [34, 35, 79, 80, 266, 872], "atan": [34, 35, 79, 80, 266, 872], "atan2": [34, 35, 79, 80, 266, 872], "atanh": [34, 35, 79, 80, 266, 872], "bitwise_and": [34, 35, 79, 80, 266], "bitwise_invert": [34, 35, 79, 80, 266], "bitwise_left_shift": [34, 35, 79, 80, 266], "bitwise_or": [34, 35, 79, 80, 266], "bitwise_right_shift": [34, 35, 79, 80, 266], "bitwise_xor": [34, 35, 79, 80, 266], "ceil": [34, 35, 79, 80, 166, 167, 266, 872], "cosh": [34, 35, 79, 80, 266, 872], "divid": [34, 35, 68, 69, 79, 80, 114, 120, 266, 365, 368, 503, 567, 710, 749], "equal": [34, 35, 68, 69, 79, 80, 114, 121, 122, 166, 171, 173, 174, 185, 188, 266, 312, 315, 320, 323, 377, 380, 381, 384, 452, 455, 460, 463, 503, 504, 507, 511, 512, 624, 634, 636, 654, 656, 663, 665, 710, 711, 714, 720, 723, 749, 766, 769, 797, 803, 805, 814, 815, 816, 818, 819, 820, 823, 825, 828, 830, 839, 842, 851, 854, 855, 858, 859, 862], "erf": [34, 35, 79, 80, 266], "exp": [34, 35, 79, 80, 266, 357, 360, 413, 416, 872], "expm1": [34, 35, 79, 80, 266], "floor": [34, 35, 79, 80, 266, 320, 323, 503, 529, 872], "floor_divid": [34, 35, 79, 80, 266], "greater": [34, 35, 68, 69, 79, 80, 266, 271, 274, 284, 287, 296, 299, 312, 315, 320, 323, 361, 364, 365, 368, 452, 455, 456, 459, 464, 467, 499, 502, 624, 628, 630, 710, 750, 753, 797, 803, 805], "greater_equ": [34, 35, 79, 80, 266], "isfinit": [34, 35, 79, 80, 266], "isinf": [34, 35, 79, 80, 266], "isnan": [34, 35, 79, 80, 266], "less_equ": [34, 35, 79, 80, 266], "log10": [34, 35, 79, 80, 266], "log1p": [34, 35, 79, 80, 266], "log2": [34, 35, 79, 80, 266], "logaddexp": [34, 35, 79, 80, 266], "logical_and": [34, 35, 79, 80, 266, 872], "logical_not": [34, 35, 79, 80, 266, 872], "logical_or": [34, 35, 79, 80, 266, 872], "logical_xor": [34, 35, 79, 80, 266], "multipli": [34, 35, 79, 80, 114, 118, 120, 266, 503, 521], "neg": [34, 35, 79, 80, 117, 121, 124, 155, 157, 166, 167, 171, 266, 377, 380, 381, 384, 435, 438, 452, 455, 456, 459, 624, 673, 675, 685, 687, 688, 690, 710, 728, 731, 744, 747, 863, 864, 867, 868, 871], "not_equ": [34, 35, 79, 80, 266], "pow": [34, 35, 79, 80, 266], "remaind": [34, 35, 68, 69, 79, 80, 266, 503, 529, 710, 749], "sin": [34, 35, 79, 80, 120, 127, 266, 503, 530, 872], "sinh": [34, 35, 79, 80, 266, 872], "sqrt": [34, 35, 79, 80, 266, 624, 688, 690], "squar": [34, 35, 79, 80, 266, 476, 479, 611, 614, 624, 625, 627, 631, 633, 637, 639, 640, 642, 643, 645, 653, 669, 670, 672, 673, 675], "subtract": [34, 35, 79, 80, 114, 120, 266], "tan": [34, 35, 79, 80, 113, 117, 121, 124, 125, 127, 266, 284, 287, 490, 814, 815, 816, 819, 820, 823, 872], "56": [34, 35, 79, 80, 114, 266, 476, 479, 489, 490, 491, 492, 493, 577, 578, 581, 624, 660, 662, 830, 831, 834], "19": [34, 35, 79, 80, 114, 266, 324, 327, 489, 490, 491, 492, 493, 624, 634, 636], "tanh": [34, 35, 79, 80, 127, 155, 266, 495, 872], "762": [34, 35, 79, 80, 155, 162, 266, 494, 496, 497, 498], "964": [34, 35, 79, 80, 155, 162, 266, 494, 496, 497, 498], "trunc": [34, 35, 79, 80, 266], "elementwis": [35, 68, 69, 80, 112, 117, 127, 132, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502], "arraywithgener": [36, 129], "all_equ": [36, 37, 81, 82, 503, 508], "equality_matrix": [36, 37, 81, 82, 503, 504, 505, 506, 507, 508], "x1": [36, 37, 79, 80, 81, 82, 114, 125, 185, 214, 219, 254, 266, 279, 282, 283, 296, 299, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 344, 345, 348, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 433, 434, 435, 438, 439, 444, 447, 452, 455, 456, 459, 484, 485, 488, 503, 504, 505, 506, 507, 508, 511, 611, 616, 624, 628, 630, 646, 649, 660, 662, 670, 672, 679, 681, 685, 687, 809, 813], "mix": [36, 37, 70, 71, 111, 114, 116, 127, 185, 210, 219, 254, 266, 279, 282, 304, 307, 324, 327, 373, 376, 433, 434, 444, 447, 503, 504, 505, 520, 528, 531, 532, 535, 571, 572, 573, 611, 614, 617, 618, 623, 624, 679, 681, 694, 695, 698, 705, 708, 710, 711, 714, 792, 793, 796, 809, 813, 830, 831, 834, 839, 842], "gather_nd": [36, 37, 68, 69, 81, 82, 503, 536, 872], "arraywithgradi": [38, 129], "adam_step": [38, 39, 83, 84, 577, 582], "mw": [38, 39, 83, 84, 131, 577, 578, 579, 580, 581, 582, 583, 585], "vw": [38, 39, 83, 84, 131, 577, 578, 579, 580, 581, 582, 583, 585], "beta1": [38, 39, 83, 84, 131, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 907, 908, 909], "beta2": [38, 39, 83, 84, 131, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 907, 908, 909], "999": [38, 39, 79, 80, 83, 84, 131, 266, 494, 495, 497, 498, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 907, 908, 909], "epsilon": [38, 39, 46, 47, 50, 51, 83, 84, 91, 92, 95, 96, 117, 121, 124, 131, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 624, 654, 656, 663, 665, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 792, 793, 794, 795, 796, 905, 906, 907, 908, 909], "1e": [38, 39, 46, 47, 50, 51, 83, 84, 91, 92, 95, 96, 117, 121, 124, 131, 132, 503, 539, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 624, 673, 675, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 792, 793, 794, 795, 796, 872, 907, 908, 909, 910, 912], "07": [38, 39, 46, 47, 83, 84, 91, 92, 131, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 907, 908, 909], "dcdw": [38, 39, 83, 84, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "adam_step_delta": [38, 39, 83, 84, 577, 578, 579, 580, 581, 582], "639": [38, 39, 577, 578, 579, 581], "11": [38, 39, 70, 71, 79, 80, 97, 98, 114, 121, 266, 279, 281, 282, 283, 304, 307, 460, 463, 503, 521, 531, 578, 579, 624, 634, 636, 660, 662, 694, 705, 708, 710, 728, 731, 736, 739, 797, 799, 800, 801, 809, 813, 814, 815, 830, 831, 834], "32": [38, 39, 130, 155, 157, 266, 324, 327, 578, 579, 611, 614, 617, 624, 660, 662, 809, 813, 830, 831, 834], "63": [38, 39, 266, 476, 479, 578, 579, 624, 625, 627, 660, 662, 830, 831, 834], "00121": [38, 39, 578, 579], "0102": [38, 39, 578, 579], "0397": [38, 39, 578, 579], "gradient": [39, 68, 69, 84, 112, 121, 130, 131, 143, 144, 219, 260, 578, 581, 583, 585, 587, 588, 590, 592, 593, 595, 597, 599, 601, 603, 605, 606, 607, 608, 609, 610, 770, 771, 772, 773, 872, 907, 908, 909, 910, 911, 912], "arraywithimag": [40, 129], "arraywithlay": 42, "linear_algebra": [44, 45, 89, 90, 112, 129, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693], "arraywithlinearalgebra": 44, "choleski": [44, 45, 70, 71, 624], "upper": [44, 45, 68, 69, 166, 171, 182, 624, 625, 626, 627, 666, 668, 797, 803, 805], "cross": [44, 45, 70, 71, 624, 694, 695, 698, 700, 703, 705, 708, 872], "axi": [44, 45, 46, 47, 48, 49, 58, 59, 60, 61, 62, 63, 68, 69, 91, 92, 93, 94, 103, 104, 105, 106, 107, 108, 114, 117, 121, 122, 124, 125, 127, 129, 132, 143, 155, 160, 166, 175, 176, 219, 220, 223, 228, 241, 242, 243, 244, 245, 246, 247, 248, 260, 503, 521, 522, 531, 575, 624, 628, 629, 630, 634, 636, 685, 686, 687, 688, 689, 690, 694, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 736, 737, 738, 739, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 765, 766, 769, 797, 808, 809, 810, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "det": [44, 45, 70, 71, 624], "diagon": [44, 45, 70, 71, 166, 171, 181, 182, 624, 682, 684], "offset": [44, 45, 50, 51, 95, 96, 624, 634, 635, 636, 682, 683, 684, 792, 793, 794, 795, 796], "axis1": [44, 45, 48, 49, 93, 94, 624, 634, 635, 636, 710, 758, 759, 760, 761], "axis2": [44, 45, 624, 634, 635, 636], "eigh": [44, 45, 70, 71, 624], "namedtupl": [44, 45, 624, 637, 638, 639, 666, 667, 668, 673, 675, 814, 815, 816], "eigvalsh": [44, 45, 70, 71, 624], "inv": [44, 45, 70, 71, 129, 624, 872], "matmul": [44, 45, 89, 90, 112, 118, 127, 624, 673, 675, 872], "matrix_norm": [44, 45, 68, 69, 624], "ord": [44, 45, 68, 69, 624, 650, 651, 652, 688, 689, 690], "fro": [44, 45, 624, 650, 651, 652], "keepdim": [44, 45, 60, 61, 62, 63, 68, 69, 105, 106, 107, 108, 503, 575, 624, 650, 651, 652, 688, 689, 690, 809, 810, 811, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "matrix_rank": [44, 45, 70, 71, 624], "rtol": [44, 45, 624, 654, 655, 656, 663, 664, 665], "matrix_transpos": [44, 45, 70, 71, 129, 624], "outer": [44, 45, 70, 71, 624, 770, 771, 772, 773], "pinv": [44, 45, 70, 71, 624, 872], "qr": [44, 45, 70, 71, 624], "reduc": [44, 45, 68, 69, 129, 219, 260, 503, 526, 624, 666, 667, 668, 809, 810, 811, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "solv": [44, 45, 70, 71, 128, 143, 624], "svd": [44, 45, 70, 71, 624, 872], "full_matric": [44, 45, 624, 673, 674, 675], "svdval": [44, 45, 70, 71, 624], "tensordot": [44, 45, 70, 71, 624], "ax": [44, 45, 48, 49, 68, 69, 93, 94, 112, 114, 122, 129, 219, 260, 503, 521, 624, 650, 652, 670, 672, 679, 680, 681, 688, 690, 710, 720, 723, 728, 731, 732, 733, 734, 735, 744, 747, 750, 753, 758, 761, 766, 769, 809, 810, 811, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "trace": [44, 45, 68, 69, 70, 71, 127, 144, 503, 549, 550, 552, 624], "vecdot": [44, 45, 70, 71, 624], "vector_norm": [44, 45, 68, 69, 624], "vector_to_skew_symmetric_matrix": [44, 45, 70, 71, 624, 872], "arraywithloss": 46, "binary_cross_entropi": [46, 47, 91, 92, 694], "pred": [46, 47, 91, 92, 117, 121, 124, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "cross_entropi": [46, 47, 91, 92, 117, 121, 124, 694, 705, 708], "sparse_cross_entropi": [46, 47, 91, 92, 694], "loss": [47, 92, 112, 117, 130, 131, 132, 695, 698, 700, 703, 705, 708, 872], "arraywithmanipul": 48, "clip": [48, 49, 68, 69, 93, 94, 117, 121, 124, 127, 130, 132, 266, 433, 434, 503, 515, 516, 518, 710, 715, 872], "x_min": [48, 49, 68, 69, 93, 94, 127, 132, 710, 711, 712, 713, 714, 715], "x_max": [48, 49, 68, 69, 93, 94, 127, 132, 710, 711, 712, 713, 714, 715], "roll": [48, 49, 93, 94, 121, 125, 710, 711, 712, 748], "concat": [48, 49, 68, 69, 93, 94, 219, 245, 246, 247, 248, 260, 503, 530, 710, 872], "constant_pad": [48, 49, 93, 94, 710], "pad_width": [48, 49, 93, 94, 710, 720, 721, 722, 723, 766, 767, 768, 769], "expand_dim": [48, 49, 93, 94, 127, 130, 710, 872], "flip": [48, 49, 93, 94, 129, 130, 132, 266, 308, 311, 710, 736, 739, 872], "permute_dim": [48, 49, 93, 94, 710], "reshap": [48, 49, 68, 69, 93, 94, 124, 127, 129, 132, 710, 872], "shift": [48, 49, 93, 94, 114, 125, 266, 312, 315, 320, 323, 710, 744, 745, 746, 747, 748], "squeez": [48, 49, 93, 94, 710, 872], "stack": [48, 49, 68, 69, 93, 94, 127, 166, 181, 182, 624, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 653, 654, 656, 657, 659, 663, 665, 666, 668, 673, 675, 676, 678, 682, 684, 710, 774, 775, 784, 785, 872, 891, 900], "swapax": [48, 49, 93, 94, 710], "axis0": [48, 49, 93, 94, 710, 758, 759, 760, 761], "tile": [48, 49, 93, 94, 710, 872], "rep": [48, 49, 93, 94, 710, 762, 763, 764, 765], "zero_pad": [48, 49, 93, 94, 710, 872], "arraywithnorm": 50, "layer_norm": [50, 51, 95, 96, 792], "normalized_idx": [50, 51, 95, 96, 792, 793, 794, 795, 796], "05": [50, 51, 95, 96, 219, 577, 578, 581, 792, 793, 794, 795, 796], "scale": [50, 51, 95, 96, 121, 219, 258, 259, 577, 597, 599, 611, 619, 622, 623, 792, 793, 794, 795, 796, 891, 899, 902, 907, 910], "new_std": [50, 51, 95, 96, 792, 793, 794, 795, 796, 905, 906], "norm": [51, 68, 69, 96, 112, 503, 515, 516, 518, 624, 650, 652, 688, 690, 793, 796, 872, 906, 907, 909], "arraywithrandom": [52, 129], "random": [53, 68, 69, 98, 112, 123, 132, 143, 798, 799, 800, 802, 803, 805, 807, 808, 872], "arraywithsearch": 54, "arraywithset": 56, "arraywithsort": 58, "argsort": [58, 59, 103, 104, 819], "descend": [58, 59, 103, 104, 624, 673, 675, 676, 678, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "sort": [59, 68, 69, 70, 71, 72, 104, 112, 624, 637, 639, 673, 675, 676, 678, 820, 823], "arraywithstatist": 60, "einsum": [60, 61, 105, 106, 830], "equat": [60, 61, 105, 106, 624, 670, 672, 830, 831, 832, 833, 834], "max": [60, 61, 68, 69, 105, 106, 185, 202, 205, 266, 433, 503, 515, 516, 518, 526, 559, 560, 624, 654, 656, 663, 665, 830, 907, 909], "min": [60, 61, 68, 69, 105, 106, 185, 202, 205, 266, 434, 503, 526, 559, 560, 567, 624, 666, 668, 673, 675, 676, 678, 688, 690, 830], "prod": [60, 61, 68, 69, 105, 106, 114, 122, 503, 526, 830], "std": [60, 61, 105, 106, 114, 797, 802, 814, 815, 830], "sum": [60, 61, 68, 69, 105, 106, 117, 121, 122, 124, 127, 219, 245, 246, 247, 248, 260, 266, 279, 282, 413, 416, 503, 522, 526, 559, 560, 611, 623, 624, 673, 675, 682, 684, 688, 690, 830, 831, 834, 851, 854], "var": [60, 61, 105, 106, 109, 110, 114, 127, 770, 771, 772, 830], "statist": [61, 106, 109, 110, 112, 122, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862], "arraywithutil": 62, "util": [63, 108, 112, 123, 219, 249, 864, 867, 868, 871], "add_ivy_array_instance_method": 64, "cl": [64, 65, 109, 110], "to_ignor": [64, 65, 109, 110, 774, 785], "loop": [64, 65, 109, 110, 118, 144, 770, 771, 772, 773], "_wrap_funct": [64, 65, 109, 110, 117, 119], "toi": [64, 65, 109, 110], "arrayexampl": [64, 65], "hasattr": [64, 65, 109, 110, 129], "relu": [64, 65, 70, 71, 130, 131, 155, 156, 157, 872], "softmax": [64, 65, 70, 71, 155, 611, 622, 623, 872], "containerwithactiv": [66, 70, 71], "dict_in": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "queue": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 130, 219, 226, 227, 503, 558, 563], "queue_load_s": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "container_combine_method": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "list_join": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "queue_timeout": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 503], "print_limit": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "key_length_limit": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "print_ind": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "print_line_spac": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "ivyh": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "default_key_color": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "keyword_color_dict": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "rebuild_child_contain": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "types_to_iteratively_nest": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "alphabetical_kei": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "containerbas": [66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 121], "__getitem__": [68, 69, 121], "queri": [68, 69, 121, 122, 129, 219, 249, 259, 611, 622, 623, 891, 902], "slice": [68, 69, 503, 531, 532, 535, 774, 783], "chain": [68, 69, 120, 121, 131, 132, 144, 770, 771, 772, 774, 787, 913, 914], "element": [68, 69, 113, 127, 132, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 173, 174, 181, 182, 219, 239, 243, 247, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 511, 512, 515, 516, 518, 521, 522, 529, 543, 572, 573, 611, 619, 624, 628, 630, 637, 639, 646, 649, 666, 668, 673, 675, 710, 711, 714, 728, 731, 736, 739, 744, 747, 749, 750, 753, 797, 798, 809, 812, 813, 814, 815, 816, 817, 818, 819, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 891, 899], "represent": [68, 69, 70, 71, 72, 143, 165, 185, 186, 187, 202, 205, 219, 232, 233, 266, 267, 270, 279, 282, 304, 307, 316, 319, 324, 327, 429, 432, 435, 438, 503, 509, 566, 571], "dictionari": [68, 69, 70, 71, 72, 130, 144, 219, 259], "sequenc": [68, 69, 70, 71, 72, 114, 122, 143, 219, 226, 227, 503, 512, 553, 710, 749, 754, 757, 797, 799, 800, 830, 835, 838, 891, 900, 905, 906, 913, 914], "multiprocess": [68, 69, 70, 71, 72, 130, 144, 219, 226, 503], "asynchron": [68, 69, 70, 71, 72], "size": [68, 69, 70, 71, 72, 129, 130, 166, 175, 176, 219, 258, 259, 260, 503, 559, 565, 611, 623, 624, 634, 636, 650, 652, 660, 662, 666, 668, 673, 675, 685, 687, 710, 724, 727, 744, 747, 749, 750, 753, 797, 798, 802, 803, 805, 809, 810, 812, 863, 864, 867, 868, 871, 891, 892, 893], "dimens": [68, 69, 70, 71, 72, 114, 127, 130, 155, 160, 166, 181, 182, 219, 247, 503, 525, 526, 527, 530, 540, 556, 575, 611, 612, 613, 614, 615, 616, 617, 618, 621, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684, 685, 687, 688, 690, 694, 700, 703, 705, 708, 710, 716, 719, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 770, 771, 772, 773, 797, 808, 809, 810, 811, 812, 814, 815, 816, 818, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902], "arriv": [68, 69, 70, 71, 72], "timeout": [68, 69, 70, 71, 72, 219, 226, 227, 503, 558, 563], "maximum": [68, 69, 70, 71, 72, 114, 127, 130, 132, 219, 240, 244, 248, 260, 266, 503, 515, 516, 518, 530, 577, 593, 595, 710, 711, 714, 774, 786, 809, 810, 830, 835, 838, 843, 846, 872], "length": [68, 69, 70, 71, 72, 130, 166, 167, 177, 624, 673, 675, 676, 678, 710, 740, 743], "whitespac": [68, 69, 70, 71, 72], "indent": [68, 69, 70, 71, 72, 130], "extra": [68, 69, 70, 71, 72, 114, 119, 120, 127, 577, 587], "newlin": [68, 69, 70, 71, 72, 113], "handl": [68, 69, 70, 71, 72, 111, 116, 117, 119, 121, 122, 123, 124, 125, 131, 144, 163, 164, 219, 232, 233, 234, 235, 236, 250, 254, 255, 262, 265, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 907, 908, 909, 910, 911, 912], "result": [68, 69, 70, 71, 72, 112, 113, 114, 116, 120, 121, 122, 124, 125, 130, 144, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 210, 219, 226, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 522, 525, 526, 527, 529, 531, 532, 535, 543, 556, 559, 560, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 774, 787, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 813, 814, 815, 818, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871, 872], "color": [68, 69, 70, 71, 72, 916, 917], "map": [68, 69, 70, 71, 72, 116, 117, 121, 125, 130, 143, 144, 219, 226, 774, 781, 782, 786, 787, 891, 902], "termcolor": [68, 69, 70, 71, 72], "rebuild": [68, 69, 70, 71, 72], "constructor": [68, 69, 70, 71, 72, 122, 123, 129, 503, 510, 913, 914], "param": [68, 69, 70, 71, 72, 81, 82, 127, 132, 503, 509, 531, 532, 535, 536], "alphabet": [68, 69, 70, 71, 72], "preserv": [68, 69, 70, 71, 72, 132, 144, 577, 606, 710, 728, 731], "__setitem__": [68, 69, 120, 121, 129], "val": [68, 69, 124, 129, 503, 545, 546, 547, 561, 562], "after": [68, 69, 114, 121, 122, 126, 185, 214, 266, 476, 479, 577, 583, 585, 587, 588, 590, 593, 595, 597, 599, 601, 603, 792, 793, 796, 907, 908, 909, 910, 911, 912], "all_fals": [68, 69], "assert_is_bool": [68, 69], "key_chain": [68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 191, 193, 195, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 435, 437, 439, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 504, 506, 508, 516, 517, 532, 534, 536, 583, 584, 586, 588, 589, 591, 593, 594, 596, 597, 598, 600, 601, 602, 604, 646, 648, 695, 697, 699, 700, 702, 704, 705, 707, 709, 711, 713, 715, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 774, 787, 793, 795, 799, 801, 803, 804, 806, 820, 822, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 866, 868, 870], "to_appli": [68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 191, 193, 195, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 435, 437, 439, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 504, 506, 508, 516, 517, 532, 534, 536, 583, 584, 586, 588, 589, 591, 593, 594, 596, 597, 598, 600, 601, 602, 604, 646, 648, 695, 697, 699, 700, 702, 704, 705, 707, 709, 711, 713, 715, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 774, 787, 793, 795, 803, 804, 806, 820, 822, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 866, 868, 870], "prune_unappli": [68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 191, 193, 195, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 435, 437, 439, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 504, 506, 508, 516, 517, 532, 534, 536, 583, 584, 586, 588, 589, 591, 593, 594, 596, 597, 598, 600, 601, 602, 604, 646, 648, 695, 697, 699, 700, 702, 704, 705, 707, 709, 711, 713, 715, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 774, 787, 793, 795, 803, 804, 806, 820, 822, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 866, 868, 870], "map_sequ": [68, 69, 70, 71, 75, 76, 79, 80, 81, 82, 83, 84, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 191, 193, 195, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 300, 302, 308, 310, 328, 330, 332, 334, 336, 338, 340, 342, 344, 349, 351, 353, 355, 357, 359, 361, 363, 377, 379, 381, 383, 385, 387, 397, 399, 401, 403, 405, 407, 409, 411, 421, 423, 435, 437, 439, 440, 442, 448, 450, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 504, 506, 508, 516, 517, 532, 534, 536, 583, 584, 586, 588, 589, 591, 593, 594, 596, 597, 598, 600, 601, 602, 604, 695, 697, 699, 700, 702, 704, 705, 707, 709, 711, 713, 715, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 758, 760, 762, 764, 766, 768, 793, 795, 803, 804, 806, 820, 822, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 866, 868, 870], "entri": [68, 69, 166, 175, 176, 710, 749, 774, 787], "boolean": [68, 69, 121, 166, 173, 185, 188, 206, 218, 219, 251, 263, 266, 304, 307, 308, 311, 316, 319, 324, 327, 417, 420, 421, 424, 425, 428, 429, 432, 503, 504, 507, 511, 512, 542, 543, 544, 548, 549, 550, 551, 552, 569, 576, 577, 592, 770, 771, 772, 774, 784, 830, 843, 846], "evalu": [68, 69, 121, 266, 353, 356, 357, 360, 397, 400, 401, 404, 405, 408, 409, 412, 440, 443, 464, 467, 480, 483, 774, 775, 784, 785, 863, 864, 867, 868, 871], "assert": [68, 69, 129, 130, 503, 513], "prune": [68, 69, 774, 787, 788, 789], "all_key_chain": [68, 69], "include_empti": [68, 69], "all_tru": [68, 69, 121, 130], "arrays_as_list": [68, 69], "intermedi": [68, 69], "as_arrai": [68, 69, 503, 540, 565], "as_bool": [68, 69], "as_on": [68, 69], "ones": [68, 69, 70, 71, 116, 127, 129, 130, 166, 171, 180, 266, 328, 331, 503, 556, 872], "fill": [68, 69, 166, 169, 173, 174, 179, 180, 183, 184, 797, 799, 800], "as_random_uniform": [68, 69], "low": [68, 69, 97, 98, 127, 797, 799, 800, 801, 803, 804, 805, 806], "uniform": [68, 69, 131, 797, 798, 799, 800, 803, 805, 885, 886, 887, 889], "boundari": [68, 69, 797, 803, 805], "interv": [68, 69, 127, 132, 166, 167, 175, 176, 624, 685, 687, 710, 711, 714, 754, 757, 797, 799, 800, 803, 805, 863, 864, 867, 868, 871], "as_vari": [68, 69], "as_zero": [68, 69], "assert_contains_sub_contain": [68, 69], "sub_cont": [68, 69], "except": [68, 69, 113, 120, 124, 129, 144, 185, 190, 503, 513, 524, 547, 574, 624, 663, 665, 710, 716, 719, 754, 757, 809, 812, 863, 864, 867, 868, 871], "diff": [68, 69, 121, 130], "screen": [68, 69, 130], "assert_contains_sub_structur": [68, 69], "check_shap": [68, 69], "assert_ident": [68, 69], "check_typ": [68, 69], "same_arrai": [68, 69, 130], "arrays_equ": [68, 69, 70, 71, 503], "datatyp": [68, 69, 166, 168, 178, 185, 196, 207, 208, 209], "assert_identical_structur": [68, 69], "at_key_chain": [68, 69], "ignore_key_error": [68, 69], "ignore_non": [68, 69], "at_kei": [68, 69], "ignor": [68, 69, 114, 144, 166, 177, 774, 785, 907, 911], "substr": [68, 69], "clip_min": [68, 69], "clip_max": [68, 69], "minimum": [68, 69, 127, 132, 219, 266, 267, 270, 503, 538, 539, 561, 562, 567, 568, 710, 711, 714, 809, 811, 830, 835, 838, 843, 846, 872], "config": [68, 69, 130, 774, 787], "duplic": [68, 69, 113, 118, 119, 129, 131], "compar": [68, 69, 116, 130, 503, 504, 507, 511, 512, 814, 815, 816, 818, 819, 820, 823, 825, 828], "container_rightmost": [68, 69], "common_key_chain": [68, 69, 121], "properti": [68, 69, 114, 116, 117, 121, 129, 130, 131, 219, 228, 903, 904, 907, 908, 909, 910, 912], "contains_sub_contain": [68, 69], "match": [68, 69, 121, 185, 188, 266, 456, 459, 503, 553], "contains_sub_structur": [68, 69], "create_if_abs": [68, 69], "inplac": [68, 69, 83, 84, 111, 114, 119, 120, 125, 129, 131, 503, 513, 544, 547, 548, 569, 577, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 883, 884, 907, 908, 909, 910, 911, 912], "cutoff_at_depth": [68, 69], "depth_cutoff": [68, 69], "cutoff_at_height": [68, 69], "height_cutoff": [68, 69], "deep_copi": [68, 69, 130], "intern": [68, 69, 113, 120, 121, 123, 124, 219, 577, 609, 774, 775, 784, 785, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 913, 914], "belong": [68, 69, 131], "dev_clon": [68, 69, 219], "dev_dist": [68, 69, 219], "along": [68, 69, 112, 124, 166, 175, 176, 219, 241, 242, 243, 244, 245, 246, 247, 248, 260, 503, 521, 522, 531, 575, 624, 650, 652, 682, 684, 685, 687, 688, 690, 694, 700, 703, 705, 708, 710, 716, 719, 728, 731, 736, 739, 744, 747, 749, 754, 757, 762, 765, 770, 771, 772, 773, 797, 808, 809, 810, 811, 819, 820, 823, 825, 828, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "dev_str": [68, 69], "diff_kei": [68, 69], "detect_key_diff": [68, 69], "detect_value_diff": [68, 69], "detect_shape_diff": [68, 69], "treat": [68, 69, 128, 132, 163, 164], "detect": [68, 69, 125, 130, 131, 774, 775, 785], "container0": [68, 69], "einops_rearrang": [68, 69, 503], "axes_length": [68, 69, 503, 525, 526, 527], "rearrang": [68, 69, 503, 525, 527], "einops_reduc": [68, 69, 503], "reduct": [68, 69, 122, 129, 503, 526, 559, 560, 863, 864, 867, 868, 871, 872], "One": [68, 69, 122, 127, 129, 130, 503, 526, 710, 740, 743, 797, 799, 800], "callabl": [68, 69, 121, 127, 145, 146, 147, 148, 149, 150, 151, 152, 153, 163, 164, 185, 203, 204, 219, 260, 503, 509, 514, 524, 526, 770, 771, 772, 773, 774, 780, 784, 785, 786], "einops_repeat": [68, 69, 503], "find_sub_contain": [68, 69], "sub_cont_to_find": [68, 69], "exsit": [68, 69], "find_sub_structur": [68, 69], "sub_struc_to_find": [68, 69], "flatten_key_chain": [68, 69, 130, 903, 904], "__": [68, 69, 114, 130], "above_height": [68, 69, 130], "below_depth": [68, 69, 130], "format_key_chain": [68, 69], "format_fn": [68, 69], "string": [68, 69, 118, 122, 123, 127, 130, 185, 186, 187, 200, 206, 218, 219, 232, 233, 234, 235, 249, 255, 261, 262, 265, 503, 523], "from_disk_as_hdf5": [68, 69, 130], "h5_obj_or_filepath": [68, 69], "slice_obj": [68, 69], "load": [68, 69, 144], "disk": [68, 69, 130], "h5py": [68, 69], "hdf5": [68, 69, 130, 903, 904], "h5": [68, 69], "from_disk_as_json": [68, 69, 130], "json_filepath": [68, 69], "json": [68, 69, 130], "dure": [68, 69, 117, 121, 122, 123, 124, 144, 163, 164, 219, 261, 503, 574, 577, 578, 581, 583, 585, 593, 595, 624, 646, 649, 770, 771, 772, 773, 830, 851, 854, 859, 862, 903, 904, 907, 908, 909, 911], "from_disk_as_pickl": [68, 69, 130], "pickle_filepath": [68, 69], "pickl": [68, 69, 121, 130], "from_flat_list": [68, 69], "flat_list": [68, 69], "hierarchi": [68, 69, 130], "flat": [68, 69, 503, 559, 710, 736, 739], "popul": [68, 69, 122, 123, 127, 797, 798, 830, 851, 854, 859, 862], "from_numpi": [68, 69, 130], "gather": [68, 69, 503, 532, 535], "h5_file_s": [68, 69], "batch": [68, 69, 117, 121, 130, 219, 258, 259, 503, 530, 611, 620, 624, 688, 690, 770, 771, 772, 773, 792, 793, 796, 905, 906], "handle_inplac": [68, 69], "prime": [68, 69], "overwritten": [68, 69, 118, 120], "has_kei": [68, 69], "query_kei": [68, 69], "somewher": [68, 69], "has_key_chain": [68, 69], "has_nan": [68, 69, 503], "include_inf": [68, 69, 503, 542, 576], "leafwis": [68, 69], "nan": [68, 69, 112, 113, 165, 185, 188, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 377, 380, 385, 388, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 503, 542, 576, 611, 623, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "well": [68, 69, 116, 124, 131, 132, 143, 503, 542, 624, 670, 672], "inf": [68, 69, 165, 503, 542, 576, 624, 688, 690], "wise": [68, 69, 127, 132, 155, 156, 157, 158, 159, 160, 161, 162, 266, 267, 270, 271, 274, 279, 282, 284, 287, 292, 295, 296, 299, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 345, 348, 349, 352, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 444, 447, 452, 455, 456, 459, 484, 488, 503, 529, 710, 711, 714], "identical_array_shap": [68, 69], "exclus": [68, 69, 117, 121, 132, 166, 167, 503, 521, 549, 550, 552, 577, 592, 797, 799, 800], "identical_config": [68, 69], "identical_structur": [68, 69], "if_exist": [68, 69], "inplace_upd": [68, 69, 124, 503, 883, 884], "key_chains_contain": [68, 69], "sub_str": [68, 69], "join": [68, 69, 710, 716, 719, 754, 757, 872], "list_stack": [68, 69, 130], "dim": [68, 69, 122, 503, 556, 891, 902], "func": [68, 69, 121, 163, 164, 219, 260, 503, 514, 577, 587, 774, 787], "map_cont": [68, 69], "include_self": [68, 69], "possibi": [68, 69], "matrix": [68, 69, 166, 177, 181, 182, 503, 504, 507, 515, 611, 620, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 649, 650, 652, 653, 654, 656, 657, 659, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684, 691, 693, 891, 901], "integ": [68, 69, 121, 122, 129, 166, 167, 173, 185, 205, 208, 210, 266, 267, 270, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 361, 364, 365, 368, 429, 432, 452, 455, 456, 459, 460, 463, 499, 502, 624, 653, 685, 687, 688, 690, 710, 749, 797, 799, 800, 807, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "flatten": [68, 69, 503, 530, 624, 660, 662, 688, 690, 710, 736, 739, 744, 747, 809, 810, 811, 814, 815, 816, 818], "broadcast": [68, 69, 112, 113, 114, 121, 122, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 219, 261, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 434, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 521, 525, 526, 527, 529, 532, 535, 543, 556, 559, 560, 577, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 636, 640, 642, 643, 645, 646, 649, 650, 652, 654, 656, 657, 659, 660, 662, 663, 665, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 700, 703, 705, 708, 710, 711, 714, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 813, 814, 818, 819, 825, 828, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "max_depth": [68, 69, 219, 222, 225, 230, 240, 244, 248, 503, 541, 774, 786], "multi_map": [68, 69, 121], "map_nest": [68, 69, 79, 80, 89, 90, 93, 94, 296, 298, 304, 306, 312, 314, 316, 318, 320, 322, 324, 326, 345, 347, 365, 367, 369, 371, 373, 375, 389, 391, 393, 395, 413, 415, 417, 419, 425, 427, 429, 431, 444, 446, 452, 454, 456, 458, 646, 648, 716, 718, 754, 756], "leftmost": [68, 69, 774, 787], "multi_map_in_static_method": [68, 69, 121], "fn_name": [68, 69], "num_arrai": [68, 69], "overwrite_at_key_chain": [68, 69], "overwrit": [68, 69, 124, 127, 219, 260], "target_dict": [68, 69], "return_dict": [68, 69], "prune_empti": [68, 69], "keep_non": [68, 69], "empti": [68, 69, 70, 71, 120, 122, 123, 166, 167, 830, 851, 854, 855, 858, 863, 864, 867, 868, 871], "prune_key_chain": [68, 69], "key1": [68, 69, 131], "key2": [68, 69], "key3": [68, 69], "prune_key_from_key_chain": [68, 69], "prune_kei": [68, 69], "prune_keys_from_key_chain": [68, 69], "remove_key_length_limit": [68, 69], "remove_print_limit": [68, 69], "reshape_lik": [68, 69], "leading_shap": [68, 69], "return_cont": [68, 69], "restructur": [68, 69], "keep_orig": [68, 69], "transpos": [68, 69, 129, 132, 219, 247, 611, 613, 615, 617, 624, 657, 659, 663, 665, 872, 891, 893, 895, 897], "restructure_key_chain": [68, 69], "keychain_map": [68, 69], "set_at_key_chain": [68, 69], "set_at_kei": [68, 69], "set_framework": [68, 69, 127, 129, 130, 132], "set_ivy_backend": [68, 69], "ivy_backend": [68, 69], "attribut": [68, 69, 113, 121, 122, 128, 129, 130, 131, 185, 202, 203, 204, 205, 219, 256], "show_sub_contain": [68, 69], "sub_cont_or_keychain": [68, 69], "shuffl": [68, 69, 797, 872], "seed_valu": [68, 69, 797, 807], "seed": [68, 69, 70, 71, 797, 872], "shuffle_h5_fil": [68, 69], "dataset": [68, 69, 130, 142, 872], "size_ordered_arrai": [68, 69], "keychain": [68, 69], "smallest": [68, 69, 185, 202, 205, 266, 328, 331], "largest": [68, 69, 143, 185, 202, 205, 624, 673, 675], "slice_kei": [68, 69], "key_slic": [68, 69], "all_depth": [68, 69], "slice_via_kei": [68, 69], "sort_by_kei": [68, 69], "num_or_size_split": [68, 69, 127, 710, 749], "with_remaind": [68, 69, 710, 749], "constitu": [68, 69, 132], "dimension": [68, 69, 166, 167, 171, 177, 624, 628, 630, 631, 633, 646, 649, 654, 656, 660, 662, 663, 665, 685, 687, 688, 690, 710, 749, 809, 810, 811, 812, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "evenli": [68, 69, 166, 167, 175, 176, 710, 749], "store": [68, 69, 113, 118, 120, 121, 127, 129, 130, 131, 503, 530, 577, 609, 624, 682, 684, 710, 749, 903, 904], "stop_gradi": [68, 69, 70, 71, 83, 84, 131, 219, 260, 577, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 770, 771, 772, 773, 872, 907, 908, 909, 910, 911, 912], "preserve_typ": [68, 69, 577, 606], "stop": [68, 69, 127, 144, 166, 167, 175, 176, 219, 231, 260, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 606, 770, 771, 772, 773, 907, 908, 909, 910, 911, 912], "structural_diff": [68, 69], "to_devic": [68, 69, 219, 235], "cuda": [68, 69, 127, 130, 144, 166, 175, 176, 219, 226, 232, 257, 503, 531, 532, 535, 556, 559, 560, 797, 798, 799, 800, 803, 805, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914], "target": [68, 69, 111, 126, 130, 131, 132, 219, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 872], "to_dict": [68, 69], "to_disk_as_hdf5": [68, 69, 130], "starting_index": [68, 69], "max_batch_s": [68, 69], "w": [68, 69, 83, 84, 127, 130, 131, 503, 512, 577, 578, 581, 583, 585, 586, 588, 590, 591, 593, 595, 596, 597, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618], "later": [68, 69, 503, 514], "to_disk_as_json": [68, 69, 130], "to_disk_as_pickl": [68, 69, 130], "to_flat_list": [68, 69], "to_iter": [68, 69, 121], "leaf_keys_onli": [68, 69], "to_iterator_kei": [68, 69], "to_iterator_valu": [68, 69], "to_json": [68, 69], "to_list": [68, 69, 503, 872], "to_multi_dev": [68, 69], "multidevcontain": [68, 69, 70], "distributedarrai": [68, 69], "to_numpi": [68, 69, 130, 503, 872], "update_backend": [68, 69], "to_raw": [68, 69], "raw": [68, 69, 113], "trim_kei": [68, 69], "max_length": [68, 69], "try_kc": [68, 69], "tri": [68, 69], "self": [68, 69, 120, 121, 127, 129, 130, 131, 132, 191, 192, 193, 219, 267, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 281, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 297, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 312, 313, 314, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 336, 337, 338, 340, 341, 342, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 435, 436, 437, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 486, 487, 489, 491, 492, 494, 496, 497, 499, 500, 501, 504, 505, 506, 516, 517, 532, 533, 534, 578, 579, 580, 583, 584, 588, 589, 593, 594, 597, 598, 601, 602, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 648, 650, 651, 654, 655, 657, 658, 660, 661, 663, 664, 666, 667, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 697, 700, 701, 702, 705, 706, 707, 711, 712, 713, 716, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 746, 750, 751, 752, 754, 755, 756, 758, 759, 760, 762, 763, 764, 766, 767, 768, 793, 794, 795, 803, 804, 820, 821, 822, 825, 826, 827, 831, 832, 833, 835, 836, 837, 839, 840, 841, 843, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 864, 865, 866, 868, 869, 870, 872, 907, 911], "arbitrari": [68, 69, 116, 117, 121, 124, 125, 131, 144, 166, 177, 185, 189, 210, 219, 245, 246, 248], "concatten": [68, 69, 219, 245, 246, 247, 248, 260], "unstack": [68, 69, 127, 130, 503, 872], "dim_siz": [68, 69, 219], "update_config": [68, 69], "global_norm": [68, 69, 81, 82, 516, 517], "vector": [68, 69, 143, 166, 177, 503, 516, 518, 611, 620, 624, 628, 630, 637, 639, 646, 649, 660, 662, 673, 675, 676, 678, 685, 687, 688, 690, 691, 693, 891, 901], "with_default_key_color": [68, 69], "with_entries_as_list": [68, 69], "with_ivy_backend": [68, 69], "with_key_length_limit": [68, 69, 130], "with_print_ind": [68, 69, 130], "with_print_limit": [68, 69, 130], "with_print_line_spac": [68, 69], "containerwithcr": [70, 71, 73], "containerwithdatatyp": [70, 71, 75], "containerwithdevic": [70, 71, 77], "containerwithelementwis": [70, 71, 79, 121], "containerwithgener": [70, 71, 81], "containerwithgradi": [70, 71, 83], "containerwithimag": [70, 71, 85], "containerwithlay": [70, 71, 87], "containerwithlinearalgebra": [70, 71, 89], "containerwithloss": [70, 71, 91], "containerwithnorm": [70, 71, 95], "containerwithrandom": [70, 71, 97], "containerwithsearch": [70, 71, 99], "containerwithset": [70, 71, 101], "containerwithsort": [70, 71, 103], "containerwithstatist": [70, 71, 105], "containerwithutil": [70, 71, 107], "__add__": [70, 71, 113, 114, 120, 121, 125, 129], "__radd__": [70, 71, 113, 114], "arang": [70, 71, 122, 166, 175, 176, 830, 831, 834, 872], "arg_info": [70, 71, 503], "arg_nam": [70, 71, 503], "argmax": [70, 71, 809, 872], "argmin": [70, 71, 809, 872], "array_equ": [70, 71, 503], "as_ivy_dev": [70, 71, 129, 219], "as_ivy_dtyp": [70, 71, 185], "as_native_dev": [70, 71, 219], "as_native_dtyp": [70, 71, 185], "asarrai": [70, 71, 124, 166, 611, 612, 814, 816], "assert_supports_inplac": [70, 71, 503], "astyp": [70, 71, 122, 124, 185], "broadcast_arrai": [70, 71, 185], "broadcast_to": [70, 71, 122, 185], "cache_fn": [70, 71, 117, 503], "clear_mem_on_dev": [70, 71, 219], "clip_matrix_norm": [70, 71, 503], "closest_valid_dtyp": [70, 71, 185], "container_typ": [70, 71, 503], "conv1d": [70, 71, 611, 891], "conv1d_transpos": [70, 71, 611], "conv2d": [70, 71, 611, 872, 891], "conv2d_transpos": [70, 71, 611], "conv3d": [70, 71, 611, 891], "conv3d_transpos": [70, 71, 611], "copy_arrai": [70, 71, 503], "cumprod": [70, 71, 132, 503], "cumsum": [70, 71, 503, 872], "current_backend_str": [70, 71, 503], "default_devic": [70, 71, 123, 127, 219, 254, 257, 264], "default_dtyp": [70, 71, 117, 122, 185], "default_float_dtyp": [70, 71, 122, 185], "default_int_dtyp": [70, 71, 122, 185], "depthwise_conv2d": [70, 71, 611, 872], "dev_clone_arrai": [70, 71, 219], "dev_clone_it": [70, 71, 219], "dev_clone_nest": [70, 71, 219], "dev_dist_arrai": [70, 71, 219], "dev_dist_it": [70, 71, 219], "dev_dist_nest": [70, 71, 219], "dev_unifi": [70, 71, 219], "dev_unify_arrai": [70, 71, 219], "dev_unify_it": [70, 71, 219], "dev_unify_nest": [70, 71, 219], "dev_util": [70, 71, 123, 219], "dropout": [70, 71, 130, 611, 891, 902], "dtype_bit": [70, 71, 185], "empty_lik": [70, 71, 166], "execute_with_gradi": [70, 71, 121, 130, 131, 132, 144, 577, 872], "ey": [70, 71, 132, 166, 611, 614, 618], "finfo": [70, 71, 185], "floormod": [70, 71, 503, 872], "fourier_encod": [70, 71, 503], "from_dlpack": [70, 71, 166], "full_lik": [70, 71, 166], "function_supported_dtyp": [70, 71, 185], "function_unsupported_dtyp": [70, 71, 185], "gelu": [70, 71, 155, 880], "get_all_arrays_in_memori": [70, 71, 503], "get_all_ivy_arrays_on_dev": [70, 71, 123, 219], "get_min_bas": [70, 71, 503], "get_min_denomin": [70, 71, 503], "get_num_dim": [70, 71, 503, 872], "get_referrers_recurs": [70, 71, 503], "gpu_is_avail": [70, 71, 219], "handle_nest": [70, 71, 117, 121, 145], "handle_out_argu": [70, 71, 119, 122, 123, 124, 125, 145], "iinfo": [70, 71, 185], "indices_wher": [70, 71, 503, 872], "infer_devic": [70, 71, 122, 123, 125, 145], "infer_dtyp": [70, 71, 122, 123, 125, 145], "inplace_arrays_support": [70, 71, 503], "inplace_decr": [70, 71, 503], "inplace_incr": [70, 71, 503], "inplace_variables_support": [70, 71, 503], "inputs_to_native_arrai": [70, 71, 120, 145], "invalid_dtyp": [70, 71, 185], "is_float_dtyp": [70, 71, 185], "is_int_dtyp": [70, 71, 185, 503, 573], "is_ivy_contain": [70, 71, 503], "leaky_relu": [70, 71, 155, 872], "linear": [70, 71, 113, 127, 130, 131, 132, 155, 156, 157, 158, 503, 530, 611, 619, 670, 672, 872, 891, 892, 893, 894, 895, 896, 897, 898], "linspac": [70, 71, 127, 166, 167, 872], "logspac": [70, 71, 127, 166], "lstm_updat": [70, 71, 127, 611], "match_kwarg": [70, 71, 503], "matrix_pow": [70, 71, 624], "meshgrid": [70, 71, 166], "multi_head_attent": [70, 71, 121, 124, 611], "multinomi": [70, 71, 797], "nonzero": [70, 71, 266, 279, 282, 435, 438, 809], "num_arrays_in_memori": [70, 71, 503], "num_cpu_cor": [70, 71, 123, 219], "num_gpu": [70, 71, 116, 123, 219], "num_ivy_arrays_on_dev": [70, 71, 219], "one_hot": [70, 71, 132, 503, 872], "ones_lik": [70, 71, 132, 166, 872], "outputs_to_ivy_arrai": [70, 71, 120, 122, 123, 125, 145], "percent_used_mem_on_dev": [70, 71, 219], "print_all_arrays_in_memori": [70, 71, 503], "print_all_ivy_arrays_on_dev": [70, 71, 219], "promote_typ": [70, 71, 185], "randint": [70, 71, 97, 98, 797, 801, 872], "random_norm": [70, 71, 611, 614, 617, 618, 624, 673, 675, 797, 814, 815], "result_typ": [70, 71, 122, 185], "scaled_dot_product_attent": [70, 71, 611], "scatter_flat": [70, 71, 503], "scatter_nd": [70, 71, 129, 503, 872], "set_default_devic": [70, 71, 123, 219, 264], "set_default_dtyp": [70, 71, 117, 122, 185], "set_default_float_dtyp": [70, 71, 122, 185], "set_default_int_dtyp": [70, 71, 122, 185], "set_min_bas": [70, 71, 503], "set_min_denomin": [70, 71, 503], "set_queue_timeout": [70, 71, 503], "set_split_factor": [70, 71, 219], "set_tmp_dir": [70, 71, 503], "set_with_grad": [70, 71, 577], "shape_to_tupl": [70, 71, 122, 503], "sigmoid": [70, 71, 127, 130, 131, 155, 872], "slogdet": [70, 71, 624], "softplu": [70, 71, 155, 872], "split_factor": [70, 71, 219, 226], "split_func_cal": [70, 71, 219], "stable_divid": [70, 71, 117, 503], "stable_pow": [70, 71, 503], "static_ab": [70, 71], "static_aco": [70, 71], "static_acosh": [70, 71], "static_al": [70, 71], "static_ani": [70, 71], "static_arang": [70, 71], "static_arg_info": [70, 71], "static_arg_nam": [70, 71], "static_argmax": [70, 71], "static_argmin": [70, 71], "static_arrai": [70, 71], "static_array_equ": [70, 71], "static_arrays_equ": [70, 71], "static_as_ivy_dev": [70, 71], "static_as_ivy_dtyp": [70, 71], "static_as_native_dev": [70, 71], "static_as_native_dtyp": [70, 71], "static_asarrai": [70, 71], "static_asin": [70, 71], "static_asinh": [70, 71], "static_assert_supports_inplac": [70, 71], "static_astyp": [70, 71], "static_atan": [70, 71], "static_atan2": [70, 71], "static_atanh": [70, 71], "static_bitwise_and": [70, 71], "static_bitwise_invert": [70, 71], "static_bitwise_left_shift": [70, 71], "static_bitwise_or": [70, 71], "static_bitwise_right_shift": [70, 71], "static_bitwise_xor": [70, 71], "static_broadcast_arrai": [70, 71], "static_broadcast_to": [70, 71], "static_cache_fn": [70, 71], "static_ceil": [70, 71], "static_choleski": [70, 71], "static_clear_mem_on_dev": [70, 71], "static_clip_matrix_norm": [70, 71], "static_clip_vector_norm": [70, 71], "static_closest_valid_dtyp": [70, 71], "static_concat": [70, 71], "static_constant_pad": [70, 71], "static_container_typ": [70, 71], "static_conv1d": [70, 71], "static_conv1d_transpos": [70, 71], "static_conv2d": [70, 71], "static_conv2d_transpos": [70, 71], "static_conv3d": [70, 71], "static_conv3d_transpos": [70, 71], "static_copy_arrai": [70, 71], "static_co": [70, 71], "static_cosh": [70, 71], "static_cross": [70, 71], "static_cumprod": [70, 71], "static_cumsum": [70, 71], "static_current_backend": [70, 71], "static_current_backend_str": [70, 71], "static_default": [70, 71], "static_default_devic": [70, 71], "static_default_dtyp": [70, 71], "static_default_float_dtyp": [70, 71], "static_default_int_dtyp": [70, 71], "static_depthwise_conv2d": [70, 71], "static_det": [70, 71], "static_dev": [70, 71], "static_dev_clon": [70, 71], "static_dev_clone_arrai": [70, 71], "static_dev_clone_it": [70, 71], "static_dev_clone_nest": [70, 71], "static_dev_dist": [70, 71], "static_dev_dist_arrai": [70, 71], "static_dev_dist_it": [70, 71], "static_dev_dist_nest": [70, 71], "static_dev_unifi": [70, 71], "static_dev_unify_arrai": [70, 71], "static_dev_unify_it": [70, 71], "static_dev_unify_nest": [70, 71], "static_dev_util": [70, 71], "static_diagon": [70, 71], "static_dropout": [70, 71], "static_dtyp": [70, 71], "static_dtype_bit": [70, 71], "static_eigh": [70, 71], "static_eigvalsh": [70, 71], "static_einops_rearrang": [70, 71], "static_einops_reduc": [70, 71], "static_einops_repeat": [70, 71], "static_einsum": [70, 71], "static_empti": [70, 71], "static_empty_lik": [70, 71], "static_equ": [70, 71], "static_erf": [70, 71], "static_execute_with_gradi": [70, 71], "static_exist": [70, 71], "static_exp": [70, 71], "static_expand_dim": [70, 71], "static_expm1": [70, 71], "static_ey": [70, 71], "static_finfo": [70, 71], "static_flip": [70, 71], "static_floor": [70, 71], "static_floor_divid": [70, 71], "static_floormod": [70, 71], "static_fourier_encod": [70, 71], "static_from_dlpack": [70, 71], "static_ful": [70, 71], "static_full_lik": [70, 71], "static_function_supported_dtyp": [70, 71], "static_function_unsupported_dtyp": [70, 71], "static_gath": [70, 71], "static_gelu": [70, 71], "static_get_all_arrays_in_memori": [70, 71], "static_get_all_ivy_arrays_on_dev": [70, 71], "static_get_min_bas": [70, 71], "static_get_min_denomin": [70, 71], "static_get_num_dim": [70, 71], "static_get_referrers_recurs": [70, 71], "static_gpu_is_avail": [70, 71], "static_great": [70, 71], "static_greater_equ": [70, 71], "static_handle_nest": [70, 71], "static_handle_out_argu": [70, 71], "static_has_nan": [70, 71], "static_iinfo": [70, 71], "static_indices_wher": [70, 71], "static_infer_devic": [70, 71], "static_infer_dtyp": [70, 71], "static_inplace_arrays_support": [70, 71], "static_inplace_decr": [70, 71], "static_inplace_incr": [70, 71], "static_inplace_upd": [70, 71], "static_inplace_variables_support": [70, 71], "static_inputs_to_native_arrai": [70, 71], "static_inv": [70, 71], "static_invalid_dtyp": [70, 71], "static_is_arrai": [70, 71], "static_is_float_dtyp": [70, 71], "static_is_int_dtyp": [70, 71], "static_is_ivy_arrai": [70, 71], "static_is_ivy_contain": [70, 71], "static_is_native_arrai": [70, 71], "static_is_vari": [70, 71], "static_isfinit": [70, 71], "static_isinf": [70, 71], "static_isnan": [70, 71], "static_layer_norm": [70, 71], "static_leaky_relu": [70, 71], "static_less": [70, 71], "static_less_equ": [70, 71], "static_linear": [70, 71], "static_linspac": [70, 71], "static_log": [70, 71], "static_log10": [70, 71], "static_log1p": [70, 71], "static_log2": [70, 71], "static_logaddexp": [70, 71], "static_logical_and": [70, 71], "static_logical_not": [70, 71], "static_logical_or": [70, 71], "static_logical_xor": [70, 71], "static_logspac": [70, 71], "static_lstm_upd": [70, 71], "static_match_kwarg": [70, 71], "static_matmul": [70, 71], "static_matrix_norm": [70, 71], "static_matrix_pow": [70, 71], "static_matrix_rank": [70, 71], "static_matrix_transpos": [70, 71], "static_max": [70, 71], "static_maximum": [70, 71], "static_mean": [70, 71], "static_meshgrid": [70, 71], "static_min": [70, 71], "static_minimum": [70, 71], "static_multi_head_attent": [70, 71], "static_multinomi": [70, 71], "static_multiprocess": [70, 71], "static_native_arrai": [70, 71], "static_neg": [70, 71], "static_nonzero": [70, 71], "static_not_equ": [70, 71], "static_num_arrays_in_memori": [70, 71], "static_num_cpu_cor": [70, 71], "static_num_gpu": [70, 71], "static_num_ivy_arrays_on_dev": [70, 71], "static_one_hot": [70, 71], "static_on": [70, 71], "static_ones_lik": [70, 71], "static_out": [70, 71], "static_outputs_to_ivy_arrai": [70, 71], "static_percent_used_mem_on_dev": [70, 71], "static_permute_dim": [70, 71], "static_pinv": [70, 71], "static_posit": [70, 71], "static_pow": [70, 71], "static_print_all_arrays_in_memori": [70, 71], "static_print_all_ivy_arrays_on_dev": [70, 71], "static_prod": [70, 71], "static_promote_typ": [70, 71], "static_qr": [70, 71], "static_queue_timeout": [70, 71], "static_random_norm": [70, 71], "static_relu": [70, 71], "static_remaind": [70, 71], "static_repeat": [70, 71], "static_reshap": [70, 71], "static_result_typ": [70, 71], "static_round": [70, 71], "static_scaled_dot_product_attent": [70, 71], "static_scatter_flat": [70, 71], "static_scatter_nd": [70, 71], "static_se": [70, 71], "static_set_default_devic": [70, 71], "static_set_default_dtyp": [70, 71], "static_set_default_float_dtyp": [70, 71], "static_set_default_int_dtyp": [70, 71], "static_set_min_bas": [70, 71], "static_set_min_denomin": [70, 71], "static_set_queue_timeout": [70, 71], "static_set_split_factor": [70, 71], "static_set_tmp_dir": [70, 71], "static_set_with_grad": [70, 71], "static_shap": [70, 71], "static_shape_to_tupl": [70, 71], "static_shuffl": [70, 71], "static_sigmoid": [70, 71], "static_sign": [70, 71], "static_sin": [70, 71], "static_sinh": [70, 71], "static_slogdet": [70, 71], "static_softmax": [70, 71], "static_softplu": [70, 71], "static_solv": [70, 71], "static_split": [70, 71], "static_split_factor": [70, 71], "static_split_func_cal": [70, 71], "static_sqrt": [70, 71], "static_squar": [70, 71], "static_squeez": [70, 71], "static_stable_divid": [70, 71], "static_stable_pow": [70, 71], "static_stack": [70, 71], "static_std": [70, 71], "static_stop_gradi": [70, 71], "static_sum": [70, 71], "static_supports_inplac": [70, 71], "static_svd": [70, 71], "static_svdv": [70, 71], "static_swapax": [70, 71], "static_tensordot": [70, 71], "static_til": [70, 71], "static_tmp_dir": [70, 71], "static_to_devic": [70, 71], "static_to_list": [70, 71], "static_to_native_arrays_and_back": [70, 71], "static_to_numpi": [70, 71], "static_to_scalar": [70, 71], "static_total_mem_on_dev": [70, 71], "static_tpu_is_avail": [70, 71], "static_trac": [70, 71], "static_tril": [70, 71], "static_triu": [70, 71], "static_trunc": [70, 71], "static_try_else_non": [70, 71], "static_type_promote_arrai": [70, 71], "static_unique_al": [70, 71], "static_unique_count": [70, 71], "static_unique_invers": [70, 71], "static_unique_valu": [70, 71], "static_unset_default_devic": [70, 71], "static_unset_default_dtyp": [70, 71], "static_unset_default_float_dtyp": [70, 71], "static_unset_default_int_dtyp": [70, 71], "static_unset_with_grad": [70, 71], "static_unstack": [70, 71], "static_used_mem_on_dev": [70, 71], "static_valid_dtyp": [70, 71], "static_value_is_nan": [70, 71], "static_var": [70, 71], "static_vari": [70, 71], "static_variable_data": [70, 71], "static_vecdot": [70, 71], "static_vector_norm": [70, 71], "static_vector_to_skew_symmetric_matrix": [70, 71], "static_wher": [70, 71], "static_with_grad": [70, 71], "static_zero_pad": [70, 71], "static_zero": [70, 71], "static_zeros_lik": [70, 71], "supports_inplac": [70, 71, 503], "tmp_dir": [70, 71, 503], "to_native_arrays_and_back": [70, 71, 119, 125, 145], "to_scalar": [70, 71, 503], "total_mem_on_dev": [70, 71, 123, 219], "tpu_is_avail": [70, 71, 219], "tril": [70, 71, 166], "triu": [70, 71, 166], "try_else_non": [70, 71, 503], "type_promote_arrai": [70, 71, 185], "unique_al": [70, 71, 814], "unique_count": [70, 71, 814], "unique_invers": [70, 71, 814], "unique_valu": [70, 71, 814], "unset_default_devic": [70, 71, 219], "unset_default_dtyp": [70, 71, 185], "unset_default_float_dtyp": [70, 71, 185], "unset_default_int_dtyp": [70, 71, 185], "unset_with_grad": [70, 71, 577], "used_mem_on_dev": [70, 71, 219], "valid_dtyp": [70, 71, 185], "value_is_nan": [70, 71, 503], "variable_data": [70, 71, 577], "with_grad": [70, 71, 577, 605], "zeros_lik": [70, 71, 166, 710, 711, 714, 872], "at_dev": [70, 72, 219, 229, 230], "int32": [75, 76, 122, 185, 191, 193, 194, 195, 203, 503, 572, 710, 724, 727, 830, 847, 850, 855, 858], "int64": [75, 76, 122, 185, 191, 193, 194, 195, 203, 266, 320, 323, 809, 810, 811, 830, 847, 850, 855, 858], "static_can_cast": [75, 76, 191], "from_": [75, 76, 185, 191, 194, 195], "static_add": [79, 80, 113, 114, 121, 279], "static_divid": [79, 80, 121, 340], "static_multipli": [79, 80, 121, 435], "static_subtract": [79, 80, 121, 484], "static_tan": [79, 80, 114, 121, 489], "143": [79, 80, 114, 266, 489, 490, 492, 493], "38": [79, 80, 114, 266, 489, 490, 492, 493], "static_tanh": [79, 80, 494], "76": [79, 80, 266, 336, 339, 494, 495, 577, 578, 581, 624, 679, 681, 830, 831, 834], "96": [79, 80, 266, 489, 493, 494, 495, 577, 578, 581, 624, 660, 662, 830, 831, 834], "995": [79, 80, 266, 494, 495, 497, 498], "9999": [79, 80, 494, 495], "static_all_equ": [81, 82, 504, 506], "clip_vector_norm": [81, 82, 503], "max_norm": [81, 82, 503, 515, 516, 517, 518], "static_gather_nd": [81, 82, 532], "adam_upd": [83, 84, 131, 577], "lr": [83, 84, 130, 131, 577, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 907, 908, 909, 910, 911, 912], "mw_tm1": [83, 84, 577, 583, 584, 585, 586, 593, 594, 595, 596], "vw_tm1": [83, 84, 577, 583, 584, 585, 586, 593, 594, 595, 596], "gradient_descent_upd": [83, 84, 577, 770, 771, 772, 773, 872], "lamb_upd": [83, 84, 577], "max_trust_ratio": [83, 84, 577, 593, 594, 595, 596, 907, 909], "decay_lambda": [83, 84, 577, 593, 594, 595, 596, 597, 598, 599, 600, 907, 909, 910], "lars_upd": [83, 84, 577], "optimizer_upd": [83, 84, 577], "effective_grad": [83, 84, 577, 601, 602, 603, 604], "static_adam_step": [83, 84, 578], "87": [83, 84, 97, 98, 577, 578, 581, 582, 799, 801], "976": [83, 84, 266, 494, 498, 577, 578, 581, 582], "static_adam_upd": [83, 84, 583], "static_gradient_descent_upd": [83, 84, 588], "static_lamb_upd": [83, 84, 593], "static_lars_upd": [83, 84, 597], "static_optimizer_upd": [83, 84, 601], "static_binary_cross_entropi": [91, 92, 695], "static_cross_entropi": [91, 92, 700], "static_sparse_cross_entropi": [91, 92, 705], "static_clip": [93, 94, 711], "static_rol": [93, 94, 114, 121, 711, 715, 744], "random_uniform": [97, 98, 123, 131, 797, 872], "static_randint": [97, 98, 799], "20": [97, 98, 129, 266, 324, 327, 353, 356, 460, 463, 476, 479, 624, 634, 636, 660, 662, 679, 681, 797, 799, 800, 801, 809, 812, 813, 830, 831, 834], "40": [97, 98, 266, 336, 339, 476, 479, 624, 660, 662, 799, 801, 830, 831, 834], "62": [97, 98, 799, 801], "52": [97, 98, 577, 578, 581, 624, 660, 662, 799, 801, 814, 815, 830, 831, 834], "95": [97, 98, 577, 578, 581, 799, 801], "37": [97, 98, 266, 489, 493, 792, 793, 796, 799, 801], "42": [97, 98, 132, 155, 161, 577, 578, 581, 624, 660, 662, 797, 799, 801, 807, 830, 831, 834], "13": [97, 98, 114, 121, 266, 304, 307, 324, 327, 336, 339, 476, 479, 503, 521, 577, 578, 581, 611, 623, 624, 634, 636, 660, 662, 792, 793, 796, 799, 801, 809, 813, 814, 815, 830, 831, 834], "static_random_uniform": [97, 98, 803], "static_argsort": [103, 104, 820], "static_sort": [103, 104, 825], "add_ivy_container_instance_method": 109, "containerexampl": [109, 110], "who": [111, 126, 144], "mainli": [111, 128, 130], "under": [111, 113, 114, 115, 116, 117, 121, 126, 127, 130, 132], "hood": [111, 114, 116, 117, 121, 126, 127, 130, 132], "weed": [111, 126], "behind": [111, 126, 128, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603], "navig": 111, "tour": 111, "primari": [111, 116, 118, 124, 144], "composit": [111, 116, 118, 120, 121, 124, 127, 131, 132, 144], "nestabl": [111, 113, 114, 116, 124, 185, 191, 194, 266, 279, 282, 284, 287, 328, 331, 361, 364, 444, 447, 476, 479, 480, 483, 489, 493, 503, 531, 611, 614, 623, 710, 744, 747, 792, 793, 796, 830, 835, 838, 863, 864, 867], "dynam": [111, 122, 123, 124, 127, 163, 164], "runtim": [111, 116, 219], "h": [111, 121, 611, 614, 615, 616, 617, 618], "j": [111, 503, 511, 512, 624, 682, 684, 830, 831, 834], "k": [111, 127, 166, 171, 181, 182, 503, 511, 611, 623, 624, 646, 649, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684, 797, 802, 803, 805, 809, 812], "borrow": 111, "n": [111, 166, 177, 181, 182, 503, 512, 611, 619, 624, 634, 636, 646, 649, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 673, 675, 676, 678, 682, 684, 685, 687, 688, 690, 691, 693, 710, 720, 723, 724, 727, 732, 735, 754, 757, 766, 769, 797, 802, 803, 805, 809, 812, 830, 839, 842, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "taken": [112, 132, 624, 634, 636], "constant": [112, 117, 131, 132, 144, 219, 226, 227, 710, 720, 723, 774, 780, 792, 793, 796, 885, 888, 890, 903, 904, 905, 906], "compil": [112, 121, 126, 128, 144, 872, 903, 904, 907, 908, 909, 910, 911, 912], "meta": [112, 120, 771, 772, 773], "overlap": 112, "sever": [112, 144, 624, 643, 645], "judgement": 112, "locat": [112, 116, 118, 123, 797, 798], "some_namespac": 112, "some_backend": 112, "another_backend": 112, "break": [112, 125, 129, 144, 872], "anyth": [112, 872], "refactor": 112, "ongo": 112, "subfold": [112, 116], "via": [112, 121, 122, 123, 124, 127, 129, 130, 143, 774, 775, 784, 785], "file_nam": 112, "my_func": [112, 114], "int": [112, 114, 117, 121, 122, 123, 124, 125, 132, 155, 160, 163, 164, 166, 169, 171, 173, 174, 175, 176, 179, 181, 182, 183, 185, 190, 199, 201, 202, 205, 208, 219, 238, 241, 242, 243, 244, 252, 253, 254, 260, 261, 266, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 503, 509, 521, 522, 525, 526, 527, 530, 531, 540, 556, 559, 560, 565, 566, 575, 577, 578, 581, 583, 585, 593, 595, 611, 612, 614, 616, 617, 618, 624, 628, 630, 634, 636, 679, 681, 682, 684, 685, 687, 688, 690, 694, 700, 703, 705, 708, 710, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 772, 773, 774, 786, 792, 793, 796, 797, 798, 799, 800, 802, 803, 805, 807, 809, 810, 811, 819, 820, 823, 825, 828, 830, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "nativedtyp": [112, 122, 123, 125, 166, 167, 168, 169, 170, 171, 173, 174, 178, 179, 180, 183, 184, 185, 187, 188, 198, 199, 200, 209, 830, 855, 858], "nativedevic": [112, 122, 123, 125, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 183, 184, 219, 233, 234, 235, 249, 255, 257, 259, 261, 262, 265, 503, 556, 797, 798, 799, 800, 802, 803, 805], "my": 112, "numer": [112, 131, 166, 177, 185, 188, 266, 267, 270, 279, 282, 328, 331, 340, 343, 357, 360, 361, 364, 365, 368, 377, 380, 381, 384, 385, 388, 389, 392, 421, 424, 425, 428, 435, 438, 440, 443, 444, 447, 452, 455, 456, 459, 464, 467, 480, 483, 484, 488, 499, 502, 503, 538, 539, 561, 562, 567, 568, 624, 628, 630, 646, 649, 660, 662, 673, 675, 679, 681, 682, 684, 685, 687, 797, 808, 809, 810, 811, 830, 835, 838, 847, 850, 855, 858, 885], "cooler": 112, "produc": [112, 219, 226, 227, 611, 623], "something_cool": 112, "category_nam": [113, 117, 122, 123, 125], "contrast": [113, 125], "backend_nam": [113, 117, 118, 119, 122, 123, 125], "account": 113, "instanti": 113, "firstli": [113, 114, 117, 120, 122, 124, 130], "templat": [113, 872], "spec": [113, 114], "api_specif": [113, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "array_api": 113, "preview": 113, "render": 113, "incorrectli": 113, "onlin": [113, 872], "approxim": [113, 155, 156, 266, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 296, 299, 332, 335, 336, 339, 353, 356, 357, 360, 397, 400, 401, 404, 405, 408, 409, 412, 452, 455, 468, 471, 472, 475, 489, 493, 494, 498, 624, 654, 656, 663, 665], "tangent": [113, 155, 162, 266, 292, 295, 296, 299, 300, 303, 489, 493, 494, 498], "domain": [113, 266, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 296, 299, 332, 335, 336, 339, 353, 356, 357, 360, 397, 400, 401, 404, 409, 412, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498], "infin": [113, 165, 185, 188, 266, 267, 270, 275, 278, 279, 282, 288, 291, 292, 295, 296, 299, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 365, 368, 377, 380, 381, 384, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 624, 688, 690, 830, 835, 838, 843, 846, 863, 864, 867, 868, 871], "codomain": [113, 266, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 296, 299, 332, 335, 336, 339, 353, 356, 357, 360, 397, 400, 401, 404, 409, 412, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498], "x_i": [113, 266, 267, 270, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 308, 311, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 377, 380, 381, 384, 385, 388, 397, 400, 401, 404, 409, 412, 421, 424, 440, 443, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 489, 493, 494, 498, 499, 502, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862], "assum": [113, 118, 122, 129, 130, 144, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 332, 335, 336, 339, 361, 364, 444, 447, 460, 463, 468, 471, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 611, 614, 623, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867], "express": [113, 127, 132, 266, 271, 274, 284, 287, 292, 295, 296, 299, 332, 335, 468, 471, 489, 493], "radian": [113, 266, 271, 274, 284, 287, 292, 295, 296, 299, 332, 335, 468, 471, 489, 493], "float": [113, 117, 121, 122, 124, 125, 129, 131, 155, 157, 165, 166, 167, 169, 171, 173, 174, 175, 176, 179, 183, 185, 188, 198, 202, 207, 210, 219, 249, 255, 259, 262, 265, 266, 267, 270, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 484, 488, 489, 493, 494, 498, 499, 502, 503, 515, 516, 518, 530, 538, 539, 561, 562, 567, 568, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 614, 618, 623, 624, 625, 627, 631, 633, 637, 639, 640, 642, 643, 645, 654, 656, 663, 665, 666, 668, 670, 672, 673, 675, 688, 690, 694, 695, 698, 700, 703, 705, 708, 770, 771, 772, 773, 792, 793, 796, 797, 802, 803, 805, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862], "operand": [113, 266, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 296, 299, 324, 327, 328, 331, 332, 335, 336, 339, 353, 356, 357, 360, 361, 364, 397, 400, 401, 404, 409, 412, 413, 416, 435, 438, 452, 455, 456, 459, 460, 463, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 499, 502, 830, 831, 834, 835, 838, 843, 846, 855, 858], "whose": [113, 166, 181, 182, 266, 275, 278, 288, 291, 300, 303, 332, 335, 336, 339, 452, 455, 468, 471, 472, 475, 489, 493, 494, 498, 503, 514, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684, 710, 728, 731, 744, 747, 814, 815, 816, 830, 831, 834], "ref": [113, 266, 320, 323, 389, 392, 435, 438, 444, 447, 456, 459, 484, 488, 710, 754, 757], "promot": [113, 117, 122, 185, 188, 191, 194, 209, 210, 214, 266, 271, 274, 275, 278, 279, 282, 284, 287, 288, 291, 292, 295, 300, 303, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 332, 335, 336, 339, 340, 343, 353, 356, 357, 360, 397, 400, 401, 404, 409, 412, 413, 416, 429, 432, 435, 438, 452, 455, 456, 459, 468, 471, 472, 475, 476, 479, 489, 493, 494, 498, 624, 625, 627, 628, 630, 643, 645, 646, 649, 654, 656, 660, 662, 663, 665, 670, 672, 685, 687, 688, 690, 710, 754, 757, 830, 839, 842], "But": [113, 121, 132], "needless": 113, "info": [113, 872], "subset": [113, 116, 125, 127], "extend": [113, 116, 118, 125], "renam": 113, "conform": [113, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 357, 360, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867], "org": [113, 185, 191, 194, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 577, 578, 581, 583, 585, 710, 724, 727, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "elementwise_funct": [113, 266, 284, 287, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 476, 479, 480, 483, 710, 744, 747, 814, 815, 816, 819, 820, 823, 830, 835, 838], "descript": [113, 121, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 611, 614, 623, 624, 631, 633, 688, 690, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 814, 815, 816, 819, 820, 823, 830, 835, 838, 863, 864, 867], "simplic": [113, 131, 143, 166, 177, 185, 191, 194, 266, 279, 282, 284, 287, 304, 307, 324, 327, 328, 331, 336, 339, 361, 364, 444, 447, 460, 463, 476, 479, 480, 483, 489, 493, 494, 498, 503, 531, 611, 614, 623, 624, 631, 633, 710, 724, 727, 728, 731, 744, 747, 792, 793, 796, 814, 815, 816, 819, 820, 823, 830, 835, 838], "judgment": 113, "beyond": [113, 710, 744, 747], "text": 113, "func_nam": [113, 114, 117], "pure": [113, 129, 132, 144], "themselv": [113, 117, 121, 122, 123, 131, 774, 775], "operator_nam": 113, "succinct": 113, "contstructor": 113, "though": [113, 117, 122, 130, 144], "forward": [113, 132, 143, 144, 903, 904, 907, 911], "_forward": [113, 127, 130, 131, 872], "former": 113, "trainabl": [113, 128, 130, 131, 577, 592, 883, 884, 903, 904, 913], "explicitli": [113, 117, 118, 120, 121, 124, 127, 144, 624, 637, 639, 891, 900, 902, 903, 904], "latter": [113, 118], "implicit": [113, 121, 127], "docst": 113, "eight": 114, "static_": 114, "op_nam": 114, "__r": 114, "four": [114, 117, 122, 125, 130], "__sub__": [114, 120, 121, 125, 129], "__mul__": [114, 120, 121, 125, 129], "__truediv__": [114, 120, 121], "respect": [114, 120, 121, 122, 125, 166, 177, 266, 267, 270, 279, 282, 296, 299, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 345, 348, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 435, 438, 444, 447, 456, 459, 484, 488, 577, 578, 581, 583, 585, 587, 588, 590, 593, 595, 597, 599, 601, 603, 624, 666, 668, 770, 771, 772, 773], "recap": [114, 121, 131], "independ": [114, 115, 119, 121, 127, 132, 624, 628, 630, 670, 672, 797, 798], "combinatorili": 114, "variat": [114, 116], "grid": [114, 116, 143, 166, 177], "vari": [114, 116, 121, 129, 814, 815, 816, 818], "simplest": 114, "small": [114, 117, 127, 131, 144, 266, 435, 438, 624, 654, 656, 663, 665, 792, 793, 796, 905, 906], "unus": [114, 124, 163, 164], "18": [114, 121, 266, 324, 327, 624, 634, 636, 660, 662, 830, 831, 834], "excess": [114, 118, 129], "showcas": [114, 143], "demonstr": [114, 129], "replic": [114, 122], "meant": 114, "imaginari": 114, "some_flag": 114, "another_flag": 114, "54": [114, 266, 332, 335, 336, 339, 476, 479, 611, 623, 624, 660, 662, 797, 802, 830, 831, 834], "jointli": 114, "three": [114, 121, 126, 166, 177, 872], "x0": [114, 503, 511], "procedur": 114, "sens": [114, 121, 129], "5574077": 114, "1850398": 114, "5463025": 114, "8422884": 114, "91601413": 114, "9647598": 114, "3738229": 114, "1597457": 114, "0963247": 114, "9955841": 114, "3278579": 114, "multi": [114, 121, 126, 144, 611, 622, 624, 628, 630, 872, 878, 891, 902], "seper": [114, 503, 530], "pars": [114, 144], "satisfi": [114, 624, 691, 693], "far": [114, 123, 128, 129, 774, 775, 785], "asid": [114, 143], "irrelev": [114, 122], "increasingli": 114, "complex": [114, 130, 131, 132, 144, 624, 637, 639, 673, 675], "rule": [114, 116, 117, 120, 121, 122, 185, 188, 191, 194, 210, 266, 300, 303, 320, 323, 340, 343, 435, 438, 456, 459, 624, 625, 627, 628, 630, 660, 662, 670, 672], "count": [114, 130, 219, 254, 624, 685, 687, 710, 728, 731, 814, 815, 816, 863, 864, 867, 868, 871], "14254655": 114, "1578213": 114, "380515": 114, "17": [114, 121, 155, 157, 624, 634, 636, 797, 802], "trivial": 114, "By": [114, 117, 121, 124, 131, 132, 503, 521, 522, 624, 685, 687, 710, 736, 739, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "non": [114, 121, 122, 127, 163, 164, 185, 188, 206, 266, 421, 424, 425, 428, 611, 614, 624, 631, 633, 654, 656, 673, 675, 679, 681, 685, 687, 688, 690, 809, 810, 811, 812, 830, 835, 838, 839, 842, 843, 846, 847, 850, 859, 862, 863, 864, 867, 868, 871, 903, 904, 907, 911], "dictat": [114, 120, 124, 125], "exlud": 114, "unit": [115, 116, 144, 155, 156, 157, 158, 219], "thoroughli": [115, 116], "ci": [115, 116, 144], "failur": 115, "On": [116, 128, 132], "fixtur": 116, "consum": [116, 121, 125, 219], "300": [116, 266, 460, 463], "hit": [116, 127], "permit": [116, 120, 125], "action": 116, "eleg": 116, "intellig": 116, "sampl": [116, 611, 619, 797, 798, 802, 803, 805, 830, 851, 854, 859, 862, 891, 899], "rang": [116, 130, 131, 132, 166, 167, 175, 176, 814, 815, 830, 847, 850, 855, 858, 872], "cach": [116, 117, 219, 234, 503, 514], "unexplor": 116, "known": 116, "repeatedli": [116, 121, 774, 783], "upload": 116, "artifact": 116, "parametr": 116, "strategi": 116, "statement": [116, 144], "plai": [116, 132], "helper": [116, 130], "verifi": [116, 122, 123, 129, 872, 878], "truth": [116, 266, 345, 348, 369, 372, 373, 376, 389, 392, 393, 396, 444, 447], "opt": [116, 118, 124, 129], "defer": [116, 117, 120, 121, 122, 123, 124], "suffic": [116, 119], "catch": [116, 503, 524], "systemat": 116, "safeguard": 116, "inabl": 116, "fact": [116, 130], "categor": [117, 123], "mutual": [117, 121], "constitut": [117, 127, 830, 851, 854, 859, 862], "venn": 117, "diagram": 117, "light": [117, 144], "wherea": [117, 120, 122, 123, 125, 132], "hand": [117, 144], "log_pr": [117, 121, 124], "array_arg": 117, "typic": 117, "whatsoev": [117, 121], "commonli": [117, 830, 851, 854, 859, 862], "outsid": [117, 123, 127, 129, 132, 710, 711, 714, 754, 757], "denomin": [117, 144, 503, 529, 539, 562, 567, 568, 792, 793, 796, 905, 906], "divis": [117, 266, 320, 323, 340, 343, 365, 368, 456, 459, 503, 529, 539, 562, 567, 568, 577, 578, 581, 583, 585, 593, 595, 907, 908, 909], "piec": [117, 119, 120, 127], "deal": [117, 144], "concurr": [117, 121], "weight": [117, 121, 131, 132, 577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 611, 620, 621, 623, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 903, 904, 907, 909, 910], "modif": 117, "decor": [117, 119, 121, 122, 123, 124], "group": [117, 121], "briefli": [117, 130], "cast": [117, 122, 185, 188, 191, 194, 710, 716, 719, 830, 847, 850, 855, 858, 872], "get_all_arrays_on_dev": 117, "nested_map": [117, 774], "index_nest": [117, 774], "implicit_backend": 118, "unless": [118, 123, 124, 144, 266, 435, 438, 503, 556], "__dict__": [118, 127, 129], "ivy_original_dict": [118, 127], "unmodifi": [118, 122], "moment": [118, 144, 577, 578, 581, 583, 585, 593, 595, 907, 908, 909], "fallback": 118, "freedom": [118, 830, 851, 854, 859, 862], "recommend": [118, 266, 421, 424, 425, 428, 456, 459, 830, 839, 842], "achiev": [119, 130, 132], "wrapper": [119, 120, 121, 122, 124, 125, 129], "topic": [119, 129], "tf": [120, 122, 123, 124, 125, 127, 132, 144, 872], "_data": [120, 129], "organiz": [120, 121], "inherit": [120, 121, 129], "bear": [120, 121, 122], "mind": [120, 121], "necessarili": [120, 121], "although": [120, 121], "underpin": [120, 121, 127], "programmat": [120, 121], "backup": [120, 121], "accident": [120, 121], "readabl": [120, 121, 125, 129, 130], "absent": [120, 121], "perk": [120, 121], "auto": [120, 121, 130], "throw": [120, 129], "imposs": 120, "coupl": [120, 121, 129, 131], "anywai": 120, "secondli": [120, 122], "easier": 120, "five": [121, 130], "decis": [121, 127, 129], "displai": [121, 130], "arbitrarili": [121, 130], "__repr__": 121, "control": [121, 122, 124, 129, 130, 143], "__getattr__": 121, "underli": [121, 266, 304, 307, 316, 319, 324, 327, 429, 432], "__setattr__": 121, "__contains__": 121, "__getstate__": 121, "__setstate__": 121, "unpickl": 121, "expand": [121, 503, 530, 710, 724, 727], "children": 121, "shallowest": 121, "deepest": 121, "67": [121, 266, 324, 327, 336, 339], "22": [121, 266, 324, 327, 624, 634, 636, 660, 662, 809, 813, 830, 831, 834], "25": [121, 266, 476, 479, 480, 483, 624, 634, 636, 643, 645, 694, 700, 703, 792, 793, 796, 830, 831, 834], "retain_grad": [121, 577, 587], "dy": [121, 577, 587], "dx": [121, 577, 587], "technic": [121, 124, 125, 144], "autograd": [121, 144], "grad": [121, 130, 131, 132, 872, 907, 911], "redund": 121, "num_head": [121, 611, 622, 891, 902], "mask": [121, 611, 622, 623], "to_q_fn": [121, 611, 622], "to_kv_fn": [121, 611, 622], "to_out_fn": [121, 124, 611, 622], "to_q_v": [121, 611, 622], "to_kv_v": [121, 611, 622], "to_out_v": [121, 611, 622], "measur": [121, 611, 622, 891, 902], "dot": [121, 611, 622, 623, 624, 679, 681, 685, 687, 891, 902], "product": [121, 266, 435, 438, 503, 521, 611, 622, 623, 624, 628, 630, 646, 649, 660, 662, 679, 681, 685, 687, 830, 831, 834, 847, 850, 891, 902], "implicitli": 121, "intuit": [121, 130, 131], "debug": [121, 130], "chronolog": 121, "had": [121, 124], "sequenti": [121, 131], "flow": [121, 143], "implic": 121, "slightli": [121, 127, 131], "eager": [121, 144], "int8": [122, 185, 203], "int16": [122, 185, 191, 194, 203, 830, 847, 850, 855, 858], "uint8": [122, 185, 191, 194, 203], "uint16": [122, 185, 204, 830, 847, 850, 855, 858], "uint32": [122, 185, 204, 830, 847, 850, 855, 858], "uint64": [122, 185, 204, 830, 847, 850, 855, 858], "bfloat16": [122, 185, 203], "float16": [122, 185, 204], "all_dtyp": 122, "all_numeric_dtyp": 122, "all_int_dtyp": 122, "all_float_dtyp": 122, "fall": [122, 126, 872, 903, 904, 907, 911], "valid": [122, 127, 185, 196, 611, 612, 613, 614, 615, 616, 617, 618, 710, 754, 757, 863, 864, 867, 868, 871, 891, 892, 893, 894, 895, 896, 897, 898], "invalid": [122, 624, 685, 687, 863, 864, 867, 868, 871], "thirdli": 122, "native_float32": 122, "importantli": [122, 129, 132, 143], "varieti": [122, 123], "conveni": [122, 123, 125, 128, 130, 131], "arguabl": [122, 123], "compound": 122, "overflow": [122, 266, 279, 282, 830, 855, 858], "arr": [122, 123, 792, 793, 796], "scalar": [122, 127, 132, 144, 166, 174, 503, 556, 573, 576, 624, 688, 690], "settabl": [122, 123], "jnp": [122, 123, 124, 125, 132, 872], "jaxarrai": [122, 123, 124, 125], "mx": [122, 123, 124, 872], "nd": [122, 123, 124, 127, 132, 872], "deleg": 122, "fill_valu": [122, 166, 173, 174, 266, 373, 376], "as_n": [122, 185, 197, 198, 199, 200, 219, 235, 236, 257], "idx": [123, 129, 503, 509], "tpu": [123, 219, 238, 263], "aliv": [123, 219, 250, 254, 256, 503, 537, 555, 557], "amount": [123, 219, 262, 694, 695, 698, 700, 703, 705, 708], "memori": [123, 124, 142, 144, 219, 234, 255, 260, 262, 265, 611, 621, 872], "dual": 123, "thrown": [123, 144, 503, 547], "rare": [123, 144], "program": 124, "strictli": 124, "ration": 124, "speak": 124, "subtli": 124, "ensure_in_backend": [124, 503, 547], "x_nativ": 124, "val_n": 124, "is_ivy_arrai": [124, 129, 503], "is_vari": [124, 577], "assign": [124, 129], "elif": 124, "irrespect": [124, 129, 185, 188], "inclus": [124, 166, 167, 797, 799, 800], "omit": [124, 125, 814, 815, 816, 818], "unspecifi": [124, 266, 452, 455, 456, 459, 624, 637, 639, 710, 754, 757], "predominantli": [124, 143], "math": [124, 132, 872], "presenc": 124, "altern": [124, 130], "_wrap_fn": 124, "maxim": [124, 127], "inner": [124, 129, 624, 637, 639, 646, 649, 770, 771, 772, 773], "third": [124, 144, 624, 673, 675, 814, 815], "addition": [124, 125], "leverag": 124, "equival": [124, 130, 132, 166, 167, 266, 320, 323, 421, 424, 425, 428, 456, 459, 624, 654, 656, 663, 665, 670, 672, 688, 690], "input_arrai": 124, "adress": 125, "revisit": [125, 132], "dedic": [125, 129, 131, 577, 609, 883, 884], "__div__": 125, "dicat": 125, "futher": 125, "absenc": 125, "pep": 125, "484": 125, "annot": 125, "brittl": 125, "intend": [125, 830, 855, 858], "freeli": 125, "inde": [125, 144], "flexibl": 125, "original_typ": 125, "cumbersom": 125, "sound": 126, "higher": [126, 127, 132, 144, 577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603], "overview": [126, 143], "handler": [126, 128, 132, 872], "fledg": [127, 128], "syntact": [127, 132], "clip_by_valu": [127, 132], "clamp": [127, 132], "behavior": [127, 144, 266, 452, 455, 456, 459, 814, 815, 816, 818], "fit": [127, 710, 736, 739], "construct": [127, 128, 131, 132, 710, 762, 765, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914], "num": [127, 166, 175, 176], "power_seq": 127, "okai": 127, "bound": 127, "resid": [127, 131], "edg": [127, 132, 710, 711, 714, 720, 723, 766, 769, 872], "larger": [127, 132, 185, 202, 710, 711, 714, 744, 747, 830, 851, 854, 859, 862], "ml_framework": [127, 132, 166, 167], "current_framework": [127, 132], "furthermor": 127, "concaten": [127, 130, 219, 245, 503, 530, 710, 716, 719, 872], "framework_handl": 127, "face": 127, "verbos": [127, 872, 917], "cprint": [127, 916], "framework_stack": 127, "_determine_framework_from_arg": 127, "valueerror": [127, 710, 750, 753], "get_framework": 127, "neither": [127, 266, 279, 282, 435, 438], "illustr": [127, 143], "un": [127, 185, 206], "nn": [127, 132, 166, 177, 872], "init_h": [127, 611, 621], "init_c": [127, 611, 621], "kernel": [127, 144, 611, 621], "recurrent_kernel": [127, 611, 621], "bia": [127, 131, 611, 620, 621, 891, 892, 893, 894, 895, 896, 897, 898, 901], "recurrent_bia": [127, 611, 621], "x_shape": 127, "batch_shap": [127, 129, 132, 503, 556, 611, 621, 622, 623, 624, 691, 693, 797, 798, 891, 900], "timestep": [127, 611, 621, 891, 900], "input_channel": [127, 131, 891, 892, 893, 894, 895, 896, 897, 900, 901], "x_flat": 127, "wi": 127, "wi_x": 127, "wii_x": 127, "wif_x": 127, "wig_x": 127, "wio_x": 127, "recurr": [127, 611, 621], "wh": 127, "lstm": [127, 611, 621, 891], "ht": 127, "ct": 127, "hts_list": 127, "unrol": [127, 130, 611, 621], "wii_xt": 127, "wif_xt": 127, "wig_xt": 127, "wio_xt": 127, "zip": 127, "htm1": 127, "ctm1": 127, "wh_htm1": 127, "whi_htm1": 127, "whf_htm1": 127, "whg_htm1": 127, "who_htm1": 127, "ft": 127, "gt": 127, "ot": 127, "offici": 127, "reliabl": 127, "sacrific": 127, "hear": 127, "virtu": 127, "pure_ivi": 127, "reduce_mean": [127, 130, 131, 132, 872], "reduce_sum": [127, 872], "reduce_var": 127, "compile_graph": [127, 132], "pure_torch": 127, "cat": [127, 132], "backbon": [127, 130], "_layer": 127, "super": [127, 130, 131, 132], "clean": [127, 128, 130], "random_unifrom": 127, "unclean": 127, "wx": 127, "temp": 127, "torchscript": 127, "fn": [127, 129, 145, 146, 147, 148, 149, 150, 151, 152, 153, 185, 203, 204, 219, 226, 227, 503, 509, 574, 774, 775, 780, 781, 782, 784, 785, 786, 875, 877], "example_input": [127, 163, 164], "static_argnum": [127, 163, 164], "static_argnam": [127, 163, 164], "jit": [127, 144], "frontend": 128, "primit": [128, 144], "describ": [128, 132, 830, 831, 834, 847, 850, 851, 854, 855, 858], "hierarch": [128, 130, 131], "straight": [129, 872], "arraywithlinalg": 129, "arraywithlog": 129, "arraywithmath": 129, "arraywithmeta": 129, "arraywithreduct": 129, "is_native_arrai": [129, 503], "_shape": 129, "_size": 129, "functool": 129, "mul": 129, "len": [129, 132, 166, 177], "_dtype": 129, "_devic": 129, "_dev_str": 129, "_pre_repr": 129, "_post_repr": 129, "ndim": [129, 624, 666, 668, 673, 675], "mt": 129, "answer": [129, 144], "consol": 129, "typeerror": 129, "immut": 129, "behav": 129, "claim": 129, "truli": 129, "_native_wrapp": 129, "attributeerror": 129, "genuin": 129, "some_method": 129, "similarli": [129, 166, 177], "rewritten": 129, "__pow__": 129, "strang": 129, "power": [129, 130, 131, 266, 320, 323, 353, 356, 452, 455, 503, 538, 561, 568, 624, 653, 885], "enforc": 129, "notic": 129, "appear": [129, 710, 724, 727], "invers": [129, 143, 266, 271, 274, 275, 278, 284, 287, 288, 291, 292, 295, 296, 299, 300, 303, 624, 643, 645, 663, 665], "_wrap_method": 129, "func_wrapp": [129, 145, 146, 147, 148, 149, 150, 151, 152, 153], "__name__": 129, "non_wrapped_method": 129, "_method_wrap": 129, "native_arg": 129, "native_kwarg": 129, "inner_fn": 129, "whist": 129, "unwrap": 129, "transit": 129, "needlessli": 129, "randn": 129, "_unwrap_method": 129, "method_wrap": 129, "compartment": 129, "public": [129, 503, 519], "newshap": 129, "new_shap": 129, "tidi": 129, "shorter": 129, "crystal": 129, "41": [129, 266, 324, 327, 476, 479, 624, 625, 627, 830, 855, 858], "enough": [129, 130, 131], "ton": 130, "ado": [130, 131], "incredibli": [130, 144], "hash": 130, "soup": 130, "walk": [130, 131], "dct": 130, "cnt": 130, "combo": [130, 872, 878], "hold": [130, 503, 559, 560], "1000": [130, 266, 476, 479], "uda": 130, "3333": 130, "6667": 130, "178": 130, "new_weight": 130, "0600": 130, "3100": 130, "2400": 130, "6900": 130, "delimit": 130, "autocomplet": 130, "midwai": 130, "agent": 130, "total_spe": 130, "total_height": 130, "total_width": 130, "ag": 130, "tot": 130, "total_": 130, "total_h": 130, "batch_siz": [130, 611, 612, 613, 614, 615, 616, 617, 618, 797, 798], "dir": 130, "adam": [130, 131, 132, 577, 578, 581, 583, 585, 593, 595, 872, 907, 909], "cnt0": 130, "cnt1": 130, "diff_0": 130, "diff_1": 130, "config0": 130, "config1": 130, "Not": [130, 131, 144, 165], "decod": 130, "l0": 130, "l1": [130, 624, 688, 690], "depth": [130, 131, 132, 143, 219, 240, 244, 248, 503, 541, 556, 774, 786, 903, 904], "clearer": 130, "truncat": 130, "decoder__l0": 130, "decoder__l1": 130, "encoder__l0": 130, "encoder__l1": 130, "height": 130, "l0__b": 130, "l0__w": 130, "l1__b": 130, "l1__w": 130, "printabl": 130, "obviou": 130, "foresight": 130, "untidili": 130, "update_ag": 130, "normalize_img": 130, "img": 130, "img_max": 130, "reduce_max": [130, 872], "img_min": 130, "reduce_min": [130, 872], "img_rang": 130, "agent_posit": 130, "agent_veloc": 130, "agent_cam_front_rgb": 130, "agent_cam_front_depth": 130, "agent_cam_rear_rgb": 130, "agent_cam_rear_depth": 130, "agent_cam_lidar": 130, "normal": [130, 710, 754, 757, 792, 793, 796, 797, 802, 905, 906], "cleaner": 130, "camera": 130, "front_rgb": 130, "front_depth": 130, "rear_rgb": 130, "rear_depth": 130, "lidar": 130, "rgb": 130, "rear": 130, "veloc": 130, "cam": 130, "cam_max": 130, "cam_min": 130, "cam_rang": 130, "Of": 130, "ideal": 130, "perman": 130, "afterward": 130, "thread": 130, "incorpor": 130, "pretti": 130, "straightforward": 130, "dataload": [130, 142, 872], "_cnt": 130, "img_": 130, "_dataset_s": 130, "_batch_siz": 130, "_count": [130, 131], "__next__": 130, "filenam": 130, "img_fnam": 130, "fname": 130, "loaded_img": 130, "cv2": 130, "imread": 130, "loader": [130, 144], "batch_slic": 130, "model": [130, 131, 872], "mymodel": [130, 872], "linear0": [130, 131, 872], "linear1": [130, 131, 872], "x_in": [130, 131, 132, 872], "001": [130, 131, 577, 578, 581, 792, 793, 796], "loss_fn": [130, 131, 132, 872], "0145": 130, "grad_fn": 130, "addbackward0": 130, "_create_vari": 131, "output_channel": [131, 891, 892, 893, 894, 895, 896, 897, 900, 901], "with_bia": [131, 891, 901], "_input_channel": 131, "_output_channel": 131, "_w_shape": 131, "_b_shape": 131, "_with_bia": 131, "8979": 131, "3198": 131, "0196": 131, "3126": 131, "3717": 131, "9687": 131, "6958": 131, "5122": 131, "3902": 131, "8800": 131, "5613": 131, "1982": 131, "nightmar": 131, "overcom": 131, "fc": 131, "9563": 131, "impact": 131, "v0": 131, "v1": 131, "6440": 131, "key0": 131, "1823": 131, "8075": 131, "linear3": 131, "v2": 131, "2346": 131, "counter": 131, "hidden": [131, 611, 621, 891, 900], "fed": [131, 219, 260], "1300": 131, "decoupl": 131, "scheme": 131, "weight_initi": [131, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901], "glorotuniform": [131, 885, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901], "bias_initi": [131, 891, 892, 893, 894, 895, 896, 897, 898, 901], "_w_init": 131, "_b_init": 131, "create_vari": [131, 885], "var_shap": [131, 885], "fan_out": [131, 885], "fan_in": [131, 885], "fan_mod": [131, 885], "fan_sum": 131, "slight": 131, "misnom": 131, "saw": 131, "vanilla": [131, 770, 772], "descent": [131, 577, 588, 590, 907, 912], "lar": [131, 577, 593, 595, 597, 599, 907], "lamb": [131, 577, 593, 595, 907], "compile_on_next_step": [131, 903, 904, 907, 908, 909, 910, 911, 912], "_beta1": 131, "_beta2": 131, "_epsilon": 131, "_mw": 131, "_vw": 131, "_first_pass": 131, "_should_compil": 131, "_step": [131, 907, 911], "new_v": 131, "_lr": 131, "isinst": [131, 132, 503, 571], "_inplac": 131, "_stop_gradi": 131, "set_stat": [131, 907, 908, 909, 910, 911, 912], "pre": [132, 144, 219], "captur": 132, "sparse_funct": 132, "num_class": [132, 797, 798], "num_dim": 132, "new_axi": 132, "_linear": 132, "to_backend": 132, "jax_graph": 132, "learnabl": [132, 792, 793, 796, 905, 906], "to_ivy_modul": [132, 883], "thinli": 132, "whilst": 132, "to_haiku_modul": 132, "hk": 132, "loss_fn_t": 132, "transform": [132, 143, 611, 619, 620], "without_apply_rng": 132, "rng": 132, "prngkei": 132, "init": 132, "update_rul": 132, "01": [132, 266, 460, 463], "tree_multimap": 132, "mechan": [142, 144, 872], "vision": [142, 872], "robot": [142, 872], "focus": 143, "field": [143, 624, 637, 639, 666, 668, 673, 675, 814, 815, 816], "perfect": 143, "3d": [143, 891, 896, 897], "differenti": 143, "demo": [143, 872], "orient": 143, "pose": 143, "euler": [143, 165], "quaternion": 143, "rotat": 143, "matric": [143, 166, 177, 181, 182, 611, 620, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 653, 654, 656, 657, 659, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684], "angl": [143, 266, 296, 299, 336, 339, 472, 475, 494, 498], "ivy_mech": 143, "target_facing_rotation_matrix": 143, "polar_to_cartesian_coord": 143, "ordin": [143, 624, 670, 672], "warp": 143, "optic": 143, "voxel": 143, "ivy_vis": 143, "coords_to_voxel_grid": 143, "render_pixel_coord": 143, "neural": [143, 611, 872, 880, 891], "radianc": 143, "nerf": 143, "trajectori": 143, "motion": 143, "plan": [143, 872], "mobil": 143, "ivy_robot": 143, "sample_spline_path": 143, "rigidmobil": 143, "sample_bodi": 143, "drone": 143, "sample_link": 143, "openai": 143, "swimmer": 143, "cumul": [143, 503, 521, 522], "reward": 143, "supervis": 143, "reinforc": 143, "door": [143, 144], "intersect": 143, "cartpol": 143, "mountain_car": 143, "pendulum": 143, "reacher": 143, "polici": 143, "condit": [143, 163, 164, 774, 784, 785, 809, 813], "learnt": 143, "ture": 143, "ntm": 143, "egospher": 143, "spatial": 143, "esm": 143, "ivy_memori": 143, "egocentr": 143, "room": 143, "inspir": 143, "doubt": 144, "grate": 144, "put": 144, "probe": 144, "undergo": 144, "remark": 144, "surpris": 144, "backward": [144, 266, 456, 459, 624, 685, 687, 863, 864, 867, 868, 871], "lock": 144, "contunu": 144, "minor": 144, "xla": 144, "buffer": 144, "kind": [144, 185, 202, 205, 266, 452, 455, 830, 847, 850, 855, 858], "gold": 144, "dex": 144, "phase": 144, "lax": 144, "scan": 144, "tricki": 144, "predictor": 144, "tight": 144, "driver": 144, "schedul": 144, "algorithm": [144, 611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "dispatch": 144, "Will": 144, "ast": 144, "dynamic": 144, "cond": 144, "jacobian": 144, "checkpoint": 144, "autodiff": 144, "shine": 144, "merci": 144, "superset": 144, "cluster": 144, "compet": 144, "paradigm": 144, "parallelis": [144, 219, 226, 227], "spmd": 144, "mixtur": [144, 577, 578, 581], "expert": 144, "sophist": 144, "depart": 144, "routin": 144, "hundr": 144, "thousand": 144, "deepli": [144, 774, 776], "broadli": 144, "heavili": 144, "supplementari": 144, "reusabl": 144, "fanci": 144, "fusion": 144, "lose": 144, "vmap": 144, "pmap": 144, "overhead": 144, "possibli": [144, 503, 571], "ineffici": 144, "eventu": 144, "supplement": 144, "backdoor": 144, "callback": 144, "record": 144, "metric": 144, "somewhat": 144, "outsourc": 144, "inputs_to_ivy_arrai": 145, "gaussian": [155, 156], "leaki": [155, 156, 157], "alpha": [155, 157], "rectifi": [155, 157, 158], "slope": [155, 157], "39": [155, 157, 266, 353, 356, 577, 578, 581, 624, 660, 662, 830, 831, 834], "85": [155, 157, 266, 324, 327], "48": [155, 157, 266, 476, 479, 577, 578, 581, 624, 660, 662, 830, 831, 834], "88": [155, 157, 266, 324, 327, 624, 660, 662, 830, 831, 834], "269": [155, 159], "731": [155, 159], "881": [155, 159], "214": [155, 159], "978": [155, 159], "891": [155, 159], "422": [155, 160], "155": [155, 160], "0768": [155, 160], "231": [155, 160], "693": [155, 160, 694, 705, 708], "49": [155, 160, 266, 476, 479, 830, 831, 834], "147": [155, 160], "363": [155, 160], "3461": [155, 161], "6491": [155, 161], "535": [155, 161], "hyperbol": [155, 162, 266, 275, 278, 288, 291, 300, 303, 336, 339, 472, 475, 494, 498], "55": [155, 162, 611, 617, 624, 660, 662, 830, 831, 834], "501": [155, 162], "faster": [163, 164], "invoc": [163, 164], "718281828459045": 165, "newaxi": 165, "alia": 165, "pi": 165, "141592653589793": 165, "mathemat": [165, 266, 279, 282, 296, 299, 357, 360, 435, 438, 624, 688, 690], "half": [166, 167, 797, 799, 800, 803, 805], "chosen": [166, 167, 266, 296, 299, 809, 813], "distanc": [166, 167], "adjac": [166, 167], "interpret": [166, 168, 178], "uniniti": [166, 169, 170], "n_row": [166, 171], "n_col": [166, 171], "elsewher": [166, 171, 809, 813], "row": [166, 171, 624, 670, 672, 673, 675, 797, 798, 809, 812], "column": [166, 171, 624, 637, 639, 666, 668, 670, 672, 673, 675], "__dlpack__": [166, 172, 219, 261], "interchang": [166, 172, 710, 758, 761], "endpoint": [166, 175], "xy": [166, 177], "coordin": [166, 177, 266, 296, 299], "cartesian": [166, 177], "ij": [166, 177, 830, 831, 834], "rank": [166, 177, 503, 575, 624, 628, 630, 654, 656, 666, 668, 670, 672, 682, 684, 685, 687, 688, 690, 710, 720, 723, 724, 727, 754, 757, 766, 769, 809, 812, 863, 864, 867, 868, 871], "ni": [166, 177], "xi": [166, 177], "n1": [166, 177], "n2": [166, 177], "n3": [166, 177], "accordingli": [166, 177, 266, 357, 360, 624, 688, 690, 809, 811, 814, 815, 816, 818, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "xv": [166, 177], "yv": [166, 177], "triangular": [166, 181, 182, 624, 625, 627, 666, 668], "innermost": [166, 181, 182, 624, 625, 627, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 654, 656, 657, 659, 663, 665, 666, 668, 670, 672, 673, 675, 676, 678, 682, 684], "mxn": [166, 181, 182, 624, 634, 636, 654, 656, 657, 659, 663, 665, 666, 668, 676, 678, 682, 684], "defaultdtyp": 185, "defaultfloatdtyp": 185, "float_dtyp": [185, 198, 212], "defaultintdtyp": 185, "dtype_in": [185, 186, 187, 201, 206, 207, 208, 218], "incompat": [185, 190], "occur": [185, 191, 194, 809, 810, 811, 814, 815, 816, 818], "data_type_funct": [185, 191, 194], "closest": [185, 196, 266, 328, 331, 361, 364, 365, 368, 460, 463, 499, 502], "floatdtyp": [185, 198], "int_dtyp": [185, 199, 213], "intdtyp": [185, 199], "followng": [185, 202], "occupi": [185, 202, 205, 503, 559, 560], "ep": [185, 202, 624, 654, 656, 663, 665], "smallest_norm": [185, 202], "precis": [185, 202, 266, 435, 438, 476, 479], "encapsul": [185, 205], "type1": [185, 209], "type2": [185, 209], "arrays_and_dtyp": [185, 210], "ret1": [185, 214], "ret2": [185, 214], "array_method": [191, 192, 267, 268, 271, 272, 275, 276, 279, 280, 284, 285, 288, 289, 292, 293, 296, 297, 300, 301, 304, 305, 308, 309, 312, 313, 316, 317, 320, 321, 324, 325, 328, 329, 332, 333, 336, 337, 340, 341, 345, 346, 349, 350, 353, 354, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 435, 436, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 486, 489, 491, 494, 496, 499, 500, 504, 505, 532, 533, 578, 579, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 650, 651, 654, 655, 657, 658, 660, 661, 663, 664, 666, 667, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 700, 701, 705, 706, 711, 712, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 740, 741, 744, 745, 750, 751, 754, 755, 758, 759, 762, 763, 766, 767, 793, 794, 820, 821, 825, 826, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 864, 865, 868, 869], "container_method": [191, 193, 195, 267, 269, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 435, 437, 439, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 485, 487, 489, 490, 492, 494, 495, 497, 499, 501, 504, 506, 508, 516, 517, 532, 534, 536, 578, 580, 582, 583, 584, 586, 588, 589, 591, 593, 594, 596, 597, 598, 600, 601, 602, 604, 646, 648, 695, 697, 699, 700, 702, 704, 705, 707, 709, 711, 713, 715, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 793, 795, 799, 801, 803, 804, 806, 820, 822, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 866, 868, 870], "defaultdevic": 219, "__enter__": 219, "_dev": 219, "initialis": 219, "devcloneditem": [219, 238], "multidevitem": [219, 220, 223], "devclonedit": 219, "multidevit": [219, 221, 224, 226, 227, 230], "devclonednest": 219, "multidevnest": [219, 222, 225], "devdistitem": 219, "devdistit": 219, "devdistnest": 219, "devmanag": 219, "dev_mapp": 219, "da_dim_s": 219, "safety_factor": 219, "min_dev_dim_s": 219, "max_dev_dim_step_ratio": 219, "min_unit_dev_tune_step": 219, "min_sf_tune_step": 219, "starting_split_factor": 219, "max_split_factor_step_s": 219, "tune_dev_alloc": 219, "tune_dev_split": 219, "mapper": [219, 226, 227], "receivess": 219, "ratio": [219, 577, 593, 595, 907, 909], "safe": [219, 226], "oom": 219, "tune": 219, "da_tune_step": 219, "ds_tune_step": 219, "to_clon": 219, "to_distribut": 219, "multidevic": [219, 226], "parallel": [219, 226, 227], "mutlidevic": [219, 226], "repeated_config_check": 219, "tune_step": 219, "devmapp": [219, 227], "ret_fn": [219, 226, 227], "queue_class": [219, 226, 227], "worker_class": [219, 226, 227], "worker": [219, 226, 227], "used_dev": [219, 226], "sf": [219, 226], "devmappermultiproc": 219, "multidev": [219, 228, 229, 248], "profil": 219, "save_dir": [219, 231], "deviceic": [219, 237], "spread": [219, 248], "139740789224448": [219, 250], "physic": [219, 252], "x3": [219, 254], "x4": [219, 254], "process_specif": [219, 255, 265], "percentag": [219, 255], "ram": [219, 255, 262, 265], "alon": [219, 255, 265], "attr_onli": [219, 256], "chunk": [219, 258, 259, 260], "max_chunk_s": [219, 260], "chunk_siz": [219, 260], "input_ax": [219, 260], "output_ax": [219, 260], "feed": [219, 260], "fist": [219, 260], "stream": [219, 261], "caveat": [219, 261], "portabl": [219, 261, 872], "gb": [219, 262, 265], "reset": [219, 264], "magnitud": [266, 267, 270, 279, 282, 435, 438, 624, 673, 675, 676, 678], "princip": [266, 271, 274, 284, 287, 292, 295], "cosin": [266, 271, 274, 275, 278, 332, 335, 336, 339], "x1_i": [266, 279, 282, 296, 299, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 345, 348, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 484, 488], "x2_i": [266, 279, 282, 296, 299, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 340, 343, 345, 348, 365, 368, 369, 372, 373, 376, 389, 392, 393, 396, 413, 416, 417, 420, 425, 428, 429, 432, 435, 438, 444, 447, 452, 455, 456, 459, 484, 488], "finit": [266, 279, 282, 296, 299, 377, 380, 435, 438, 452, 455, 456, 459], "nor": [266, 279, 282, 435, 438], "nearest": [266, 279, 282, 435, 438, 460, 463], "2019": [266, 279, 282, 357, 360, 435, 438], "commut": [266, 279, 282], "sine": [266, 284, 287, 288, 291, 468, 471, 472, 475], "57": [266, 284, 287, 324, 327, 336, 339], "524": [266, 284, 287], "644": [266, 284, 287], "201": [266, 284, 287, 460, 463], "305": [266, 284, 287], "412": [266, 284, 287], "quotient": [266, 296, 299], "notat": [266, 296, 299, 830, 831, 834], "denot": [266, 296, 299], "pair": [266, 296, 299, 611, 623, 624, 628, 630], "quadrant": [266, 296, 299], "3\u03c0": [266, 296, 299], "549": [266, 300, 303], "bitwis": [266, 304, 307, 316, 319, 324, 327, 429, 432], "AND": [266, 304, 307, 417, 420, 863, 864, 867], "binari": [266, 304, 307, 316, 319, 324, 327, 429, 432, 694, 695, 698], "invert": [266, 308, 311], "arithmet": [266, 320, 323, 830, 839, 842], "propag": [266, 320, 323, 830, 835, 838, 839, 842, 843, 846, 851, 854, 855, 858, 859, 862], "thu": [266, 320, 323, 452, 455, 456, 459, 624, 637, 639], "lh": [266, 320, 323], "rh": [266, 320, 323], "xor": [266, 324, 327, 429, 432], "78": [266, 324, 327, 624, 660, 662, 830, 831, 834], "91": [266, 324, 327, 624, 660, 662, 830, 831, 834], "23": [266, 324, 327, 611, 617, 624, 634, 636, 809, 813], "66": [266, 324, 327, 624, 660, 662, 830, 831, 834], "77": [266, 324, 327, 624, 660, 662, 830, 831, 834], "79": [266, 324, 327], "89": [266, 324, 327, 624, 679, 681, 830, 855, 858], "98": [266, 324, 327, 624, 660, 662, 809, 813, 830, 831, 834], "26": [266, 324, 327, 577, 578, 581, 611, 618, 624, 634, 636, 660, 662, 679, 681, 830, 831, 834], "21": [266, 324, 327, 503, 521, 624, 634, 636, 660, 662, 694, 705, 708, 830, 831, 834], "34": [266, 324, 327, 476, 479], "24": [266, 324, 327, 476, 479, 503, 521, 577, 578, 581, 624, 634, 636, 660, 662, 830, 831, 834], "51": [266, 324, 327], "27": [266, 324, 327, 336, 339, 476, 479, 611, 623, 624, 660, 662, 830, 831, 834], "74": [266, 324, 327], "59": [266, 324, 327], "416": [266, 332, 335], "122": [266, 336, 339], "368": [266, 336, 339], "670": [266, 336, 339], "202": [266, 336, 339, 460, 463], "548": [266, 336, 339], "1490": [266, 336, 339], "dividend": [266, 340, 343, 456, 459], "divisor": [266, 340, 343, 456, 459, 577, 578, 581, 583, 585, 593, 595, 830, 851, 854, 859, 862, 907, 908, 909], "gauss": [266, 349, 352], "exponenti": [266, 349, 352, 353, 356, 413, 416, 452, 455], "logarithm": [266, 353, 356, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 624, 669], "72": [266, 353, 356, 577, 578, 581, 624, 660, 662, 830, 831, 834], "accur": [266, 357, 360], "fdlibm": [266, 357, 360], "compliant": [266, 357, 360, 421, 424, 425, 428, 830, 835, 838, 839, 842, 843, 846], "greatest": [266, 361, 364, 365, 368], "out_i": [266, 377, 380, 381, 384, 385, 388], "threshold": [266, 433, 434], "exce": [266, 434], "y_i": [266, 440, 443], "expon": [266, 452, 455, 503, 568], "versu": [266, 452, 455], "odd": [266, 452, 455], "modulu": [266, 456, 459], "primarili": [266, 456, 459], "5654": [266, 460, 463], "034": [266, 460, 463], "433": [266, 460, 463], "343": [266, 460, 463], "44": [266, 460, 463, 476, 479, 480, 483, 624, 660, 662, 809, 813, 830, 831, 834], "30": [266, 460, 463, 624, 660, 662, 830, 831, 834, 885, 889], "81": [266, 460, 463, 480, 483, 830, 831, 834], "527": [266, 460, 463], "301": [266, 460, 463], "indistinguish": [266, 476, 479], "infinit": [266, 476, 479], "83": [266, 476, 479], "32455532": [266, 476, 479], "89897949": [266, 476, 479], "50": [266, 476, 479, 624, 660, 662, 809, 812, 830, 831, 834], "31": [266, 476, 479], "169": [266, 476, 479], "47": [266, 476, 479], "73": [266, 476, 479, 624, 625, 627, 792, 793, 796], "93": [266, 476, 479], "35": [266, 476, 479, 611, 623, 624, 628, 630, 809, 813, 830, 831, 834], "09": [266, 480, 483, 611, 623], "61": [266, 480, 483, 694, 695, 698], "546": [266, 489, 493], "842": [266, 489, 493], "916": [266, 489, 493, 694, 695, 698], "996": [266, 489, 493], "328": [266, 489, 493], "real": [266, 494, 498], "462": [266, 494, 498], "604": [266, 494, 498], "984": [266, 494, 498], "997": [266, 494, 498, 792, 793, 796], "decim": [266, 499, 502], "inspect": [503, 509, 876, 877], "downscal": [503, 515, 516, 518], "60": [503, 521, 624, 660, 662, 830, 831, 834], "default_v": [503, 524], "catch_except": [503, 524], "rev": [503, 524], "with_cal": [503, 524], "arrang": [503, 525], "123": [503, 528], "mod": [503, 529], "max_freq": [503, 530], "num_band": [503, 530], "pad": [503, 530, 611, 612, 613, 614, 615, 616, 617, 618, 710, 720, 723, 766, 769, 891, 892, 893, 894, 895, 896, 897, 898], "fourier": [503, 530], "band": [503, 530], "linearli": [503, 530, 624, 670, 672], "oppos": [503, 530], "geometr": [503, 530], "seen_set": [503, 541], "local_set": [503, 541], "decrement": [503, 545], "is_arrai": 503, "allow_dupl": [503, 553], "forkserv": [503, 554], "spawn": [503, 554], "hot": [503, 556], "scatter": [503, 556, 559, 560], "overrid": [503, 556], "tmp_dr": [503, 564], "temporari": [503, 564], "min_denomin": [503, 567], "stabil": [503, 567, 568, 819, 820, 823, 825, 828], "_min_denomin": [503, 567], "min_bas": [503, 568], "_min_bas": [503, 568, 792, 793, 796, 905, 906], "100000023841858": [503, 571], "200000047683716": [503, 571], "299999952316284": [503, 571], "400000095367432": [503, 571], "599999904632568": [503, 571], "101": [503, 572], "unpack": [503, 575], "gradienttrack": 577, "delta": [577, 578, 581], "cost": [577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 770, 771, 772, 773], "en": [577, 578, 581, 583, 585], "wikipedia": [577, 578, 581, 583, 585], "wiki": [577, 578, 581, 583, 585], "stochastic_gradient_desc": [577, 578, 581, 583, 585], "dc": [577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603], "dw": [577, 578, 581, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603], "averag": [577, 578, 581, 583, 585, 593, 595, 770, 771, 772], "forget": [577, 578, 581, 583, 585, 593, 595, 907, 908, 909], "004": [577, 578, 581], "009": [577, 578, 581], "86": [577, 578, 581], "28": [577, 578, 581, 611, 614, 617, 618, 624, 660, 662, 830, 831, 834], "45": [577, 578, 581, 624, 660, 662, 710, 749, 792, 793, 796, 830, 831, 834], "0125": [577, 578, 581], "601": [577, 578, 581], "581": [577, 578, 581], "025": [577, 578, 581], "992": [577, 578, 581], "209": [577, 578, 581, 814, 815], "271": [577, 578, 581], "0717": [577, 578, 581], "142": [577, 578, 581], "182": [577, 578, 581], "624": [577, 578, 581, 797, 803, 805], "06": [577, 578, 581], "02": [577, 578, 581], "744": [577, 578, 581], "626": [577, 578, 581], "65": [577, 578, 581, 624, 660, 662, 830, 831, 834], "024": [577, 578, 581], "096": [577, 578, 581], "216": [577, 578, 581], "384": [577, 578, 581], "rate": [577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 770, 771, 772, 773, 891, 902, 907, 908, 909, 910, 911, 912], "ws_new": [577, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603], "retain": [577, 587], "trust": [577, 593, 595, 907, 909], "decai": [577, 593, 595, 597, 599, 907, 909, 910], "layerwis": [577, 597, 599, 907, 910], "stride": [611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "data_format": [611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "nwc": [611, 612, 613, 891, 892, 893], "dilat": [611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "convolut": [611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "d_in": [611, 612, 613, 614, 615, 616, 617], "fw": [611, 612, 613, 614, 615, 616, 617, 618], "d_out": [611, 612, 613, 614, 615, 616, 617], "slide": [611, 612, 613, 614, 615, 616, 617, 618, 891, 892, 893, 894, 895, 896, 897, 898], "ncw": [611, 612, 613, 891, 892, 893], "wio": [611, 612], "output_shap": [611, 613, 615, 617, 891, 893, 895, 897], "nhwc": [611, 614, 615, 618, 891, 894, 895, 898], "fh": [611, 614, 615, 616, 617, 618], "nchw": [611, 614, 615, 618, 891, 894, 895, 898], "hwio": [611, 614], "unequ": [611, 614], "unsqueez": [611, 614, 618], "ndhwc": [611, 616, 617, 891, 896, 897], "volum": [611, 616], "fd": [611, 616, 617], "ncdhw": [611, 616, 617, 891, 896, 897], "dhwio": [611, 616], "256": [611, 617], "258": [611, 617], "128": [611, 617, 624, 660, 662], "depthwis": [611, 618, 891, 898], "333": [611, 618], "inp": [611, 618], "prob": [611, 619, 797, 798, 891, 899], "randomli": [611, 619, 891, 899], "bernoulli": [611, 619], "out_featur": [611, 619, 620], "incom": [611, 620], "outer_batch_shap": [611, 620], "inner_batch_shap": [611, 620], "in_featur": [611, 620], "cell": [611, 621, 891, 900], "num_queri": [611, 622, 623], "x_feat_dim": [611, 622], "num_kei": [611, 622, 623], "cont_feat_dim": [611, 622], "numhead": [611, 622], "feat_dim": [611, 622, 623], "out_feat_dim": [611, 622], "score": [611, 623], "04": [611, 623], "03": [611, 623, 792, 793, 796], "08": [611, 623], "decomposit": [624, 625, 627, 666, 668, 673, 675], "symmetr": [624, 625, 627, 637, 639, 640, 642, 691, 693], "577": [624, 625, 627], "707": [624, 625, 627], "vif": [624, 628, 630], "92": [624, 631, 633], "293": [624, 631, 633], "46997": [624, 631, 633], "eigendecomposit": [624, 637, 639], "qlq\u1d40": [624, 637, 639], "orthogon": [624, 637, 639], "eig": [624, 637, 639], "eigenvalu": [624, 637, 639, 640, 642], "eigenvector": [624, 637, 639], "75": [624, 643, 645, 660, 662], "prepend": [624, 646, 649], "singular": [624, 654, 656, 663, 665, 673, 675, 676, 678], "toler": [624, 654, 656, 663, 665], "largest_singular_valu": [624, 654, 656, 663, 665], "array_lik": [624, 660, 662], "33": [624, 660, 662, 792, 793, 796, 830, 831, 834], "36": [624, 660, 662, 830, 831, 834], "84": [624, 660, 662, 830, 831, 834], "105": [624, 660, 662, 694, 695, 698], "112": [624, 660, 662, 830, 831, 834], "104": [624, 660, 662, 830, 831, 834], "120": [624, 660, 662], "moor": [624, 663, 665], "penros": [624, 663, 665], "pseudo": [624, 663, 665], "orthonorm": [624, 666, 668, 673, 675], "2d": [624, 669, 891, 894, 895, 898], "logdet": [624, 669], "coeffici": [624, 670, 672], "usvh": [624, 673, 675], "vh": [624, 673, 675], "hermitian": [624, 673, 675], "et": [624, 673, 675], "cetera": [624, 673, 675], "adjoint": [624, 673, 675], "reconstruct": [624, 673, 675, 814, 815, 817], "reconstructed_x": [624, 673, 675], "contract": [624, 679, 681, 830, 831, 834], "doubl": [624, 679, 681], "singleton": [624, 688, 690, 710, 750, 753, 809, 811, 830, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 867, 868, 871], "liter": [624, 688, 690], "manhattan": [624, 688, 690], "l2": [624, 688, 690], "euclidean": [624, 688, 690], "mathbf": [624, 691, 693], "mathbb": [624, 691, 693], "skew": [624, 691, 693], "entropi": [694, 695, 698, 700, 703, 705, 708], "predict": [694, 695, 698, 700, 703, 705, 708], "smooth": [694, 695, 698, 700, 703, 705, 708], "223": [694, 695, 698], "357": [694, 695, 698, 705, 708], "511": [694, 695, 698], "discret": [694, 700, 703], "3862944": [694, 700, 703], "35667497": [694, 700, 703], "spars": [694, 705, 708], "logit": [694, 705, 708], "793291": [694, 705, 708], "512926": [694, 705, 708], "before_1": [710, 720, 723, 766, 769], "after_1": [710, 720, 723, 766, 769], "before_n": [710, 720, 723, 766, 769], "after_n": [710, 720, 723, 766, 769], "insert": [710, 724, 727, 774, 779, 809, 810], "manipulation_funct": [710, 724, 727], "reorder": [710, 728, 731], "permut": [710, 732, 735, 758, 761], "repetit": [710, 736, 739, 762, 765], "restor": [710, 744, 747], "classivi": [710, 749], "famili": [710, 754, 757], "intxx": [710, 754, 757], "floatxx": [710, 754, 757], "fomaml_step": 770, "inner_cost_fn": [770, 771, 772], "outer_cost_fn": [770, 771, 772], "inner_grad_step": [770, 771, 772, 773], "inner_learning_r": [770, 771, 772, 773], "inner_optimization_step": [770, 771, 772, 773], "inner_batch_fn": [770, 771, 772], "outer_batch_fn": [770, 771, 772], "average_across_step": [770, 771, 772], "inner_v": [770, 771, 772], "keep_inner_v": [770, 771, 772], "outer_v": [770, 771, 772], "keep_outer_v": [770, 771, 772], "return_inner_v": [770, 771, 772, 773], "num_task": [770, 771, 772, 773], "maml": [770, 771, 772], "recev": [770, 771, 772], "0x7f13fdee7160": [770, 771, 772, 773], "maml_step": 770, "rece": [770, 772], "reptile_step": 770, "cost_fn": [770, 773], "reptil": [770, 773], "receivng": [770, 773], "all_nested_indic": 774, "include_nest": [774, 775], "_index": [774, 775, 785], "_base": [774, 775, 784, 785], "copy_nest": 774, "to_mut": [774, 776, 786], "mutabl": [774, 776, 786], "insert_into_nest_at_index": 774, "insert_into_nest_at_indic": 774, "map_nest_at_index": 774, "map_nest_at_indic": 774, "multi_index_nest": 774, "nested_ani": 774, "check_nest": [774, 784, 785], "conditon": [774, 784, 785], "nested_indices_wher": 774, "stop_after_n_found": [774, 785], "_depth": [774, 786], "_tuple_check_fn": [774, 786], "_list_check_fn": [774, 786], "_dict_check_fn": [774, 786], "nested_multi_map": 774, "nest0": [774, 787], "ivy_arrai": [774, 787], "funciton": [774, 787], "prune_nest_at_index": 774, "prune_nest_at_indic": 774, "set_nest_at_index": 774, "set_nest_at_indic": 774, "mini": [792, 793, 796, 905, 906], "gamma": [792, 793, 796], "beta": [792, 793, 796], "0976": [792, 793, 796], "3452": [792, 793, 796], "2740": [792, 793, 796], "1047": [792, 793, 796], "5886": [792, 793, 796], "2732": [792, 793, 796], "7696": [792, 793, 796], "7024": [792, 793, 796], "2518": [792, 793, 796], "58": [792, 793, 796, 814, 815], "283": [792, 793, 796], "585": [792, 793, 796], "909": [792, 793, 796], "628": [792, 793, 796], "225": [792, 793, 796], "425": [792, 793, 796], "norm_idx": [792, 793, 796], "228": [792, 793, 796], "0285": [792, 793, 796], "199": [792, 793, 796], "204": [792, 793, 796], "population_s": [797, 798], "num_sampl": [797, 798], "draw": [797, 798, 802, 803, 805], "unnorm": [797, 798], "drawn": [797, 798, 799, 800, 802, 803, 805], "home": [797, 798, 802], "uniformli": [797, 799, 800, 803, 805], "highest": [797, 799, 800], "parameter": [797, 802, 803, 805], "6444774682897879": [797, 802], "811": [797, 802], "508": [797, 802], "564": [797, 802], "7268672": [797, 802], "968": [797, 802], "175": [797, 802, 814, 815], "064": [797, 802], "40935726": [797, 802], "556": [797, 802], "26431865": [797, 803, 805], "475": [797, 803, 805], "878": [797, 803, 805], "861": [797, 803, 805], "89150229": [797, 803, 805], "89629126": [797, 803, 805], "94198485": [797, 803, 805], "91405606": [797, 803, 805], "72848724": [797, 803, 805], "7550739": [797, 803, 805], "00109": [797, 803, 805], "occurr": [809, 810, 811, 814, 815], "yield": [809, 813], "43": [809, 813], "x_j": [814, 815, 816, 818], "impli": [814, 815, 816, 818], "inverse_indic": [814, 815, 817], "aggreg": [814, 815], "fourth": [814, 815], "607": [814, 815], "735": [814, 815], "667": [814, 815], "381": [814, 815], "857": [814, 815], "0396": [814, 815], "166": [814, 815], "828": [814, 815], "144": [814, 815], "40501155": [814, 815], "77361575": [814, 815], "97776199": [814, 815], "36831157": [814, 815], "89148434": [814, 815], "9512272": [814, 815], "67542176": [814, 815], "41985657": [814, 815], "23478023": [814, 815], "1141": [814, 815], "8101": [814, 815], "9298": [814, 815], "8460": [814, 815], "2119": [814, 815], "3519": [814, 815], "6252": [814, 815], "4033": [814, 815], "7443": [814, 815], "2577": [814, 815], "3707": [814, 815], "0545": [814, 815], "3238": [814, 815], "5944": [814, 815], "0775": [814, 815], "4327": [814, 815], "176": [814, 815], "889": [814, 815], "763": [814, 815], "071": [814, 815], "262": [814, 815], "456": [814, 815], "114": [814, 815], "349": [814, 815], "615": [814, 815], "594": [814, 815], "335": [814, 815], "212": [814, 815], "457": [814, 815], "827": [814, 815], "ascend": [819, 820, 823], "einstein": [830, 831, 834], "summat": [830, 831, 834], "seq": [830, 831, 834], "jk": [830, 831, 834], "ik": [830, 831, 834], "126": [830, 831, 834], "510": [830, 831, 834], "99": [830, 831, 834], "108": [830, 831, 834], "117": [830, 831, 834], "sentinel": [830, 835, 838, 843, 846], "unsign": [830, 847, 850, 855, 858], "degre": [830, 851, 854, 859, 862], "bessel": [830, 851, 854, 859, 862], "8164966": [830, 851, 854], "varianc": [830, 859, 862], "unbias": [830, 859, 862], "simplicit": [863, 864, 867], "autom": 872, "grow": 872, "ai": 872, "got": 872, "colab": 872, "sharp": 872, "weekli": 872, "event": 872, "immedi": 872, "favorit": 872, "jax_concat": 872, "tf_concat": 872, "np_concat": 872, "mx_concat": 872, "torch_concat": 872, "prompt": 872, "get_devic": 872, "reduce_prod": 872, "gradient_imag": 872, "linalg": 872, "bilinear_resampl": 872, "stack_imag": 872, "neural_net": 872, "ecosystem": [872, 878], "popular": [872, 878], "acceler": 872, "articl": 872, "lenton2021ivi": 872, "inter": 872, "lenton": 872, "daniel": 872, "pardo": 872, "fabio": 872, "falck": 872, "fabian": 872, "jame": 872, "stephen": 872, "clark": 872, "ronald": 872, "journal": 872, "arxiv": 872, "preprint": 872, "2102": 872, "02886": 872, "2021": 872, "add_array_spec": 875, "fn_array_spec": 875, "geglu": 880, "native_modul": [883, 884], "native_module_class": [883, 884], "firstlayersiren": 885, "kaimingnorm": 885, "negative_slop": 885, "Ones": 885, "siren": 885, "w0": [885, 889], "filter_s": [891, 892, 893], "1d": [891, 892, 893], "conv1dtranspos": 891, "filter_shap": [891, 894, 895, 896, 897, 898], "conv2dtranspos": 891, "conv3dtranspos": 891, "depthwiseconv2d": 891, "num_channel": [891, 898], "bernoul": [891, 899], "num_lay": [891, 900], "return_sequ": [891, 900], "return_st": [891, 900], "get_initial_st": [891, 900], "dens": [891, 901], "multiheadattent": 891, "query_dim": [891, 902], "head_dim": [891, 902], "dropout_r": [891, 902], "context_dim": [891, 902], "with_to_q_fn": [891, 902], "with_to_kv_fn": [891, 902], "with_to_out_fn": [891, 902], "build_mod": [891, 902, 903, 904], "on_init": [891, 902, 903, 904], "__call__": [891, 902, 903, 904], "store_var": [903, 904], "arg_stateful_idx": [903, 904], "kwarg_stateful_idx": [903, 904], "fallback_to_non_compil": [903, 904, 907, 911], "with_partial_v": [903, 904], "initialz": [903, 904], "from_cal": [903, 904], "check_submod_ret": [903, 904], "get_mod_kei": [903, 904], "top_mod": [903, 904], "mod_depth": [903, 904], "mod_height": [903, 904], "mod_with_top_mod_key_chain": [903, 904], "save_weight": [903, 904], "weights_path": [903, 904], "show_mod_in_top_mod": [903, 904], "upper_depth": [903, 904], "lower_depth": [903, 904], "show_structur": [903, 904], "show_v_in_top_v": [903, 904], "sub_mod": [903, 904], "show_v": [903, 904], "track_submod_call_ord": [903, 904], "track_submod_ret": [903, 904], "v_with_top_v_key_chain": [903, 904], "layernorm": 905, "normalized_shap": [905, 906], "elementwise_affin": [905, 906], "trail": [905, 906], "affin": [905, 906], "0001": [907, 908, 909], "init_on_first_step": [907, 911], "ignore_miss": [907, 911], "overriden": [907, 911], "sgd": 907, "stochast": [907, 912], "sub_modul": [913, 914]}, "objects": {"ivy.array": [[21, 0, 0, "-", "activations"], [23, 0, 0, "-", "conversions"], [28, 0, 0, "-", "creation"], [30, 0, 0, "-", "data_type"], [32, 0, 0, "-", "device"], [34, 0, 0, "-", "elementwise"], [36, 0, 0, "-", "general"], [38, 0, 0, "-", "gradients"], [40, 0, 0, "-", "image"], [42, 0, 0, "-", "layers"], [44, 0, 0, "-", "linear_algebra"], [46, 0, 0, "-", "losses"], [48, 0, 0, "-", "manipulation"], [50, 0, 0, "-", "norms"], [52, 0, 0, "-", "random"], [54, 0, 0, "-", "searching"], [56, 0, 0, "-", "set"], [58, 0, 0, "-", "sorting"], [60, 0, 0, "-", "statistical"], [62, 0, 0, "-", "utility"], [64, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[22, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[268, 2, 1, "", "abs"], [272, 2, 1, "", "acos"], [276, 2, 1, "", "acosh"], [579, 2, 1, "", "adam_step"], [280, 2, 1, "", "add"], [865, 2, 1, "", "all"], [505, 2, 1, "", "all_equal"], [869, 2, 1, "", "any"], [821, 2, 1, "", "argsort"], [285, 2, 1, "", "asin"], [289, 2, 1, "", "asinh"], [293, 2, 1, "", "atan"], [297, 2, 1, "", "atan2"], [301, 2, 1, "", "atanh"], [696, 2, 1, "", "binary_cross_entropy"], [305, 2, 1, "", "bitwise_and"], [309, 2, 1, "", "bitwise_invert"], [313, 2, 1, "", "bitwise_left_shift"], [317, 2, 1, "", "bitwise_or"], [321, 2, 1, "", "bitwise_right_shift"], [325, 2, 1, "", "bitwise_xor"], [192, 2, 1, "", "can_cast"], [329, 2, 1, "", "ceil"], [626, 2, 1, "", "cholesky"], [712, 2, 1, "", "clip"], [717, 2, 1, "", "concat"], [721, 2, 1, "", "constant_pad"], [333, 2, 1, "", "cos"], [337, 2, 1, "", "cosh"], [629, 2, 1, "", "cross"], [701, 2, 1, "", "cross_entropy"], [632, 2, 1, "", "det"], [635, 2, 1, "", "diagonal"], [341, 2, 1, "", "divide"], [638, 2, 1, "", "eigh"], [641, 2, 1, "", "eigvalsh"], [832, 2, 1, "", "einsum"], [346, 2, 1, "", "equal"], [350, 2, 1, "", "erf"], [354, 2, 1, "", "exp"], [725, 2, 1, "", "expand_dims"], [358, 2, 1, "", "expm1"], [729, 2, 1, "", "flip"], [362, 2, 1, "", "floor"], [366, 2, 1, "", "floor_divide"], [533, 2, 1, "", "gather_nd"], [370, 2, 1, "", "greater"], [374, 2, 1, "", "greater_equal"], [644, 2, 1, "", "inv"], [378, 2, 1, "", "isfinite"], [382, 2, 1, "", "isinf"], [386, 2, 1, "", "isnan"], [794, 2, 1, "", "layer_norm"], [390, 2, 1, "", "less"], [394, 2, 1, "", "less_equal"], [398, 2, 1, "", "log"], [402, 2, 1, "", "log10"], [406, 2, 1, "", "log1p"], [410, 2, 1, "", "log2"], [414, 2, 1, "", "logaddexp"], [418, 2, 1, "", "logical_and"], [422, 2, 1, "", "logical_not"], [426, 2, 1, "", "logical_or"], [430, 2, 1, "", "logical_xor"], [647, 2, 1, "", "matmul"], [651, 2, 1, "", "matrix_norm"], [655, 2, 1, "", "matrix_rank"], [658, 2, 1, "", "matrix_transpose"], [836, 2, 1, "", "max"], [840, 2, 1, "", "mean"], [844, 2, 1, "", "min"], [436, 2, 1, "", "multiply"], [441, 2, 1, "", "negative"], [445, 2, 1, "", "not_equal"], [661, 2, 1, "", "outer"], [733, 2, 1, "", "permute_dims"], [664, 2, 1, "", "pinv"], [449, 2, 1, "", "positive"], [453, 2, 1, "", "pow"], [848, 2, 1, "", "prod"], [667, 2, 1, "", "qr"], [457, 2, 1, "", "remainder"], [737, 2, 1, "", "repeat"], [741, 2, 1, "", "reshape"], [745, 2, 1, "", "roll"], [461, 2, 1, "", "round"], [465, 2, 1, "", "sign"], [469, 2, 1, "", "sin"], [473, 2, 1, "", "sinh"], [671, 2, 1, "", "solve"], [826, 2, 1, "", "sort"], [706, 2, 1, "", "sparse_cross_entropy"], [477, 2, 1, "", "sqrt"], [481, 2, 1, "", "square"], [751, 2, 1, "", "squeeze"], [755, 2, 1, "", "stack"], [852, 2, 1, "", "std"], [486, 2, 1, "", "subtract"], [856, 2, 1, "", "sum"], [674, 2, 1, "", "svd"], [677, 2, 1, "", "svdvals"], [759, 2, 1, "", "swapaxes"], [491, 2, 1, "", "tan"], [496, 2, 1, "", "tanh"], [680, 2, 1, "", "tensordot"], [763, 2, 1, "", "tile"], [683, 2, 1, "", "trace"], [500, 2, 1, "", "trunc"], [860, 2, 1, "", "var"], [686, 2, 1, "", "vecdot"], [689, 2, 1, "", "vector_norm"], [692, 2, 1, "", "vector_to_skew_symmetric_matrix"], [767, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[24, 2, 1, "", "args_to_ivy"], [25, 2, 1, "", "args_to_native"], [26, 2, 1, "", "to_ivy"], [27, 2, 1, "", "to_native"]], "ivy.array.creation": [[29, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[31, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[31, 3, 1, "", "can_cast"]], "ivy.array.device": [[33, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[35, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[35, 3, 1, "", "abs"], [35, 3, 1, "", "acos"], [35, 3, 1, "", "acosh"], [35, 3, 1, "", "add"], [35, 3, 1, "", "asin"], [35, 3, 1, "", "asinh"], [35, 3, 1, "", "atan"], [35, 3, 1, "", "atan2"], [35, 3, 1, "", "atanh"], [35, 3, 1, "", "bitwise_and"], [35, 3, 1, "", "bitwise_invert"], [35, 3, 1, "", "bitwise_left_shift"], [35, 3, 1, "", "bitwise_or"], [35, 3, 1, "", "bitwise_right_shift"], [35, 3, 1, "", "bitwise_xor"], [35, 3, 1, "", "ceil"], [35, 3, 1, "", "cos"], [35, 3, 1, "", "cosh"], [35, 3, 1, "", "divide"], [35, 3, 1, "", "equal"], [35, 3, 1, "", "erf"], [35, 3, 1, "", "exp"], [35, 3, 1, "", "expm1"], [35, 3, 1, "", "floor"], [35, 3, 1, "", "floor_divide"], [35, 3, 1, "", "greater"], [35, 3, 1, "", "greater_equal"], [35, 3, 1, "", "isfinite"], [35, 3, 1, "", "isinf"], [35, 3, 1, "", "isnan"], [35, 3, 1, "", "less"], [35, 3, 1, "", "less_equal"], [35, 3, 1, "", "log"], [35, 3, 1, "", "log10"], [35, 3, 1, "", "log1p"], [35, 3, 1, "", "log2"], [35, 3, 1, "", "logaddexp"], [35, 3, 1, "", "logical_and"], [35, 3, 1, "", "logical_not"], [35, 3, 1, "", "logical_or"], [35, 3, 1, "", "logical_xor"], [35, 3, 1, "", "multiply"], [35, 3, 1, "", "negative"], [35, 3, 1, "", "not_equal"], [35, 3, 1, "", "positive"], [35, 3, 1, "", "pow"], [35, 3, 1, "", "remainder"], [35, 3, 1, "", "round"], [35, 3, 1, "", "sign"], [35, 3, 1, "", "sin"], [35, 3, 1, "", "sinh"], [35, 3, 1, "", "sqrt"], [35, 3, 1, "", "square"], [35, 3, 1, "", "subtract"], [35, 3, 1, "", "tan"], [35, 3, 1, "", "tanh"], [35, 3, 1, "", "trunc"]], "ivy.array.general": [[37, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[37, 3, 1, "", "all_equal"], [37, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[39, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[39, 3, 1, "", "adam_step"]], "ivy.array.image": [[41, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[43, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[45, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[45, 3, 1, "", "cholesky"], [45, 3, 1, "", "cross"], [45, 3, 1, "", "det"], [45, 3, 1, "", "diagonal"], [45, 3, 1, "", "eigh"], [45, 3, 1, "", "eigvalsh"], [45, 3, 1, "", "inv"], [45, 3, 1, "", "matmul"], [45, 3, 1, "", "matrix_norm"], [45, 3, 1, "", "matrix_rank"], [45, 3, 1, "", "matrix_transpose"], [45, 3, 1, "", "outer"], [45, 3, 1, "", "pinv"], [45, 3, 1, "", "qr"], [45, 3, 1, "", "solve"], [45, 3, 1, "", "svd"], [45, 3, 1, "", "svdvals"], [45, 3, 1, "", "tensordot"], [45, 3, 1, "", "trace"], [45, 3, 1, "", "vecdot"], [45, 3, 1, "", "vector_norm"], [45, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[47, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[47, 3, 1, "", "binary_cross_entropy"], [47, 3, 1, "", "cross_entropy"], [47, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[49, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[49, 3, 1, "", "clip"], [49, 3, 1, "", "concat"], [49, 3, 1, "", "constant_pad"], [49, 3, 1, "", "expand_dims"], [49, 3, 1, "", "flip"], [49, 3, 1, "", "permute_dims"], [49, 3, 1, "", "repeat"], [49, 3, 1, "", "reshape"], [49, 3, 1, "", "roll"], [49, 3, 1, "", "squeeze"], [49, 3, 1, "", "stack"], [49, 3, 1, "", "swapaxes"], [49, 3, 1, "", "tile"], [49, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[51, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[51, 3, 1, "", "layer_norm"]], "ivy.array.random": [[53, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[55, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[57, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[59, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[59, 3, 1, "", "argsort"], [59, 3, 1, "", "sort"]], "ivy.array.statistical": [[61, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[61, 3, 1, "", "einsum"], [61, 3, 1, "", "max"], [61, 3, 1, "", "mean"], [61, 3, 1, "", "min"], [61, 3, 1, "", "prod"], [61, 3, 1, "", "std"], [61, 3, 1, "", "sum"], [61, 3, 1, "", "var"]], "ivy.array.utility": [[63, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[63, 3, 1, "", "all"], [63, 3, 1, "", "any"]], "ivy.array.wrapping": [[65, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [145, 0, 0, "-", "func_wrapper"], [875, 0, 0, "-", "inspection"], [879, 0, 0, "-", "stateful"], [916, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [1, 2, 1, "", "choose_random_backend"], [2, 2, 1, "", "clear_backend_stack"], [3, 2, 1, "", "current_backend"], [4, 2, 1, "", "get_backend"], [5, 2, 1, "", "set_backend"], [6, 2, 1, "", "try_import_ivy_jax"], [7, 2, 1, "", "try_import_ivy_mxnet"], [8, 2, 1, "", "try_import_ivy_numpy"], [9, 2, 1, "", "try_import_ivy_tf"], [10, 2, 1, "", "try_import_ivy_torch"], [11, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[66, 0, 0, "-", "activations"], [68, 0, 0, "-", "base"], [70, 0, 0, "-", "container"], [73, 0, 0, "-", "creation"], [75, 0, 0, "-", "data_type"], [77, 0, 0, "-", "device"], [79, 0, 0, "-", "elementwise"], [81, 0, 0, "-", "general"], [83, 0, 0, "-", "gradients"], [85, 0, 0, "-", "image"], [87, 0, 0, "-", "layers"], [89, 0, 0, "-", "linear_algebra"], [91, 0, 0, "-", "losses"], [93, 0, 0, "-", "manipulation"], [95, 0, 0, "-", "norms"], [97, 0, 0, "-", "random"], [99, 0, 0, "-", "searching"], [101, 0, 0, "-", "set"], [103, 0, 0, "-", "sorting"], [105, 0, 0, "-", "statistical"], [107, 0, 0, "-", "utility"], [109, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[67, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[69, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[69, 3, 1, "", "__getitem__"], [69, 3, 1, "", "__init__"], [69, 3, 1, "", "__setitem__"], [69, 3, 1, "", "all_false"], [69, 3, 1, "", "all_key_chains"], [69, 3, 1, "", "all_true"], [69, 3, 1, "", "arrays_as_lists"], [69, 3, 1, "", "as_arrays"], [69, 3, 1, "", "as_bools"], [69, 3, 1, "", "as_ones"], [69, 3, 1, "", "as_random_uniform"], [69, 3, 1, "", "as_variables"], [69, 3, 1, "", "as_zeros"], [69, 3, 1, "", "assert_contains_sub_container"], [69, 3, 1, "", "assert_contains_sub_structure"], [69, 3, 1, "", "assert_identical"], [69, 3, 1, "", "assert_identical_structure"], [69, 3, 1, "", "at_key_chain"], [69, 3, 1, "", "at_key_chains"], [69, 3, 1, "", "at_keys"], [69, 3, 1, "", "clip"], [69, 3, 1, "", "combine"], [69, 3, 1, "", "common_key_chains"], [69, 4, 1, "", "config"], [69, 3, 1, "", "contains_sub_container"], [69, 3, 1, "", "contains_sub_structure"], [69, 3, 1, "", "copy"], [69, 3, 1, "", "create_if_absent"], [69, 3, 1, "", "cutoff_at_depth"], [69, 3, 1, "", "cutoff_at_height"], [69, 3, 1, "", "deep_copy"], [69, 4, 1, "", "dev"], [69, 3, 1, "", "dev_clone"], [69, 3, 1, "", "dev_dist"], [69, 4, 1, "", "dev_str"], [69, 3, 1, "", "diff"], [69, 3, 1, "", "dtype"], [69, 3, 1, "", "einops_rearrange"], [69, 3, 1, "", "einops_reduce"], [69, 3, 1, "", "einops_repeat"], [69, 3, 1, "", "find_sub_container"], [69, 3, 1, "", "find_sub_structure"], [69, 3, 1, "", "flatten_key_chain"], [69, 3, 1, "", "flatten_key_chains"], [69, 3, 1, "", "format_key_chains"], [69, 3, 1, "", "from_disk_as_hdf5"], [69, 3, 1, "", "from_disk_as_json"], [69, 3, 1, "", "from_disk_as_pickled"], [69, 3, 1, "", "from_flat_list"], [69, 3, 1, "", "from_numpy"], [69, 3, 1, "", "gather"], [69, 3, 1, "", "gather_nd"], [69, 3, 1, "", "h5_file_size"], [69, 3, 1, "", "handle_inplace"], [69, 3, 1, "", "has_key"], [69, 3, 1, "", "has_key_chain"], [69, 3, 1, "", "has_nans"], [69, 3, 1, "", "identical"], [69, 3, 1, "", "identical_array_shapes"], [69, 3, 1, "", "identical_configs"], [69, 3, 1, "", "identical_structure"], [69, 3, 1, "", "if_exists"], [69, 3, 1, "", "inplace_update"], [69, 4, 1, "", "ivy"], [69, 3, 1, "", "key_chains_containing"], [69, 3, 1, "", "list_join"], [69, 3, 1, "", "list_stack"], [69, 3, 1, "", "map"], [69, 3, 1, "", "map_conts"], [69, 3, 1, "", "matrix_norm"], [69, 4, 1, "", "max_depth"], [69, 3, 1, "", "maximum"], [69, 3, 1, "", "minimum"], [69, 3, 1, "", "multi_map"], [69, 3, 1, "", "multi_map_in_static_method"], [69, 3, 1, "", "num_arrays"], [69, 3, 1, "", "overwrite_at_key_chain"], [69, 3, 1, "", "overwrite_at_key_chains"], [69, 3, 1, "", "prune_empty"], [69, 3, 1, "", "prune_key_chain"], [69, 3, 1, "", "prune_key_chains"], [69, 3, 1, "", "prune_key_from_key_chains"], [69, 3, 1, "", "prune_keys"], [69, 3, 1, "", "prune_keys_from_key_chains"], [69, 3, 1, "", "reduce"], [69, 3, 1, "", "remove_key_length_limit"], [69, 3, 1, "", "remove_print_limit"], [69, 3, 1, "", "reshape_like"], [69, 3, 1, "", "restructure"], [69, 3, 1, "", "restructure_key_chains"], [69, 3, 1, "", "set_at_key_chain"], [69, 3, 1, "", "set_at_key_chains"], [69, 3, 1, "", "set_at_keys"], [69, 3, 1, "", "set_framework"], [69, 3, 1, "", "set_ivy_backend"], [69, 4, 1, "", "shape"], [69, 4, 1, "", "shapes"], [69, 3, 1, "", "show"], [69, 3, 1, "", "show_sub_container"], [69, 3, 1, "", "shuffle"], [69, 3, 1, "", "shuffle_h5_file"], [69, 3, 1, "", "size_ordered_arrays"], [69, 3, 1, "", "slice_keys"], [69, 3, 1, "", "slice_via_key"], [69, 3, 1, "", "sort_by_key"], [69, 3, 1, "", "split"], [69, 3, 1, "", "stop_gradients"], [69, 3, 1, "", "structural_diff"], [69, 3, 1, "", "to_device"], [69, 3, 1, "", "to_dict"], [69, 3, 1, "", "to_disk_as_hdf5"], [69, 3, 1, "", "to_disk_as_json"], [69, 3, 1, "", "to_disk_as_pickled"], [69, 3, 1, "", "to_flat_list"], [69, 3, 1, "", "to_iterator"], [69, 3, 1, "", "to_iterator_keys"], [69, 3, 1, "", "to_iterator_values"], [69, 3, 1, "", "to_ivy"], [69, 3, 1, "", "to_jsonable"], [69, 3, 1, "", "to_list"], [69, 3, 1, "", "to_multi_dev"], [69, 3, 1, "", "to_native"], [69, 3, 1, "", "to_numpy"], [69, 3, 1, "", "to_raw"], [69, 3, 1, "", "trim_key"], [69, 3, 1, "", "try_kc"], [69, 3, 1, "", "unify"], [69, 3, 1, "", "unstack"], [69, 3, 1, "", "update_config"], [69, 3, 1, "", "vector_norm"], [69, 3, 1, "", "with_default_key_color"], [69, 3, 1, "", "with_entries_as_lists"], [69, 3, 1, "", "with_ivy_backend"], [69, 3, 1, "", "with_key_length_limit"], [69, 3, 1, "", "with_print_indent"], [69, 3, 1, "", "with_print_limit"], [69, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[71, 1, 1, "", "Container"], [72, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[71, 3, 1, "", "__add__"], [71, 3, 1, "", "__init__"], [71, 3, 1, "", "__radd__"], [71, 3, 1, "", "arange"], [71, 3, 1, "", "arg_info"], [71, 3, 1, "", "arg_names"], [71, 3, 1, "", "argmax"], [71, 3, 1, "", "argmin"], [71, 3, 1, "", "array"], [71, 3, 1, "", "array_equal"], [71, 3, 1, "", "arrays_equal"], [71, 3, 1, "", "as_ivy_dev"], [71, 3, 1, "", "as_ivy_dtype"], [71, 3, 1, "", "as_native_dev"], [71, 3, 1, "", "as_native_dtype"], [71, 3, 1, "", "asarray"], [71, 3, 1, "", "assert_supports_inplace"], [71, 3, 1, "", "astype"], [71, 3, 1, "", "broadcast_arrays"], [71, 3, 1, "", "broadcast_to"], [71, 3, 1, "", "cache_fn"], [71, 3, 1, "", "cholesky"], [71, 3, 1, "", "clear_mem_on_dev"], [71, 3, 1, "", "clip_matrix_norm"], [71, 3, 1, "", "closest_valid_dtype"], [71, 3, 1, "", "container_types"], [71, 3, 1, "", "conv1d"], [71, 3, 1, "", "conv1d_transpose"], [71, 3, 1, "", "conv2d"], [71, 3, 1, "", "conv2d_transpose"], [71, 3, 1, "", "conv3d"], [71, 3, 1, "", "conv3d_transpose"], [71, 3, 1, "", "copy_array"], [71, 3, 1, "", "cross"], [71, 3, 1, "", "cumprod"], [71, 3, 1, "", "cumsum"], [71, 3, 1, "", "current_backend"], [71, 3, 1, "", "current_backend_str"], [71, 3, 1, "", "default"], [71, 3, 1, "", "default_device"], [71, 3, 1, "", "default_dtype"], [71, 3, 1, "", "default_float_dtype"], [71, 3, 1, "", "default_int_dtype"], [71, 3, 1, "", "depthwise_conv2d"], [71, 3, 1, "", "det"], [71, 3, 1, "", "dev_clone_array"], [71, 3, 1, "", "dev_clone_iter"], [71, 3, 1, "", "dev_clone_nest"], [71, 3, 1, "", "dev_dist_array"], [71, 3, 1, "", "dev_dist_iter"], [71, 3, 1, "", "dev_dist_nest"], [71, 3, 1, "", "dev_unify"], [71, 3, 1, "", "dev_unify_array"], [71, 3, 1, "", "dev_unify_iter"], [71, 3, 1, "", "dev_unify_nest"], [71, 3, 1, "", "dev_util"], [71, 3, 1, "", "diagonal"], [71, 3, 1, "", "dropout"], [71, 3, 1, "", "dtype_bits"], [71, 3, 1, "", "eigh"], [71, 3, 1, "", "eigvalsh"], [71, 3, 1, "", "empty"], [71, 3, 1, "", "empty_like"], [71, 3, 1, "", "execute_with_gradients"], [71, 3, 1, "", "exists"], [71, 3, 1, "", "eye"], [71, 3, 1, "", "finfo"], [71, 3, 1, "", "floormod"], [71, 3, 1, "", "fourier_encode"], [71, 3, 1, "", "from_dlpack"], [71, 3, 1, "", "full"], [71, 3, 1, "", "full_like"], [71, 3, 1, "", "function_supported_dtypes"], [71, 3, 1, "", "function_unsupported_dtypes"], [71, 3, 1, "", "gelu"], [71, 3, 1, "", "get_all_arrays_in_memory"], [71, 3, 1, "", "get_all_ivy_arrays_on_dev"], [71, 3, 1, "", "get_min_base"], [71, 3, 1, "", "get_min_denominator"], [71, 3, 1, "", "get_num_dims"], [71, 3, 1, "", "get_referrers_recursive"], [71, 3, 1, "", "gpu_is_available"], [71, 3, 1, "", "handle_nestable"], [71, 3, 1, "", "handle_out_argument"], [71, 3, 1, "", "iinfo"], [71, 3, 1, "", "indices_where"], [71, 3, 1, "", "infer_device"], [71, 3, 1, "", "infer_dtype"], [71, 3, 1, "", "inplace_arrays_supported"], [71, 3, 1, "", "inplace_decrement"], [71, 3, 1, "", "inplace_increment"], [71, 3, 1, "", "inplace_variables_supported"], [71, 3, 1, "", "inputs_to_native_arrays"], [71, 3, 1, "", "inv"], [71, 3, 1, "", "invalid_dtype"], [71, 3, 1, "", "is_float_dtype"], [71, 3, 1, "", "is_int_dtype"], [71, 3, 1, "", "is_ivy_container"], [71, 3, 1, "", "leaky_relu"], [71, 3, 1, "", "linear"], [71, 3, 1, "", "linspace"], [71, 3, 1, "", "logspace"], [71, 3, 1, "", "lstm_update"], [71, 3, 1, "", "match_kwargs"], [71, 3, 1, "", "matrix_power"], [71, 3, 1, "", "matrix_rank"], [71, 3, 1, "", "matrix_transpose"], [71, 3, 1, "", "meshgrid"], [71, 3, 1, "", "multi_head_attention"], [71, 3, 1, "", "multinomial"], [71, 3, 1, "", "multiprocessing"], [71, 3, 1, "", "native_array"], [71, 3, 1, "", "nonzero"], [71, 3, 1, "", "num_arrays_in_memory"], [71, 3, 1, "", "num_cpu_cores"], [71, 3, 1, "", "num_gpus"], [71, 3, 1, "", "num_ivy_arrays_on_dev"], [71, 3, 1, "", "one_hot"], [71, 3, 1, "", "ones"], [71, 3, 1, "", "ones_like"], [71, 3, 1, "", "outer"], [71, 3, 1, "", "outputs_to_ivy_arrays"], [71, 3, 1, "", "percent_used_mem_on_dev"], [71, 3, 1, "", "pinv"], [71, 3, 1, "", "print_all_arrays_in_memory"], [71, 3, 1, "", "print_all_ivy_arrays_on_dev"], [71, 3, 1, "", "promote_types"], [71, 3, 1, "", "qr"], [71, 3, 1, "", "queue_timeout"], [71, 3, 1, "", "randint"], [71, 3, 1, "", "random_normal"], [71, 3, 1, "", "relu"], [71, 3, 1, "", "result_type"], [71, 3, 1, "", "scaled_dot_product_attention"], [71, 3, 1, "", "scatter_flat"], [71, 3, 1, "", "scatter_nd"], [71, 3, 1, "", "seed"], [71, 3, 1, "", "set_default_device"], [71, 3, 1, "", "set_default_dtype"], [71, 3, 1, "", "set_default_float_dtype"], [71, 3, 1, "", "set_default_int_dtype"], [71, 3, 1, "", "set_min_base"], [71, 3, 1, "", "set_min_denominator"], [71, 3, 1, "", "set_queue_timeout"], [71, 3, 1, "", "set_split_factor"], [71, 3, 1, "", "set_tmp_dir"], [71, 3, 1, "", "set_with_grads"], [71, 3, 1, "", "shape_to_tuple"], [71, 3, 1, "", "sigmoid"], [71, 3, 1, "", "slogdet"], [71, 3, 1, "", "softmax"], [71, 3, 1, "", "softplus"], [71, 3, 1, "", "solve"], [71, 3, 1, "", "split_factor"], [71, 3, 1, "", "split_func_call"], [71, 3, 1, "", "stable_divide"], [71, 3, 1, "", "stable_pow"], [71, 3, 1, "", "static_abs"], [71, 3, 1, "", "static_acos"], [71, 3, 1, "", "static_acosh"], [71, 3, 1, "", "static_all"], [71, 3, 1, "", "static_any"], [71, 3, 1, "", "static_arange"], [71, 3, 1, "", "static_arg_info"], [71, 3, 1, "", "static_arg_names"], [71, 3, 1, "", "static_argmax"], [71, 3, 1, "", "static_argmin"], [71, 3, 1, "", "static_array"], [71, 3, 1, "", "static_array_equal"], [71, 3, 1, "", "static_arrays_equal"], [71, 3, 1, "", "static_as_ivy_dev"], [71, 3, 1, "", "static_as_ivy_dtype"], [71, 3, 1, "", "static_as_native_dev"], [71, 3, 1, "", "static_as_native_dtype"], [71, 3, 1, "", "static_asarray"], [71, 3, 1, "", "static_asin"], [71, 3, 1, "", "static_asinh"], [71, 3, 1, "", "static_assert_supports_inplace"], [71, 3, 1, "", "static_astype"], [71, 3, 1, "", "static_atan"], [71, 3, 1, "", "static_atan2"], [71, 3, 1, "", "static_atanh"], [71, 3, 1, "", "static_bitwise_and"], [71, 3, 1, "", "static_bitwise_invert"], [71, 3, 1, "", "static_bitwise_left_shift"], [71, 3, 1, "", "static_bitwise_or"], [71, 3, 1, "", "static_bitwise_right_shift"], [71, 3, 1, "", "static_bitwise_xor"], [71, 3, 1, "", "static_broadcast_arrays"], [71, 3, 1, "", "static_broadcast_to"], [71, 3, 1, "", "static_cache_fn"], [71, 3, 1, "", "static_ceil"], [71, 3, 1, "", "static_cholesky"], [71, 3, 1, "", "static_clear_mem_on_dev"], [71, 3, 1, "", "static_clip_matrix_norm"], [71, 3, 1, "", "static_clip_vector_norm"], [71, 3, 1, "", "static_closest_valid_dtype"], [71, 3, 1, "", "static_concat"], [71, 3, 1, "", "static_constant_pad"], [71, 3, 1, "", "static_container_types"], [71, 3, 1, "", "static_conv1d"], [71, 3, 1, "", "static_conv1d_transpose"], [71, 3, 1, "", "static_conv2d"], [71, 3, 1, "", "static_conv2d_transpose"], [71, 3, 1, "", "static_conv3d"], [71, 3, 1, "", "static_conv3d_transpose"], [71, 3, 1, "", "static_copy_array"], [71, 3, 1, "", "static_cos"], [71, 3, 1, "", "static_cosh"], [71, 3, 1, "", "static_cross"], [71, 3, 1, "", "static_cumprod"], [71, 3, 1, "", "static_cumsum"], [71, 3, 1, "", "static_current_backend"], [71, 3, 1, "", "static_current_backend_str"], [71, 3, 1, "", "static_default"], [71, 3, 1, "", "static_default_device"], [71, 3, 1, "", "static_default_dtype"], [71, 3, 1, "", "static_default_float_dtype"], [71, 3, 1, "", "static_default_int_dtype"], [71, 3, 1, "", "static_depthwise_conv2d"], [71, 3, 1, "", "static_det"], [71, 3, 1, "", "static_dev"], [71, 3, 1, "", "static_dev_clone"], [71, 3, 1, "", "static_dev_clone_array"], [71, 3, 1, "", "static_dev_clone_iter"], [71, 3, 1, "", "static_dev_clone_nest"], [71, 3, 1, "", "static_dev_dist"], [71, 3, 1, "", "static_dev_dist_array"], [71, 3, 1, "", "static_dev_dist_iter"], [71, 3, 1, "", "static_dev_dist_nest"], [71, 3, 1, "", "static_dev_unify"], [71, 3, 1, "", "static_dev_unify_array"], [71, 3, 1, "", "static_dev_unify_iter"], [71, 3, 1, "", "static_dev_unify_nest"], [71, 3, 1, "", "static_dev_util"], [71, 3, 1, "", "static_diagonal"], [71, 3, 1, "", "static_dropout"], [71, 3, 1, "", "static_dtype"], [71, 3, 1, "", "static_dtype_bits"], [71, 3, 1, "", "static_eigh"], [71, 3, 1, "", "static_eigvalsh"], [71, 3, 1, "", "static_einops_rearrange"], [71, 3, 1, "", "static_einops_reduce"], [71, 3, 1, "", "static_einops_repeat"], [71, 3, 1, "", "static_einsum"], [71, 3, 1, "", "static_empty"], [71, 3, 1, "", "static_empty_like"], [71, 3, 1, "", "static_equal"], [71, 3, 1, "", "static_erf"], [71, 3, 1, "", "static_execute_with_gradients"], [71, 3, 1, "", "static_exists"], [71, 3, 1, "", "static_exp"], [71, 3, 1, "", "static_expand_dims"], [71, 3, 1, "", "static_expm1"], [71, 3, 1, "", "static_eye"], [71, 3, 1, "", "static_finfo"], [71, 3, 1, "", "static_flip"], [71, 3, 1, "", "static_floor"], [71, 3, 1, "", "static_floor_divide"], [71, 3, 1, "", "static_floormod"], [71, 3, 1, "", "static_fourier_encode"], [71, 3, 1, "", "static_from_dlpack"], [71, 3, 1, "", "static_full"], [71, 3, 1, "", "static_full_like"], [71, 3, 1, "", "static_function_supported_dtypes"], [71, 3, 1, "", "static_function_unsupported_dtypes"], [71, 3, 1, "", "static_gather"], [71, 3, 1, "", "static_gelu"], [71, 3, 1, "", "static_get_all_arrays_in_memory"], [71, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [71, 3, 1, "", "static_get_min_base"], [71, 3, 1, "", "static_get_min_denominator"], [71, 3, 1, "", "static_get_num_dims"], [71, 3, 1, "", "static_get_referrers_recursive"], [71, 3, 1, "", "static_gpu_is_available"], [71, 3, 1, "", "static_greater"], [71, 3, 1, "", "static_greater_equal"], [71, 3, 1, "", "static_handle_nestable"], [71, 3, 1, "", "static_handle_out_argument"], [71, 3, 1, "", "static_has_nans"], [71, 3, 1, "", "static_iinfo"], [71, 3, 1, "", "static_indices_where"], [71, 3, 1, "", "static_infer_device"], [71, 3, 1, "", "static_infer_dtype"], [71, 3, 1, "", "static_inplace_arrays_supported"], [71, 3, 1, "", "static_inplace_decrement"], [71, 3, 1, "", "static_inplace_increment"], [71, 3, 1, "", "static_inplace_update"], [71, 3, 1, "", "static_inplace_variables_supported"], [71, 3, 1, "", "static_inputs_to_native_arrays"], [71, 3, 1, "", "static_inv"], [71, 3, 1, "", "static_invalid_dtype"], [71, 3, 1, "", "static_is_array"], [71, 3, 1, "", "static_is_float_dtype"], [71, 3, 1, "", "static_is_int_dtype"], [71, 3, 1, "", "static_is_ivy_array"], [71, 3, 1, "", "static_is_ivy_container"], [71, 3, 1, "", "static_is_native_array"], [71, 3, 1, "", "static_is_variable"], [71, 3, 1, "", "static_isfinite"], [71, 3, 1, "", "static_isinf"], [71, 3, 1, "", "static_isnan"], [71, 3, 1, "", "static_layer_norm"], [71, 3, 1, "", "static_leaky_relu"], [71, 3, 1, "", "static_less"], [71, 3, 1, "", "static_less_equal"], [71, 3, 1, "", "static_linear"], [71, 3, 1, "", "static_linspace"], [71, 3, 1, "", "static_log"], [71, 3, 1, "", "static_log10"], [71, 3, 1, "", "static_log1p"], [71, 3, 1, "", "static_log2"], [71, 3, 1, "", "static_logaddexp"], [71, 3, 1, "", "static_logical_and"], [71, 3, 1, "", "static_logical_not"], [71, 3, 1, "", "static_logical_or"], [71, 3, 1, "", "static_logical_xor"], [71, 3, 1, "", "static_logspace"], [71, 3, 1, "", "static_lstm_update"], [71, 3, 1, "", "static_match_kwargs"], [71, 3, 1, "", "static_matmul"], [71, 3, 1, "", "static_matrix_norm"], [71, 3, 1, "", "static_matrix_power"], [71, 3, 1, "", "static_matrix_rank"], [71, 3, 1, "", "static_matrix_transpose"], [71, 3, 1, "", "static_max"], [71, 3, 1, "", "static_maximum"], [71, 3, 1, "", "static_mean"], [71, 3, 1, "", "static_meshgrid"], [71, 3, 1, "", "static_min"], [71, 3, 1, "", "static_minimum"], [71, 3, 1, "", "static_multi_head_attention"], [71, 3, 1, "", "static_multinomial"], [71, 3, 1, "", "static_multiprocessing"], [71, 3, 1, "", "static_native_array"], [71, 3, 1, "", "static_negative"], [71, 3, 1, "", "static_nonzero"], [71, 3, 1, "", "static_not_equal"], [71, 3, 1, "", "static_num_arrays_in_memory"], [71, 3, 1, "", "static_num_cpu_cores"], [71, 3, 1, "", "static_num_gpus"], [71, 3, 1, "", "static_num_ivy_arrays_on_dev"], [71, 3, 1, "", "static_one_hot"], [71, 3, 1, "", "static_ones"], [71, 3, 1, "", "static_ones_like"], [71, 3, 1, "", "static_outer"], [71, 3, 1, "", "static_outputs_to_ivy_arrays"], [71, 3, 1, "", "static_percent_used_mem_on_dev"], [71, 3, 1, "", "static_permute_dims"], [71, 3, 1, "", "static_pinv"], [71, 3, 1, "", "static_positive"], [71, 3, 1, "", "static_pow"], [71, 3, 1, "", "static_print_all_arrays_in_memory"], [71, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [71, 3, 1, "", "static_prod"], [71, 3, 1, "", "static_promote_types"], [71, 3, 1, "", "static_qr"], [71, 3, 1, "", "static_queue_timeout"], [71, 3, 1, "", "static_random_normal"], [71, 3, 1, "", "static_relu"], [71, 3, 1, "", "static_remainder"], [71, 3, 1, "", "static_repeat"], [71, 3, 1, "", "static_reshape"], [71, 3, 1, "", "static_result_type"], [71, 3, 1, "", "static_round"], [71, 3, 1, "", "static_scaled_dot_product_attention"], [71, 3, 1, "", "static_scatter_flat"], [71, 3, 1, "", "static_scatter_nd"], [71, 3, 1, "", "static_seed"], [71, 3, 1, "", "static_set_default_device"], [71, 3, 1, "", "static_set_default_dtype"], [71, 3, 1, "", "static_set_default_float_dtype"], [71, 3, 1, "", "static_set_default_int_dtype"], [71, 3, 1, "", "static_set_min_base"], [71, 3, 1, "", "static_set_min_denominator"], [71, 3, 1, "", "static_set_queue_timeout"], [71, 3, 1, "", "static_set_split_factor"], [71, 3, 1, "", "static_set_tmp_dir"], [71, 3, 1, "", "static_set_with_grads"], [71, 3, 1, "", "static_shape"], [71, 3, 1, "", "static_shape_to_tuple"], [71, 3, 1, "", "static_shuffle"], [71, 3, 1, "", "static_sigmoid"], [71, 3, 1, "", "static_sign"], [71, 3, 1, "", "static_sin"], [71, 3, 1, "", "static_sinh"], [71, 3, 1, "", "static_slogdet"], [71, 3, 1, "", "static_softmax"], [71, 3, 1, "", "static_softplus"], [71, 3, 1, "", "static_solve"], [71, 3, 1, "", "static_split"], [71, 3, 1, "", "static_split_factor"], [71, 3, 1, "", "static_split_func_call"], [71, 3, 1, "", "static_sqrt"], [71, 3, 1, "", "static_square"], [71, 3, 1, "", "static_squeeze"], [71, 3, 1, "", "static_stable_divide"], [71, 3, 1, "", "static_stable_pow"], [71, 3, 1, "", "static_stack"], [71, 3, 1, "", "static_std"], [71, 3, 1, "", "static_stop_gradient"], [71, 3, 1, "", "static_sum"], [71, 3, 1, "", "static_supports_inplace"], [71, 3, 1, "", "static_svd"], [71, 3, 1, "", "static_svdvals"], [71, 3, 1, "", "static_swapaxes"], [71, 3, 1, "", "static_tensordot"], [71, 3, 1, "", "static_tile"], [71, 3, 1, "", "static_tmp_dir"], [71, 3, 1, "", "static_to_device"], [71, 3, 1, "", "static_to_list"], [71, 3, 1, "", "static_to_native_arrays_and_back"], [71, 3, 1, "", "static_to_numpy"], [71, 3, 1, "", "static_to_scalar"], [71, 3, 1, "", "static_total_mem_on_dev"], [71, 3, 1, "", "static_tpu_is_available"], [71, 3, 1, "", "static_trace"], [71, 3, 1, "", "static_tril"], [71, 3, 1, "", "static_triu"], [71, 3, 1, "", "static_trunc"], [71, 3, 1, "", "static_try_else_none"], [71, 3, 1, "", "static_type_promote_arrays"], [71, 3, 1, "", "static_unique_all"], [71, 3, 1, "", "static_unique_counts"], [71, 3, 1, "", "static_unique_inverse"], [71, 3, 1, "", "static_unique_values"], [71, 3, 1, "", "static_unset_default_device"], [71, 3, 1, "", "static_unset_default_dtype"], [71, 3, 1, "", "static_unset_default_float_dtype"], [71, 3, 1, "", "static_unset_default_int_dtype"], [71, 3, 1, "", "static_unset_with_grads"], [71, 3, 1, "", "static_unstack"], [71, 3, 1, "", "static_used_mem_on_dev"], [71, 3, 1, "", "static_valid_dtype"], [71, 3, 1, "", "static_value_is_nan"], [71, 3, 1, "", "static_var"], [71, 3, 1, "", "static_variable"], [71, 3, 1, "", "static_variable_data"], [71, 3, 1, "", "static_vecdot"], [71, 3, 1, "", "static_vector_norm"], [71, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [71, 3, 1, "", "static_where"], [71, 3, 1, "", "static_with_grads"], [71, 3, 1, "", "static_zero_pad"], [71, 3, 1, "", "static_zeros"], [71, 3, 1, "", "static_zeros_like"], [71, 3, 1, "", "stop_gradient"], [71, 3, 1, "", "supports_inplace"], [71, 3, 1, "", "svd"], [71, 3, 1, "", "svdvals"], [71, 3, 1, "", "tensordot"], [71, 3, 1, "", "tmp_dir"], [71, 3, 1, "", "to_native_arrays_and_back"], [71, 3, 1, "", "to_scalar"], [71, 3, 1, "", "total_mem_on_dev"], [71, 3, 1, "", "tpu_is_available"], [71, 3, 1, "", "trace"], [71, 3, 1, "", "tril"], [71, 3, 1, "", "triu"], [71, 3, 1, "", "try_else_none"], [71, 3, 1, "", "type_promote_arrays"], [71, 3, 1, "", "unique_all"], [71, 3, 1, "", "unique_counts"], [71, 3, 1, "", "unique_inverse"], [71, 3, 1, "", "unique_values"], [71, 3, 1, "", "unset_default_device"], [71, 3, 1, "", "unset_default_dtype"], [71, 3, 1, "", "unset_default_float_dtype"], [71, 3, 1, "", "unset_default_int_dtype"], [71, 3, 1, "", "unset_with_grads"], [71, 3, 1, "", "used_mem_on_dev"], [71, 3, 1, "", "valid_dtype"], [71, 3, 1, "", "value_is_nan"], [71, 3, 1, "", "variable"], [71, 3, 1, "", "variable_data"], [71, 3, 1, "", "vecdot"], [71, 3, 1, "", "vector_to_skew_symmetric_matrix"], [71, 3, 1, "", "where"], [71, 3, 1, "", "with_grads"], [71, 3, 1, "", "zeros"], [71, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[72, 3, 1, "", "__init__"], [72, 3, 1, "", "at_dev"], [72, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[269, 2, 1, "", "abs"], [273, 2, 1, "", "acos"], [277, 2, 1, "", "acosh"], [580, 2, 1, "", "adam_step"], [584, 2, 1, "", "adam_update"], [281, 2, 1, "", "add"], [866, 2, 1, "", "all"], [506, 2, 1, "", "all_equal"], [870, 2, 1, "", "any"], [822, 2, 1, "", "argsort"], [286, 2, 1, "", "asin"], [290, 2, 1, "", "asinh"], [294, 2, 1, "", "atan"], [298, 2, 1, "", "atan2"], [302, 2, 1, "", "atanh"], [697, 2, 1, "", "binary_cross_entropy"], [306, 2, 1, "", "bitwise_and"], [310, 2, 1, "", "bitwise_invert"], [314, 2, 1, "", "bitwise_left_shift"], [318, 2, 1, "", "bitwise_or"], [322, 2, 1, "", "bitwise_right_shift"], [326, 2, 1, "", "bitwise_xor"], [193, 2, 1, "", "can_cast"], [330, 2, 1, "", "ceil"], [713, 2, 1, "", "clip"], [517, 2, 1, "", "clip_vector_norm"], [718, 2, 1, "", "concat"], [722, 2, 1, "", "constant_pad"], [334, 2, 1, "", "cos"], [338, 2, 1, "", "cosh"], [702, 2, 1, "", "cross_entropy"], [342, 2, 1, "", "divide"], [833, 2, 1, "", "einsum"], [347, 2, 1, "", "equal"], [351, 2, 1, "", "erf"], [355, 2, 1, "", "exp"], [726, 2, 1, "", "expand_dims"], [359, 2, 1, "", "expm1"], [730, 2, 1, "", "flip"], [363, 2, 1, "", "floor"], [367, 2, 1, "", "floor_divide"], [534, 2, 1, "", "gather_nd"], [589, 2, 1, "", "gradient_descent_update"], [371, 2, 1, "", "greater"], [375, 2, 1, "", "greater_equal"], [379, 2, 1, "", "isfinite"], [383, 2, 1, "", "isinf"], [387, 2, 1, "", "isnan"], [594, 2, 1, "", "lamb_update"], [598, 2, 1, "", "lars_update"], [795, 2, 1, "", "layer_norm"], [391, 2, 1, "", "less"], [395, 2, 1, "", "less_equal"], [399, 2, 1, "", "log"], [403, 2, 1, "", "log10"], [407, 2, 1, "", "log1p"], [411, 2, 1, "", "log2"], [415, 2, 1, "", "logaddexp"], [419, 2, 1, "", "logical_and"], [423, 2, 1, "", "logical_not"], [427, 2, 1, "", "logical_or"], [431, 2, 1, "", "logical_xor"], [648, 2, 1, "", "matmul"], [837, 2, 1, "", "max"], [841, 2, 1, "", "mean"], [845, 2, 1, "", "min"], [437, 2, 1, "", "multiply"], [442, 2, 1, "", "negative"], [446, 2, 1, "", "not_equal"], [602, 2, 1, "", "optimizer_update"], [734, 2, 1, "", "permute_dims"], [450, 2, 1, "", "positive"], [454, 2, 1, "", "pow"], [849, 2, 1, "", "prod"], [804, 2, 1, "", "random_uniform"], [458, 2, 1, "", "remainder"], [738, 2, 1, "", "repeat"], [742, 2, 1, "", "reshape"], [746, 2, 1, "", "roll"], [462, 2, 1, "", "round"], [466, 2, 1, "", "sign"], [470, 2, 1, "", "sin"], [474, 2, 1, "", "sinh"], [827, 2, 1, "", "sort"], [707, 2, 1, "", "sparse_cross_entropy"], [478, 2, 1, "", "sqrt"], [482, 2, 1, "", "square"], [752, 2, 1, "", "squeeze"], [756, 2, 1, "", "stack"], [582, 2, 1, "", "static_adam_step"], [586, 2, 1, "", "static_adam_update"], [283, 2, 1, "", "static_add"], [508, 2, 1, "", "static_all_equal"], [824, 2, 1, "", "static_argsort"], [699, 2, 1, "", "static_binary_cross_entropy"], [195, 2, 1, "", "static_can_cast"], [715, 2, 1, "", "static_clip"], [704, 2, 1, "", "static_cross_entropy"], [344, 2, 1, "", "static_divide"], [536, 2, 1, "", "static_gather_nd"], [591, 2, 1, "", "static_gradient_descent_update"], [596, 2, 1, "", "static_lamb_update"], [600, 2, 1, "", "static_lars_update"], [439, 2, 1, "", "static_multiply"], [604, 2, 1, "", "static_optimizer_update"], [801, 2, 1, "", "static_randint"], [806, 2, 1, "", "static_random_uniform"], [748, 2, 1, "", "static_roll"], [829, 2, 1, "", "static_sort"], [709, 2, 1, "", "static_sparse_cross_entropy"], [485, 2, 1, "", "static_subtract"], [490, 2, 1, "", "static_tan"], [495, 2, 1, "", "static_tanh"], [853, 2, 1, "", "std"], [487, 2, 1, "", "subtract"], [857, 2, 1, "", "sum"], [760, 2, 1, "", "swapaxes"], [492, 2, 1, "", "tan"], [497, 2, 1, "", "tanh"], [764, 2, 1, "", "tile"], [501, 2, 1, "", "trunc"], [861, 2, 1, "", "var"], [768, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[74, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[76, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[76, 3, 1, "", "can_cast"], [76, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[78, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[80, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[80, 3, 1, "", "abs"], [80, 3, 1, "", "acos"], [80, 3, 1, "", "acosh"], [80, 3, 1, "", "add"], [80, 3, 1, "", "asin"], [80, 3, 1, "", "asinh"], [80, 3, 1, "", "atan"], [80, 3, 1, "", "atan2"], [80, 3, 1, "", "atanh"], [80, 3, 1, "", "bitwise_and"], [80, 3, 1, "", "bitwise_invert"], [80, 3, 1, "", "bitwise_left_shift"], [80, 3, 1, "", "bitwise_or"], [80, 3, 1, "", "bitwise_right_shift"], [80, 3, 1, "", "bitwise_xor"], [80, 3, 1, "", "ceil"], [80, 3, 1, "", "cos"], [80, 3, 1, "", "cosh"], [80, 3, 1, "", "divide"], [80, 3, 1, "", "equal"], [80, 3, 1, "", "erf"], [80, 3, 1, "", "exp"], [80, 3, 1, "", "expm1"], [80, 3, 1, "", "floor"], [80, 3, 1, "", "floor_divide"], [80, 3, 1, "", "greater"], [80, 3, 1, "", "greater_equal"], [80, 3, 1, "", "isfinite"], [80, 3, 1, "", "isinf"], [80, 3, 1, "", "isnan"], [80, 3, 1, "", "less"], [80, 3, 1, "", "less_equal"], [80, 3, 1, "", "log"], [80, 3, 1, "", "log10"], [80, 3, 1, "", "log1p"], [80, 3, 1, "", "log2"], [80, 3, 1, "", "logaddexp"], [80, 3, 1, "", "logical_and"], [80, 3, 1, "", "logical_not"], [80, 3, 1, "", "logical_or"], [80, 3, 1, "", "logical_xor"], [80, 3, 1, "", "multiply"], [80, 3, 1, "", "negative"], [80, 3, 1, "", "not_equal"], [80, 3, 1, "", "positive"], [80, 3, 1, "", "pow"], [80, 3, 1, "", "remainder"], [80, 3, 1, "", "round"], [80, 3, 1, "", "sign"], [80, 3, 1, "", "sin"], [80, 3, 1, "", "sinh"], [80, 3, 1, "", "sqrt"], [80, 3, 1, "", "square"], [80, 3, 1, "", "static_add"], [80, 3, 1, "", "static_divide"], [80, 3, 1, "", "static_multiply"], [80, 3, 1, "", "static_subtract"], [80, 3, 1, "", "static_tan"], [80, 3, 1, "", "static_tanh"], [80, 3, 1, "", "subtract"], [80, 3, 1, "", "tan"], [80, 3, 1, "", "tanh"], [80, 3, 1, "", "trunc"]], "ivy.container.general": [[82, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[82, 3, 1, "", "all_equal"], [82, 3, 1, "", "clip_vector_norm"], [82, 3, 1, "", "gather_nd"], [82, 3, 1, "", "static_all_equal"], [82, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[84, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[84, 3, 1, "", "adam_step"], [84, 3, 1, "", "adam_update"], [84, 3, 1, "", "gradient_descent_update"], [84, 3, 1, "", "lamb_update"], [84, 3, 1, "", "lars_update"], [84, 3, 1, "", "optimizer_update"], [84, 3, 1, "", "static_adam_step"], [84, 3, 1, "", "static_adam_update"], [84, 3, 1, "", "static_gradient_descent_update"], [84, 3, 1, "", "static_lamb_update"], [84, 3, 1, "", "static_lars_update"], [84, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[86, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[88, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[90, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[90, 3, 1, "", "matmul"]], "ivy.container.losses": [[92, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[92, 3, 1, "", "binary_cross_entropy"], [92, 3, 1, "", "cross_entropy"], [92, 3, 1, "", "sparse_cross_entropy"], [92, 3, 1, "", "static_binary_cross_entropy"], [92, 3, 1, "", "static_cross_entropy"], [92, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[94, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[94, 3, 1, "", "clip"], [94, 3, 1, "", "concat"], [94, 3, 1, "", "constant_pad"], [94, 3, 1, "", "expand_dims"], [94, 3, 1, "", "flip"], [94, 3, 1, "", "permute_dims"], [94, 3, 1, "", "repeat"], [94, 3, 1, "", "reshape"], [94, 3, 1, "", "roll"], [94, 3, 1, "", "squeeze"], [94, 3, 1, "", "stack"], [94, 3, 1, "", "static_clip"], [94, 3, 1, "", "static_roll"], [94, 3, 1, "", "swapaxes"], [94, 3, 1, "", "tile"], [94, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[96, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[96, 3, 1, "", "layer_norm"]], "ivy.container.random": [[98, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[98, 3, 1, "", "random_uniform"], [98, 3, 1, "", "static_randint"], [98, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[100, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[102, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[104, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[104, 3, 1, "", "argsort"], [104, 3, 1, "", "sort"], [104, 3, 1, "", "static_argsort"], [104, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[106, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[106, 3, 1, "", "einsum"], [106, 3, 1, "", "max"], [106, 3, 1, "", "mean"], [106, 3, 1, "", "min"], [106, 3, 1, "", "prod"], [106, 3, 1, "", "std"], [106, 3, 1, "", "sum"], [106, 3, 1, "", "var"]], "ivy.container.utility": [[108, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[108, 3, 1, "", "all"], [108, 3, 1, "", "any"]], "ivy.container.wrapping": [[110, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[146, 2, 1, "", "handle_nestable"], [147, 2, 1, "", "handle_out_argument"], [148, 2, 1, "", "infer_device"], [149, 2, 1, "", "infer_dtype"], [150, 2, 1, "", "inputs_to_ivy_arrays"], [151, 2, 1, "", "inputs_to_native_arrays"], [152, 2, 1, "", "outputs_to_ivy_arrays"], [153, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[155, 0, 0, "-", "activations"], [163, 0, 0, "-", "compilation"], [165, 0, 0, "-", "constants"], [166, 0, 0, "-", "creation"], [185, 0, 0, "-", "data_type"], [219, 0, 0, "-", "device"], [266, 0, 0, "-", "elementwise"], [503, 0, 0, "-", "general"], [577, 0, 0, "-", "gradients"], [611, 0, 0, "-", "layers"], [624, 0, 0, "-", "linear_algebra"], [694, 0, 0, "-", "losses"], [710, 0, 0, "-", "manipulation"], [770, 0, 0, "-", "meta"], [774, 0, 0, "-", "nest"], [792, 0, 0, "-", "norms"], [797, 0, 0, "-", "random"], [809, 0, 0, "-", "searching"], [814, 0, 0, "-", "set"], [819, 0, 0, "-", "sorting"], [830, 0, 0, "-", "statistical"], [863, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[156, 2, 1, "", "gelu"], [157, 2, 1, "", "leaky_relu"], [158, 2, 1, "", "relu"], [159, 2, 1, "", "sigmoid"], [160, 2, 1, "", "softmax"], [161, 2, 1, "", "softplus"], [162, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[164, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[165, 5, 1, "", "e"], [165, 5, 1, "", "inf"], [165, 5, 1, "", "nan"], [165, 5, 1, "", "newaxis"], [165, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[167, 2, 1, "", "arange"], [166, 2, 1, "", "array"], [168, 2, 1, "", "asarray"], [169, 2, 1, "", "empty"], [170, 2, 1, "", "empty_like"], [171, 2, 1, "", "eye"], [172, 2, 1, "", "from_dlpack"], [173, 2, 1, "", "full"], [174, 2, 1, "", "full_like"], [175, 2, 1, "", "linspace"], [176, 2, 1, "", "logspace"], [177, 2, 1, "", "meshgrid"], [178, 2, 1, "", "native_array"], [179, 2, 1, "", "ones"], [180, 2, 1, "", "ones_like"], [181, 2, 1, "", "tril"], [182, 2, 1, "", "triu"], [183, 2, 1, "", "zeros"], [184, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[185, 1, 1, "", "DefaultDtype"], [185, 1, 1, "", "DefaultFloatDtype"], [185, 1, 1, "", "DefaultIntDtype"], [186, 2, 1, "", "as_ivy_dtype"], [187, 2, 1, "", "as_native_dtype"], [188, 2, 1, "", "astype"], [189, 2, 1, "", "broadcast_arrays"], [190, 2, 1, "", "broadcast_to"], [194, 2, 1, "", "can_cast"], [196, 2, 1, "", "closest_valid_dtype"], [197, 2, 1, "", "default_dtype"], [198, 2, 1, "", "default_float_dtype"], [199, 2, 1, "", "default_int_dtype"], [200, 2, 1, "", "dtype"], [201, 2, 1, "", "dtype_bits"], [202, 2, 1, "", "finfo"], [203, 2, 1, "", "function_supported_dtypes"], [204, 2, 1, "", "function_unsupported_dtypes"], [205, 2, 1, "", "iinfo"], [206, 2, 1, "", "invalid_dtype"], [207, 2, 1, "", "is_float_dtype"], [208, 2, 1, "", "is_int_dtype"], [209, 2, 1, "", "promote_types"], [210, 2, 1, "", "result_type"], [211, 2, 1, "", "set_default_dtype"], [212, 2, 1, "", "set_default_float_dtype"], [213, 2, 1, "", "set_default_int_dtype"], [214, 2, 1, "", "type_promote_arrays"], [215, 2, 1, "", "unset_default_dtype"], [216, 2, 1, "", "unset_default_float_dtype"], [217, 2, 1, "", "unset_default_int_dtype"], [218, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[185, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[185, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[185, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[219, 1, 1, "", "DefaultDevice"], [220, 1, 1, "", "DevClonedItem"], [221, 1, 1, "", "DevClonedIter"], [222, 1, 1, "", "DevClonedNest"], [223, 1, 1, "", "DevDistItem"], [224, 1, 1, "", "DevDistIter"], [225, 1, 1, "", "DevDistNest"], [219, 1, 1, "", "DevManager"], [226, 1, 1, "", "DevMapper"], [227, 1, 1, "", "DevMapperMultiProc"], [219, 1, 1, "", "MultiDev"], [228, 1, 1, "", "MultiDevItem"], [229, 1, 1, "", "MultiDevIter"], [230, 1, 1, "", "MultiDevNest"], [231, 1, 1, "", "Profiler"], [232, 2, 1, "", "as_ivy_dev"], [233, 2, 1, "", "as_native_dev"], [234, 2, 1, "", "clear_mem_on_dev"], [235, 2, 1, "", "default_device"], [236, 2, 1, "", "dev"], [237, 2, 1, "", "dev_clone"], [238, 2, 1, "", "dev_clone_array"], [239, 2, 1, "", "dev_clone_iter"], [240, 2, 1, "", "dev_clone_nest"], [241, 2, 1, "", "dev_dist"], [242, 2, 1, "", "dev_dist_array"], [243, 2, 1, "", "dev_dist_iter"], [244, 2, 1, "", "dev_dist_nest"], [245, 2, 1, "", "dev_unify"], [246, 2, 1, "", "dev_unify_array"], [247, 2, 1, "", "dev_unify_iter"], [248, 2, 1, "", "dev_unify_nest"], [249, 2, 1, "", "dev_util"], [250, 2, 1, "", "get_all_ivy_arrays_on_dev"], [251, 2, 1, "", "gpu_is_available"], [252, 2, 1, "", "num_cpu_cores"], [253, 2, 1, "", "num_gpus"], [254, 2, 1, "", "num_ivy_arrays_on_dev"], [255, 2, 1, "", "percent_used_mem_on_dev"], [256, 2, 1, "", "print_all_ivy_arrays_on_dev"], [257, 2, 1, "", "set_default_device"], [258, 2, 1, "", "set_split_factor"], [259, 2, 1, "", "split_factor"], [260, 2, 1, "", "split_func_call"], [261, 2, 1, "", "to_device"], [262, 2, 1, "", "total_mem_on_dev"], [263, 2, 1, "", "tpu_is_available"], [264, 2, 1, "", "unset_default_device"], [265, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[219, 3, 1, "", "__enter__"], [219, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[219, 3, 1, "", "__init__"], [219, 3, 1, "", "da_tune_step"], [219, 4, 1, "", "dim_size"], [219, 3, 1, "", "ds_tune_step"], [219, 3, 1, "", "map"], [219, 3, 1, "", "repeated_config_check"], [219, 4, 1, "", "tune_step"], [219, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[226, 3, 1, "", "__init__"], [226, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[227, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[219, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[228, 3, 1, "", "__init__"], [228, 3, 1, "", "items"], [228, 3, 1, "", "keys"], [228, 4, 1, "", "shape"], [228, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[229, 3, 1, "", "__init__"], [229, 3, 1, "", "at_dev"], [229, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[230, 3, 1, "", "__init__"], [230, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[231, 3, 1, "", "__init__"], [231, 3, 1, "", "start"], [231, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[270, 2, 1, "", "abs"], [274, 2, 1, "", "acos"], [278, 2, 1, "", "acosh"], [282, 2, 1, "", "add"], [287, 2, 1, "", "asin"], [291, 2, 1, "", "asinh"], [295, 2, 1, "", "atan"], [299, 2, 1, "", "atan2"], [303, 2, 1, "", "atanh"], [307, 2, 1, "", "bitwise_and"], [311, 2, 1, "", "bitwise_invert"], [315, 2, 1, "", "bitwise_left_shift"], [319, 2, 1, "", "bitwise_or"], [323, 2, 1, "", "bitwise_right_shift"], [327, 2, 1, "", "bitwise_xor"], [331, 2, 1, "", "ceil"], [335, 2, 1, "", "cos"], [339, 2, 1, "", "cosh"], [343, 2, 1, "", "divide"], [348, 2, 1, "", "equal"], [352, 2, 1, "", "erf"], [356, 2, 1, "", "exp"], [360, 2, 1, "", "expm1"], [364, 2, 1, "", "floor"], [368, 2, 1, "", "floor_divide"], [372, 2, 1, "", "greater"], [376, 2, 1, "", "greater_equal"], [380, 2, 1, "", "isfinite"], [384, 2, 1, "", "isinf"], [388, 2, 1, "", "isnan"], [392, 2, 1, "", "less"], [396, 2, 1, "", "less_equal"], [400, 2, 1, "", "log"], [404, 2, 1, "", "log10"], [408, 2, 1, "", "log1p"], [412, 2, 1, "", "log2"], [416, 2, 1, "", "logaddexp"], [420, 2, 1, "", "logical_and"], [424, 2, 1, "", "logical_not"], [428, 2, 1, "", "logical_or"], [432, 2, 1, "", "logical_xor"], [433, 2, 1, "", "maximum"], [434, 2, 1, "", "minimum"], [438, 2, 1, "", "multiply"], [443, 2, 1, "", "negative"], [447, 2, 1, "", "not_equal"], [451, 2, 1, "", "positive"], [455, 2, 1, "", "pow"], [459, 2, 1, "", "remainder"], [463, 2, 1, "", "round"], [467, 2, 1, "", "sign"], [471, 2, 1, "", "sin"], [475, 2, 1, "", "sinh"], [479, 2, 1, "", "sqrt"], [483, 2, 1, "", "square"], [488, 2, 1, "", "subtract"], [493, 2, 1, "", "tan"], [498, 2, 1, "", "tanh"], [502, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[507, 2, 1, "", "all_equal"], [509, 2, 1, "", "arg_info"], [510, 2, 1, "", "arg_names"], [511, 2, 1, "", "array_equal"], [512, 2, 1, "", "arrays_equal"], [513, 2, 1, "", "assert_supports_inplace"], [514, 2, 1, "", "cache_fn"], [515, 2, 1, "", "clip_matrix_norm"], [518, 2, 1, "", "clip_vector_norm"], [519, 2, 1, "", "container_types"], [520, 2, 1, "", "copy_array"], [521, 2, 1, "", "cumprod"], [522, 2, 1, "", "cumsum"], [523, 2, 1, "", "current_backend_str"], [524, 2, 1, "", "default"], [525, 2, 1, "", "einops_rearrange"], [526, 2, 1, "", "einops_reduce"], [527, 2, 1, "", "einops_repeat"], [528, 2, 1, "", "exists"], [529, 2, 1, "", "floormod"], [530, 2, 1, "", "fourier_encode"], [531, 2, 1, "", "gather"], [535, 2, 1, "", "gather_nd"], [537, 2, 1, "", "get_all_arrays_in_memory"], [538, 2, 1, "", "get_min_base"], [539, 2, 1, "", "get_min_denominator"], [540, 2, 1, "", "get_num_dims"], [541, 2, 1, "", "get_referrers_recursive"], [542, 2, 1, "", "has_nans"], [543, 2, 1, "", "indices_where"], [544, 2, 1, "", "inplace_arrays_supported"], [545, 2, 1, "", "inplace_decrement"], [546, 2, 1, "", "inplace_increment"], [547, 2, 1, "", "inplace_update"], [548, 2, 1, "", "inplace_variables_supported"], [549, 2, 1, "", "is_array"], [550, 2, 1, "", "is_ivy_array"], [551, 2, 1, "", "is_ivy_container"], [552, 2, 1, "", "is_native_array"], [553, 2, 1, "", "match_kwargs"], [554, 2, 1, "", "multiprocessing"], [555, 2, 1, "", "num_arrays_in_memory"], [556, 2, 1, "", "one_hot"], [557, 2, 1, "", "print_all_arrays_in_memory"], [558, 2, 1, "", "queue_timeout"], [559, 2, 1, "", "scatter_flat"], [560, 2, 1, "", "scatter_nd"], [561, 2, 1, "", "set_min_base"], [562, 2, 1, "", "set_min_denominator"], [563, 2, 1, "", "set_queue_timeout"], [564, 2, 1, "", "set_tmp_dir"], [565, 2, 1, "", "shape"], [566, 2, 1, "", "shape_to_tuple"], [567, 2, 1, "", "stable_divide"], [568, 2, 1, "", "stable_pow"], [569, 2, 1, "", "supports_inplace"], [570, 2, 1, "", "tmp_dir"], [571, 2, 1, "", "to_list"], [572, 2, 1, "", "to_numpy"], [573, 2, 1, "", "to_scalar"], [574, 2, 1, "", "try_else_none"], [575, 2, 1, "", "unstack"], [576, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[577, 1, 1, "", "GradientTracking"], [581, 2, 1, "", "adam_step"], [585, 2, 1, "", "adam_update"], [587, 2, 1, "", "execute_with_gradients"], [590, 2, 1, "", "gradient_descent_update"], [592, 2, 1, "", "is_variable"], [595, 2, 1, "", "lamb_update"], [599, 2, 1, "", "lars_update"], [603, 2, 1, "", "optimizer_update"], [605, 2, 1, "", "set_with_grads"], [606, 2, 1, "", "stop_gradient"], [607, 2, 1, "", "unset_with_grads"], [608, 2, 1, "", "variable"], [609, 2, 1, "", "variable_data"], [610, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[577, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[612, 2, 1, "", "conv1d"], [613, 2, 1, "", "conv1d_transpose"], [614, 2, 1, "", "conv2d"], [615, 2, 1, "", "conv2d_transpose"], [616, 2, 1, "", "conv3d"], [617, 2, 1, "", "conv3d_transpose"], [618, 2, 1, "", "depthwise_conv2d"], [619, 2, 1, "", "dropout"], [620, 2, 1, "", "linear"], [621, 2, 1, "", "lstm_update"], [622, 2, 1, "", "multi_head_attention"], [623, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[627, 2, 1, "", "cholesky"], [630, 2, 1, "", "cross"], [633, 2, 1, "", "det"], [636, 2, 1, "", "diagonal"], [639, 2, 1, "", "eigh"], [642, 2, 1, "", "eigvalsh"], [645, 2, 1, "", "inv"], [649, 2, 1, "", "matmul"], [652, 2, 1, "", "matrix_norm"], [653, 2, 1, "", "matrix_power"], [656, 2, 1, "", "matrix_rank"], [659, 2, 1, "", "matrix_transpose"], [662, 2, 1, "", "outer"], [665, 2, 1, "", "pinv"], [668, 2, 1, "", "qr"], [669, 2, 1, "", "slogdet"], [672, 2, 1, "", "solve"], [675, 2, 1, "", "svd"], [678, 2, 1, "", "svdvals"], [681, 2, 1, "", "tensordot"], [684, 2, 1, "", "trace"], [687, 2, 1, "", "vecdot"], [690, 2, 1, "", "vector_norm"], [693, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[698, 2, 1, "", "binary_cross_entropy"], [703, 2, 1, "", "cross_entropy"], [708, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[714, 2, 1, "", "clip"], [719, 2, 1, "", "concat"], [723, 2, 1, "", "constant_pad"], [727, 2, 1, "", "expand_dims"], [731, 2, 1, "", "flip"], [735, 2, 1, "", "permute_dims"], [739, 2, 1, "", "repeat"], [743, 2, 1, "", "reshape"], [747, 2, 1, "", "roll"], [749, 2, 1, "", "split"], [753, 2, 1, "", "squeeze"], [757, 2, 1, "", "stack"], [761, 2, 1, "", "swapaxes"], [765, 2, 1, "", "tile"], [769, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[771, 2, 1, "", "fomaml_step"], [772, 2, 1, "", "maml_step"], [773, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[775, 2, 1, "", "all_nested_indices"], [776, 2, 1, "", "copy_nest"], [777, 2, 1, "", "index_nest"], [778, 2, 1, "", "insert_into_nest_at_index"], [779, 2, 1, "", "insert_into_nest_at_indices"], [780, 2, 1, "", "map"], [781, 2, 1, "", "map_nest_at_index"], [782, 2, 1, "", "map_nest_at_indices"], [783, 2, 1, "", "multi_index_nest"], [784, 2, 1, "", "nested_any"], [785, 2, 1, "", "nested_indices_where"], [786, 2, 1, "", "nested_map"], [787, 2, 1, "", "nested_multi_map"], [788, 2, 1, "", "prune_nest_at_index"], [789, 2, 1, "", "prune_nest_at_indices"], [790, 2, 1, "", "set_nest_at_index"], [791, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[796, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[798, 2, 1, "", "multinomial"], [800, 2, 1, "", "randint"], [802, 2, 1, "", "random_normal"], [805, 2, 1, "", "random_uniform"], [807, 2, 1, "", "seed"], [808, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[810, 2, 1, "", "argmax"], [811, 2, 1, "", "argmin"], [812, 2, 1, "", "nonzero"], [813, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[815, 2, 1, "", "unique_all"], [816, 2, 1, "", "unique_counts"], [817, 2, 1, "", "unique_inverse"], [818, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[823, 2, 1, "", "argsort"], [828, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[834, 2, 1, "", "einsum"], [838, 2, 1, "", "max"], [842, 2, 1, "", "mean"], [846, 2, 1, "", "min"], [850, 2, 1, "", "prod"], [854, 2, 1, "", "std"], [858, 2, 1, "", "sum"], [862, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[867, 2, 1, "", "all"], [871, 2, 1, "", "any"]], "ivy.inspection": [[876, 2, 1, "", "add_array_specs"], [877, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[880, 0, 0, "-", "activations"], [883, 0, 0, "-", "converters"], [885, 0, 0, "-", "initializers"], [891, 0, 0, "-", "layers"], [903, 0, 0, "-", "module"], [905, 0, 0, "-", "norms"], [907, 0, 0, "-", "optimizers"], [913, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[881, 1, 1, "", "GEGLU"], [882, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[881, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[882, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[884, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[885, 1, 1, "", "Constant"], [886, 1, 1, "", "FirstLayerSiren"], [887, 1, 1, "", "GlorotUniform"], [885, 1, 1, "", "KaimingNormal"], [888, 1, 1, "", "Ones"], [889, 1, 1, "", "Siren"], [885, 1, 1, "", "Uniform"], [890, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[885, 3, 1, "", "__init__"], [885, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[886, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[887, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[885, 3, 1, "", "__init__"], [885, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[888, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[889, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[885, 3, 1, "", "__init__"], [885, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[890, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[892, 1, 1, "", "Conv1D"], [893, 1, 1, "", "Conv1DTranspose"], [894, 1, 1, "", "Conv2D"], [895, 1, 1, "", "Conv2DTranspose"], [896, 1, 1, "", "Conv3D"], [897, 1, 1, "", "Conv3DTranspose"], [898, 1, 1, "", "DepthwiseConv2D"], [899, 1, 1, "", "Dropout"], [900, 1, 1, "", "LSTM"], [901, 1, 1, "", "Linear"], [902, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[892, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[893, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[894, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[895, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[896, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[897, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[898, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[899, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[900, 3, 1, "", "__init__"], [900, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[901, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[902, 3, 1, "", "__init__"]], "ivy.stateful.module": [[904, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[904, 3, 1, "", "__init__"], [904, 3, 1, "", "build"], [904, 4, 1, "", "build_mode"], [904, 4, 1, "", "built"], [904, 3, 1, "", "check_submod_rets"], [904, 3, 1, "", "get_mod_key"], [904, 3, 1, "", "mod_depth"], [904, 3, 1, "", "mod_height"], [904, 3, 1, "", "mod_with_top_mod_key_chain"], [904, 3, 1, "", "save_weights"], [904, 3, 1, "", "show_mod_in_top_mod"], [904, 3, 1, "", "show_structure"], [904, 3, 1, "", "show_v_in_top_v"], [904, 3, 1, "", "sub_mods"], [904, 3, 1, "", "track_submod_call_order"], [904, 3, 1, "", "track_submod_rets"], [904, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[906, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[906, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[908, 1, 1, "", "Adam"], [909, 1, 1, "", "LAMB"], [910, 1, 1, "", "LARS"], [911, 1, 1, "", "Optimizer"], [912, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[908, 3, 1, "", "__init__"], [908, 3, 1, "", "set_state"], [908, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[909, 3, 1, "", "__init__"], [909, 3, 1, "", "set_state"], [909, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[910, 3, 1, "", "__init__"], [910, 3, 1, "", "set_state"], [910, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[911, 3, 1, "", "__init__"], [911, 3, 1, "", "set_state"], [911, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[912, 3, 1, "", "__init__"], [912, 3, 1, "", "set_state"], [912, 4, 1, "", "state"]], "ivy.stateful.sequential": [[914, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[914, 3, 1, "", "__init__"]], "ivy.verbosity": [[917, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 112, 118, 127, 144], "handler": [0, 127], "choose_random_backend": 1, "clear_backend_stack": 2, "current_backend": 3, "get_backend": 4, "set_backend": 5, "try_import_ivy_jax": 6, "try_import_ivy_mxnet": 7, "try_import_ivy_numpi": 8, "try_import_ivy_tf": 9, "try_import_ivy_torch": 10, "unset_backend": 11, "background": [12, 872], "ml": 13, "explos": 13, "standard": 14, "skeptic": 14, "complimentari": 14, "v": [14, 144], "competit": 14, "do": 14, "work": [14, 20], "The": [14, 18, 129, 144], "arrai": [14, 115, 120, 125, 129, 192, 268, 272, 276, 280, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 436, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 486, 491, 496, 500, 505, 533, 579, 626, 629, 632, 635, 638, 641, 644, 647, 651, 655, 658, 661, 664, 667, 671, 674, 677, 680, 683, 686, 689, 692, 696, 701, 706, 712, 717, 721, 725, 729, 733, 737, 741, 745, 751, 755, 759, 763, 767, 794, 821, 826, 832, 836, 840, 844, 848, 852, 856, 860, 865, 869], "api": [14, 19, 112, 115, 121, 127, 129, 131, 132], "why": 15, "unifi": [15, 129], "No": [15, 17], "more": 15, "re": 15, "implement": 15, "infinit": 15, "shelf": 15, "life": 15, "contribut": [16, 872], "set": [17, 56, 101, 118, 814], "up": 17, "clone": 17, "ivi": [17, 112, 114, 116, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 192, 193, 194, 195, 268, 269, 270, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 293, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 309, 310, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 505, 506, 507, 508, 517, 518, 533, 534, 535, 536, 579, 580, 581, 582, 584, 585, 586, 589, 590, 591, 594, 595, 596, 598, 599, 600, 602, 603, 604, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 649, 651, 652, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 730, 731, 733, 734, 735, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 751, 752, 753, 755, 756, 757, 759, 760, 761, 763, 764, 765, 767, 768, 769, 794, 795, 796, 800, 801, 804, 805, 806, 821, 822, 823, 824, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 842, 844, 845, 846, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 861, 862, 865, 866, 867, 869, 870, 871], "pycharm": 17, "virtual": 17, "environ": 17, "docker": [17, 18, 20], "us": [17, 20, 130], "miniconda": [17, 20], "venv": [17, 20], "interpret": 17, "window": 17, "maco": 17, "ubuntu": 17, "github": 17, "codespac": 17, "pre": 17, "commit": [17, 18], "basic": 18, "get": 18, "help": 18, "todo": 18, "list": 18, "issu": 18, "manag": 18, "your": 18, "fork": 18, "who": 18, "To": 18, "ask": 18, "With": 18, "command": 18, "line": 18, "browser": 18, "pull": 18, "request": 18, "small": 18, "often": 18, "run": 18, "test": [18, 115, 116], "local": 18, "open": 19, "task": 19, "function": [19, 117, 119, 121, 122, 123, 125, 127, 132, 144], "format": 19, "frontend": [19, 132], "build": [20, 127], "doc": 20, "dockerless": 20, "document": 20, "pipelin": [20, 144], "make_doc": 20, "sh": 20, "entrypoint": 20, "_make_doc": 20, "generate_src_rst_fil": 20, "py": 20, "sphinx": 20, "correct_built_html_fil": 20, "remove_fil": 20, "activ": [21, 66, 155, 880], "arraywithactiv": 22, "convers": 23, "args_to_ivi": 24, "args_to_n": 25, "to_ivi": 26, "to_n": 27, "creation": [28, 73, 166], "arraywithcr": 29, "data": [30, 75, 116, 122, 130, 144, 185, 814, 815, 816, 818], "type": [30, 75, 117, 122, 144, 185], "arraywithdatatyp": 31, "devic": [32, 77, 123, 125, 219], "arraywithdevic": 33, "elementwis": [34, 79, 266], "arraywithelementwis": 35, "gener": [36, 81, 116, 503], "arraywithgener": 37, "gradient": [38, 83, 577], "arraywithgradi": 39, "imag": [40, 85], "arraywithimag": 41, "layer": [42, 87, 611, 891], "arraywithlay": 43, "linear": [44, 89, 620, 624, 901], "algebra": [44, 89, 624], "arraywithlinearalgebra": 45, "loss": [46, 91, 694], "arraywithloss": 47, "manipul": [48, 93, 710], "arraywithmanipul": 49, "norm": [50, 95, 792, 905], "arraywithnorm": 51, "random": [52, 97, 797], "arraywithrandom": 53, "search": [54, 99, 809], "arraywithsearch": 55, "arraywithset": 57, "sort": [58, 103, 819, 825, 826, 827, 828], "arraywithsort": 59, "statist": [60, 105, 830], "arraywithstatist": 61, "util": [62, 107, 863], "arraywithutil": 63, "wrap": [64, 109, 119], "add_ivy_array_instance_method": 65, "containerwithactiv": 67, "base": 68, "containerbas": 69, "contain": [70, 71, 121, 130, 193, 195, 269, 273, 277, 281, 283, 286, 290, 294, 298, 302, 306, 310, 314, 318, 322, 326, 330, 334, 338, 342, 344, 347, 351, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 437, 439, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 485, 487, 490, 492, 495, 497, 501, 506, 508, 517, 534, 536, 580, 582, 584, 586, 589, 591, 594, 596, 598, 600, 602, 604, 648, 697, 699, 702, 704, 707, 709, 713, 715, 718, 722, 726, 730, 734, 738, 742, 746, 748, 752, 756, 760, 764, 768, 795, 801, 804, 806, 822, 824, 827, 829, 833, 837, 841, 845, 849, 853, 857, 861, 866, 870], "multidevcontain": 72, "containerwithcr": 74, "containerwithdatatyp": 76, "containerwithdevic": 78, "containerwithelementwis": 80, "containerwithgener": 82, "containerwithgradi": 84, "containerwithimag": 86, "containerwithlay": 88, "containerwithlinearalgebra": 90, "containerwithloss": 92, "containerwithmanipul": 94, "containerwithnorm": 96, "containerwithrandom": 98, "containerwithsearch": 100, "containerwithset": 102, "containerwithsort": 104, "containerwithstatist": 106, "containerwithutil": 108, "add_ivy_container_instance_method": 110, "deep": 111, "dive": 111, "navig": 112, "code": 112, "categor": 112, "submodul": 112, "design": [112, 126, 872], "docstr": [113, 114], "exampl": [114, 125], "tan": [114, 489, 491, 492, 493], "roll": [114, 744, 745, 746, 747], "add": [114, 279, 280, 281, 282], "hypothesi": 116, "self": 116, "consist": 116, "explicit": 116, "test_array_funct": 116, "primari": 117, "composit": 117, "mix": 117, "standalon": 117, "nestabl": [117, 121, 125], "conveni": 117, "nativ": 120, "handl": 120, "instanc": [121, 129], "method": [121, 129, 130], "static": 121, "special": 121, "modul": [122, 123, 131, 903, 904], "argument": [122, 123, 124, 125], "other": [122, 123], "inplac": 124, "updat": 124, "out": [124, 125], "copi": 124, "dtype": [125, 200], "number": 125, "oper": [125, 129, 144], "integ": 125, "sequenc": 125, "block": 127, "framework": [127, 128, 879], "graph": [127, 132], "compil": [127, 132, 163, 164], "class": [129, 879], "monkei": 129, "patch": 129, "construct": 130, "represent": 130, "recurs": 130, "built": 130, "ins": 130, "access": 130, "save": 130, "load": 130, "comparison": 130, "custom": [130, 144], "case": 130, "compartment": 130, "configur": 130, "network": [130, 132], "weight": 130, "state": [131, 144], "initi": [131, 885], "optim": [131, 907, 911], "transpil": 132, "role": 132, "convert": [132, 883], "model": [132, 139, 144], "builder": 134, "ecosystem": 135, "gym": [136, 143], "mech": 137, "memori": [138, 143], "robot": [140, 143], "vision": [141, 143], "extens": [142, 872], "appli": 143, "librari": 143, "mechan": 143, "faq": 144, "maintain": 144, "version": 144, "dynam": 144, "size": 144, "shape": [144, 565, 814, 815, 816, 818], "check": 144, "control": 144, "flow": 144, "auto": 144, "differenti": 144, "replica": 144, "parallel": 144, "support": 144, "altern": 144, "structur": 144, "func": 145, "wrapper": 145, "handle_nest": 146, "handle_out_argu": 147, "infer_devic": 148, "infer_dtyp": 149, "inputs_to_ivy_arrai": 150, "inputs_to_native_arrai": 151, "outputs_to_ivy_arrai": 152, "to_native_arrays_and_back": 153, "gelu": [156, 882], "leaky_relu": 157, "relu": 158, "sigmoid": 159, "softmax": 160, "softplu": 161, "tanh": [162, 494, 496, 497, 498], "constant": 165, "note": [166, 172], "arang": 167, "asarrai": 168, "empti": 169, "empty_lik": 170, "ey": 171, "from_dlpack": 172, "full": 173, "full_lik": 174, "linspac": 175, "logspac": 176, "meshgrid": 177, "native_arrai": 178, "ones": 179, "ones_lik": 180, "tril": 181, "triu": 182, "zero": [183, 890], "zeros_lik": 184, "as_ivy_dtyp": 186, "as_native_dtyp": 187, "astyp": 188, "broadcast_arrai": 189, "broadcast_to": 190, "can_cast": [191, 192, 193, 194], "static_can_cast": 195, "closest_valid_dtyp": 196, "default_dtyp": 197, "default_float_dtyp": 198, "default_int_dtyp": 199, "dtype_bit": 201, "finfo": 202, "function_supported_dtyp": 203, "function_unsupported_dtyp": 204, "iinfo": 205, "invalid_dtyp": 206, "is_float_dtyp": 207, "is_int_dtyp": 208, "promote_typ": 209, "result_typ": 210, "set_default_dtyp": 211, "set_default_float_dtyp": 212, "set_default_int_dtyp": 213, "type_promote_arrai": 214, "unset_default_dtyp": 215, "unset_default_float_dtyp": 216, "unset_default_int_dtyp": 217, "valid_dtyp": 218, "devcloneditem": 220, "devclonedit": 221, "devclonednest": 222, "devdistitem": 223, "devdistit": 224, "devdistnest": 225, "devmapp": 226, "devmappermultiproc": 227, "multidevitem": 228, "multidevit": 229, "multidevnest": 230, "profil": 231, "as_ivy_dev": 232, "as_native_dev": 233, "clear_mem_on_dev": 234, "default_devic": 235, "dev": 236, "dev_clon": 237, "dev_clone_arrai": 238, "dev_clone_it": 239, "dev_clone_nest": 240, "dev_dist": 241, "dev_dist_arrai": 242, "dev_dist_it": 243, "dev_dist_nest": 244, "dev_unifi": 245, "dev_unify_arrai": 246, "dev_unify_it": 247, "dev_unify_nest": 248, "dev_util": 249, "get_all_ivy_arrays_on_dev": 250, "gpu_is_avail": 251, "num_cpu_cor": 252, "num_gpu": 253, "num_ivy_arrays_on_dev": 254, "percent_used_mem_on_dev": 255, "print_all_ivy_arrays_on_dev": 256, "set_default_devic": 257, "set_split_factor": 258, "split_factor": 259, "split_func_cal": 260, "to_devic": 261, "total_mem_on_dev": 262, "tpu_is_avail": 263, "unset_default_devic": 264, "used_mem_on_dev": 265, "ab": [267, 268, 269, 270], "aco": [271, 272, 273, 274], "acosh": [275, 276, 277, 278], "static_add": 283, "asin": [284, 285, 286, 287], "asinh": [288, 289, 290, 291], "atan": [292, 293, 294, 295], "atan2": [296, 297, 298, 299], "atanh": [300, 301, 302, 303], "bitwise_and": [304, 305, 306, 307], "bitwise_invert": [308, 309, 310, 311], "bitwise_left_shift": [312, 313, 314, 315], "bitwise_or": [316, 317, 318, 319], "bitwise_right_shift": [320, 321, 322, 323], "bitwise_xor": [324, 325, 326, 327], "ceil": [328, 329, 330, 331], "co": [332, 333, 334, 335], "cosh": [336, 337, 338, 339], "divid": [340, 341, 342, 343], "static_divid": 344, "equal": [345, 346, 347, 348], "erf": [349, 350, 351, 352], "exp": [353, 354, 355, 356], "expm1": [357, 358, 359, 360], "floor": [361, 362, 363, 364], "floor_divid": [365, 366, 367, 368], "greater": [369, 370, 371, 372], "greater_equ": [373, 374, 375, 376], "isfinit": [377, 378, 379, 380], "isinf": [381, 382, 383, 384], "isnan": [385, 386, 387, 388], "less": [389, 390, 391, 392], "less_equ": [393, 394, 395, 396], "log": [397, 398, 399, 400], "log10": [401, 402, 403, 404], "log1p": [405, 406, 407, 408], "log2": [409, 410, 411, 412], "logaddexp": [413, 414, 415, 416], "logical_and": [417, 418, 419, 420], "logical_not": [421, 422, 423, 424], "logical_or": [425, 426, 427, 428], "logical_xor": [429, 430, 431, 432], "maximum": 433, "minimum": 434, "multipli": [435, 436, 437, 438], "static_multipli": 439, "neg": [440, 441, 442, 443], "not_equ": [444, 445, 446, 447], "posit": [448, 449, 450, 451], "pow": [452, 453, 454, 455], "remaind": [456, 457, 458, 459], "round": [460, 461, 462, 463], "sign": [464, 465, 466, 467], "sin": [468, 469, 470, 471], "sinh": [472, 473, 474, 475], "sqrt": [476, 477, 478, 479], "squar": [480, 481, 482, 483], "subtract": [484, 486, 487, 488], "static_subtract": 485, "static_tan": 490, "static_tanh": 495, "trunc": [499, 500, 501, 502], "all_equ": [504, 505, 506, 507], "static_all_equ": 508, "arg_info": 509, "arg_nam": 510, "array_equ": 511, "arrays_equ": 512, "assert_supports_inplac": 513, "cache_fn": 514, "clip_matrix_norm": 515, "clip_vector_norm": [516, 517, 518], "container_typ": 519, "copy_arrai": 520, "cumprod": 521, "cumsum": 522, "current_backend_str": 523, "default": 524, "einops_rearrang": 525, "einops_reduc": 526, "einops_repeat": 527, "exist": 528, "floormod": 529, "fourier_encod": 530, "gather": 531, "gather_nd": [532, 533, 534, 535], "static_gather_nd": 536, "get_all_arrays_in_memori": 537, "get_min_bas": 538, "get_min_denomin": 539, "get_num_dim": 540, "get_referrers_recurs": 541, "has_nan": 542, "indices_wher": 543, "inplace_arrays_support": 544, "inplace_decr": 545, "inplace_incr": 546, "inplace_upd": 547, "inplace_variables_support": 548, "is_arrai": 549, "is_ivy_arrai": 550, "is_ivy_contain": 551, "is_native_arrai": 552, "match_kwarg": 553, "multiprocess": 554, "num_arrays_in_memori": 555, "one_hot": 556, "print_all_arrays_in_memori": 557, "queue_timeout": 558, "scatter_flat": 559, "scatter_nd": 560, "set_min_bas": 561, "set_min_denomin": 562, "set_queue_timeout": 563, "set_tmp_dir": 564, "shape_to_tupl": 566, "stable_divid": 567, "stable_pow": 568, "supports_inplac": 569, "tmp_dir": 570, "to_list": 571, "to_numpi": 572, "to_scalar": 573, "try_else_non": 574, "unstack": 575, "value_is_nan": 576, "adam_step": [578, 579, 580, 581], "static_adam_step": 582, "adam_upd": [583, 584, 585], "static_adam_upd": 586, "execute_with_gradi": 587, "gradient_descent_upd": [588, 589, 590], "static_gradient_descent_upd": 591, "is_vari": 592, "lamb_upd": [593, 594, 595], "static_lamb_upd": 596, "lars_upd": [597, 598, 599], "static_lars_upd": 600, "optimizer_upd": [601, 602, 603], "static_optimizer_upd": 604, "set_with_grad": 605, "stop_gradi": 606, "unset_with_grad": 607, "variabl": 608, "variable_data": 609, "with_grad": 610, "conv1d": [612, 892], "conv1d_transpos": 613, "conv2d": [614, 894], "conv2d_transpos": 615, "conv3d": [616, 896], "conv3d_transpos": 617, "depthwise_conv2d": 618, "dropout": [619, 899], "lstm_updat": 621, "multi_head_attent": 622, "scaled_dot_product_attent": 623, "choleski": [625, 626, 627], "cross": [628, 629, 630], "det": [631, 632, 633], "diagon": [634, 635, 636], "eigh": [637, 638, 639], "eigvalsh": [640, 641, 642], "inv": [643, 644, 645], "matmul": [646, 647, 648, 649], "matrix_norm": [650, 651, 652], "matrix_pow": 653, "matrix_rank": [654, 655, 656], "matrix_transpos": [657, 658, 659], "outer": [660, 661, 662], "pinv": [663, 664, 665], "qr": [666, 667, 668], "slogdet": 669, "solv": [670, 671, 672], "svd": [673, 674, 675], "svdval": [676, 677, 678], "tensordot": [679, 680, 681], "trace": [682, 683, 684], "vecdot": [685, 686, 687], "vector_norm": [688, 689, 690], "vector_to_skew_symmetric_matrix": [691, 692, 693], "binary_cross_entropi": [695, 696, 697, 698], "static_binary_cross_entropi": 699, "cross_entropi": [700, 701, 702, 703], "static_cross_entropi": 704, "sparse_cross_entropi": [705, 706, 707, 708], "static_sparse_cross_entropi": 709, "clip": [711, 712, 713, 714], "static_clip": 715, "concat": [716, 717, 718, 719], "constant_pad": [720, 721, 722, 723], "expand_dim": [724, 725, 726, 727], "flip": [728, 729, 730, 731], "permute_dim": [732, 733, 734, 735], "repeat": [736, 737, 738, 739], "reshap": [740, 741, 742, 743], "static_rol": 748, "split": 749, "squeez": [750, 751, 752, 753], "stack": [754, 755, 756, 757], "swapax": [758, 759, 760, 761], "tile": [762, 763, 764, 765], "zero_pad": [766, 767, 768, 769], "meta": 770, "fomaml_step": 771, "maml_step": 772, "reptile_step": 773, "nest": 774, "all_nested_indic": 775, "copy_nest": 776, "index_nest": 777, "insert_into_nest_at_index": 778, "insert_into_nest_at_indic": 779, "map": 780, "map_nest_at_index": 781, "map_nest_at_indic": 782, "multi_index_nest": 783, "nested_ani": 784, "nested_indices_wher": 785, "nested_map": 786, "nested_multi_map": 787, "prune_nest_at_index": 788, "prune_nest_at_indic": 789, "set_nest_at_index": 790, "set_nest_at_indic": 791, "layer_norm": [793, 794, 795, 796], "multinomi": 798, "randint": [799, 800], "static_randint": 801, "random_norm": 802, "random_uniform": [803, 804, 805], "static_random_uniform": 806, "seed": 807, "shuffl": 808, "argmax": 810, "argmin": 811, "nonzero": 812, "where": 813, "depend": [814, 815, 816, 818], "output": [814, 815, 816, 818], "unique_al": 815, "unique_count": 816, "unique_invers": 817, "unique_valu": 818, "argsort": [820, 821, 822, 823], "static_argsort": 824, "static_sort": 829, "einsum": [831, 832, 833, 834], "max": [835, 836, 837, 838], "mean": [839, 840, 841, 842], "min": [843, 844, 845, 846], "prod": [847, 848, 849, 850], "std": [851, 852, 853, 854], "sum": [855, 856, 857, 858], "var": [859, 860, 861, 862], "all": [864, 865, 866, 867], "ani": [868, 869, 870, 871], "content": 872, "overview": 872, "quick": 872, "start": 872, "roadmap": [872, 878], "citat": 872, "inspect": 875, "add_array_spec": 876, "fn_array_spec": 877, "geglu": 881, "to_ivy_modul": 884, "firstlayersiren": 886, "glorotuniform": 887, "Ones": 888, "siren": 889, "conv1dtranspos": 893, "conv2dtranspos": 895, "conv3dtranspos": 897, "depthwiseconv2d": 898, "lstm": 900, "multiheadattent": 902, "layernorm": 906, "adam": 908, "lamb": 909, "lar": 910, "sgd": 912, "sequenti": [913, 914], "verbos": 916, "cprint": 917}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})